
H7_eth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eee8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0800f1b8  0800f1b8  0001f1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011de0  08011de0  00021de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011de4  08011de4  00021de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  08011de8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003210  24000094  08011e7c  00030094  2**2
                  ALLOC
  7 ._user_heap_stack 00002004  240032a4  08011e7c  000332a4  2**0
                  ALLOC
  8 .lwip_sec     00004d83  30000000  08011e7c  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cab2  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c6e  00000000  00000000  0004cb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c8  00000000  00000000  000517e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001318  00000000  00000000  00052bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d286  00000000  00000000  00053ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022841  00000000  00000000  0009114e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150e50  00000000  00000000  000b398f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002047df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057c4  00000000  00000000  00204830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000094 	.word	0x24000094
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f1a0 	.word	0x0800f1a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000098 	.word	0x24000098
 800030c:	0800f1a0 	.word	0x0800f1a0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 f929 	bl	800060c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ba:	4b37      	ldr	r3, [pc, #220]	; (8000498 <main+0xe8>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d11b      	bne.n	80003fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c6:	f3bf 8f4f 	dsb	sy
}
 80003ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003cc:	f3bf 8f6f 	isb	sy
}
 80003d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003d2:	4b31      	ldr	r3, [pc, #196]	; (8000498 <main+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e6:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <main+0xe8>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <main+0xe8>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	e000      	b.n	8000400 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000400:	4b25      	ldr	r3, [pc, #148]	; (8000498 <main+0xe8>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d138      	bne.n	800047e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800040c:	4b22      	ldr	r3, [pc, #136]	; (8000498 <main+0xe8>)
 800040e:	2200      	movs	r2, #0
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000414:	f3bf 8f4f 	dsb	sy
}
 8000418:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <main+0xe8>)
 800041c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000420:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	0b5b      	lsrs	r3, r3, #13
 8000426:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800042a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000434:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	015a      	lsls	r2, r3, #5
 800043a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800043e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000444:	4914      	ldr	r1, [pc, #80]	; (8000498 <main+0xe8>)
 8000446:	4313      	orrs	r3, r2
 8000448:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1ef      	bne.n	8000436 <main+0x86>
    } while(sets-- != 0U);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1e5a      	subs	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d1e5      	bne.n	800042c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <main+0xe8>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <main+0xe8>)
 800046c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000470:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000472:	f3bf 8f4f 	dsb	sy
}
 8000476:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000478:	f3bf 8f6f 	isb	sy
}
 800047c:	e000      	b.n	8000480 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f000 fc2e 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f80a 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f878 	bl	800057c <MX_GPIO_Init>
  MX_LWIP_Init();
 800048c:	f003 fade 	bl	8003a4c <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000490:	f003 fc28 	bl	8003ce4 <MX_LWIP_Process>
 8000494:	e7fc      	b.n	8000490 <main+0xe0>
 8000496:	bf00      	nop
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b09c      	sub	sp, #112	; 0x70
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	224c      	movs	r2, #76	; 0x4c
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f00d fe20 	bl	800e0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2220      	movs	r2, #32
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f00d fe1a 	bl	800e0f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004bc:	2002      	movs	r0, #2
 80004be:	f002 fb7d 	bl	8002bbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004c2:	2300      	movs	r3, #0
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <SystemClock_Config+0xdc>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a2b      	ldr	r2, [pc, #172]	; (8000578 <SystemClock_Config+0xdc>)
 80004cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b29      	ldr	r3, [pc, #164]	; (8000578 <SystemClock_Config+0xdc>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004de:	bf00      	nop
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <SystemClock_Config+0xdc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ec:	d1f8      	bne.n	80004e0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ee:	2302      	movs	r3, #2
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f6:	2340      	movs	r3, #64	; 0x40
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fa:	2302      	movs	r3, #2
 80004fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fe:	2300      	movs	r3, #0
 8000500:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000502:	2304      	movs	r3, #4
 8000504:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000506:	2320      	movs	r3, #32
 8000508:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800050a:	2301      	movs	r3, #1
 800050c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800050e:	2304      	movs	r3, #4
 8000510:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000512:	2302      	movs	r3, #2
 8000514:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000516:	230c      	movs	r3, #12
 8000518:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800051a:	2300      	movs	r3, #0
 800051c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000522:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000528:	4618      	mov	r0, r3
 800052a:	f002 fb81 	bl	8002c30 <HAL_RCC_OscConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000534:	f000 f8be 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	233f      	movs	r3, #63	; 0x3f
 800053a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	2303      	movs	r3, #3
 800053e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000544:	2308      	movs	r3, #8
 8000546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800054c:	2340      	movs	r3, #64	; 0x40
 800054e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000554:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000556:	2340      	movs	r3, #64	; 0x40
 8000558:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2103      	movs	r1, #3
 800055e:	4618      	mov	r0, r3
 8000560:	f002 ff14 	bl	800338c <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800056a:	f000 f8a3 	bl	80006b4 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3770      	adds	r7, #112	; 0x70
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	58024800 	.word	0x58024800

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_GPIO_Init+0x8c>)
 8000584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <MX_GPIO_Init+0x8c>)
 800058a:	f043 0304 	orr.w	r3, r3, #4
 800058e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <MX_GPIO_Init+0x8c>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a6:	4a18      	ldr	r2, [pc, #96]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	58024400 	.word	0x58024400

0800060c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800061e:	f000 fce9 	bl	8000ff4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000622:	2301      	movs	r3, #1
 8000624:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000626:	2300      	movs	r3, #0
 8000628:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800062e:	231f      	movs	r3, #31
 8000630:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000632:	2387      	movs	r3, #135	; 0x87
 8000634:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000636:	2300      	movs	r3, #0
 8000638:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800063a:	2300      	movs	r3, #0
 800063c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800063e:	2301      	movs	r3, #1
 8000640:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000642:	2301      	movs	r3, #1
 8000644:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800064e:	463b      	mov	r3, r7
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fd07 	bl	8001064 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000656:	2301      	movs	r3, #1
 8000658:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800065a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800065e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8000660:	2309      	movs	r3, #9
 8000662:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000664:	2300      	movs	r3, #0
 8000666:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000668:	2303      	movs	r3, #3
 800066a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000674:	2301      	movs	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000678:	463b      	mov	r3, r7
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fcf2 	bl	8001064 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000680:	2302      	movs	r3, #2
 8000682:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MPU_Config+0xa4>)
 8000686:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000688:	230d      	movs	r3, #13
 800068a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800068c:	2301      	movs	r3, #1
 800068e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000690:	2301      	movs	r3, #1
 8000692:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000698:	463b      	mov	r3, r7
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fce2 	bl	8001064 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006a0:	2004      	movs	r0, #4
 80006a2:	f000 fcbf 	bl	8001024 <HAL_MPU_Enable>

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	30004000 	.word	0x30004000

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_MspInit+0x30>)
 80006c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_MspInit+0x30>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_MspInit+0x30>)
 80006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	58024400 	.word	0x58024400

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 fb40 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	return 1;
 800074c:	2301      	movs	r3, #1
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <_kill>:

int _kill(int pid, int sig)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <_kill+0x20>)
 8000764:	2216      	movs	r2, #22
 8000766:	601a      	str	r2, [r3, #0]
	return -1;
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	24003294 	.word	0x24003294

0800077c <_exit>:

void _exit (int status)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ffe5 	bl	8000758 <_kill>
	while (1) {}		/* Make sure we hang here */
 800078e:	e7fe      	b.n	800078e <_exit+0x12>

08000790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a2:	f3af 8000 	nop.w
 80007a6:	4601      	mov	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
	}

return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e009      	b.n	80007f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf1      	blt.n	80007dc <_write+0x12>
	}
	return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_close>:

int _close(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	return -1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800082a:	605a      	str	r2, [r3, #4]
	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <_isatty>:

int _isatty(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d205      	bcs.n	80008a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <_sbrk+0x6c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	e009      	b.n	80008bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <_sbrk+0x64>)
 80008b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	371c      	adds	r7, #28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	24050000 	.word	0x24050000
 80008cc:	00001000 	.word	0x00001000
 80008d0:	240000b0 	.word	0x240000b0
 80008d4:	240032a8 	.word	0x240032a8
 80008d8:	24003294 	.word	0x24003294

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <SystemInit+0xd0>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a31      	ldr	r2, [pc, #196]	; (80009ac <SystemInit+0xd0>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <SystemInit+0xd4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	2b06      	cmp	r3, #6
 80008fa:	d807      	bhi.n	800090c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <SystemInit+0xd4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 030f 	bic.w	r3, r3, #15
 8000904:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <SystemInit+0xd4>)
 8000906:	f043 0307 	orr.w	r3, r3, #7
 800090a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <SystemInit+0xd8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a28      	ldr	r2, [pc, #160]	; (80009b4 <SystemInit+0xd8>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemInit+0xd8>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <SystemInit+0xd8>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4924      	ldr	r1, [pc, #144]	; (80009b4 <SystemInit+0xd8>)
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <SystemInit+0xdc>)
 8000926:	4013      	ands	r3, r2
 8000928:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <SystemInit+0xd4>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d007      	beq.n	8000946 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <SystemInit+0xd4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f023 030f 	bic.w	r3, r3, #15
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <SystemInit+0xd4>)
 8000940:	f043 0307 	orr.w	r3, r3, #7
 8000944:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <SystemInit+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <SystemInit+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <SystemInit+0xd8>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <SystemInit+0xd8>)
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <SystemInit+0xe0>)
 800095c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <SystemInit+0xd8>)
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <SystemInit+0xe4>)
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <SystemInit+0xd8>)
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <SystemInit+0xe8>)
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <SystemInit+0xd8>)
 800096c:	2200      	movs	r2, #0
 800096e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <SystemInit+0xd8>)
 8000972:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <SystemInit+0xe8>)
 8000974:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <SystemInit+0xd8>)
 8000978:	2200      	movs	r2, #0
 800097a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <SystemInit+0xd8>)
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <SystemInit+0xe8>)
 8000980:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <SystemInit+0xd8>)
 8000984:	2200      	movs	r2, #0
 8000986:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <SystemInit+0xd8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <SystemInit+0xd8>)
 800098e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000992:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <SystemInit+0xd8>)
 8000996:	2200      	movs	r2, #0
 8000998:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <SystemInit+0xec>)
 800099c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00
 80009b0:	52002000 	.word	0x52002000
 80009b4:	58024400 	.word	0x58024400
 80009b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80009bc:	02020200 	.word	0x02020200
 80009c0:	01ff0000 	.word	0x01ff0000
 80009c4:	01010280 	.word	0x01010280
 80009c8:	52004000 	.word	0x52004000

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d0:	f7ff ff84 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	; (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	; (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f00d fb37 	bl	800e06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fcd7 	bl	80003b0 <main>
  bx  lr
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000a08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a0c:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8000a10:	08011de8 	.word	0x08011de8
  ldr r2, =_sbss
 8000a14:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 8000a18:	240032a4 	.word	0x240032a4

08000a1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC3_IRQHandler>

08000a1e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00b      	beq.n	8000a46 <LAN8742_RegisterBusIO+0x28>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <LAN8742_RegisterBusIO+0x28>
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <LAN8742_RegisterBusIO+0x28>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e014      	b.n	8000a76 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d17c      	bne.n	8000b9c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e01c      	b.n	8000af6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f107 0208 	add.w	r2, r7, #8
 8000ac4:	2112      	movs	r1, #18
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	4798      	blx	r3
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	da03      	bge.n	8000ad8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000ad0:	f06f 0304 	mvn.w	r3, #4
 8000ad4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000ad6:	e00b      	b.n	8000af0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f003 031f 	and.w	r3, r3, #31
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d105      	bne.n	8000af0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
         break;
 8000aee:	e005      	b.n	8000afc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2b1f      	cmp	r3, #31
 8000afa:	d9df      	bls.n	8000abc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d902      	bls.n	8000b0a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000b04:	f06f 0302 	mvn.w	r3, #2
 8000b08:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d145      	bne.n	8000b9c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6810      	ldr	r0, [r2, #0]
 8000b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4798      	blx	r3
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db37      	blt.n	8000b96 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	6810      	ldr	r0, [r2, #0]
 8000b2e:	f107 0208 	add.w	r2, r7, #8
 8000b32:	2100      	movs	r1, #0
 8000b34:	4798      	blx	r3
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db28      	blt.n	8000b8e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4798      	blx	r3
 8000b42:	4603      	mov	r3, r0
 8000b44:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000b46:	e01c      	b.n	8000b82 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4798      	blx	r3
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b5a:	d80e      	bhi.n	8000b7a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	6810      	ldr	r0, [r2, #0]
 8000b64:	f107 0208 	add.w	r2, r7, #8
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4798      	blx	r3
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da07      	bge.n	8000b82 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000b72:	f06f 0304 	mvn.w	r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
                 break;
 8000b78:	e010      	b.n	8000b9c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000b7a:	f06f 0301 	mvn.w	r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
               break;
 8000b80:	e00c      	b.n	8000b9c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1dd      	bne.n	8000b48 <LAN8742_Init+0xc6>
 8000b8c:	e006      	b.n	8000b9c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000b8e:	f06f 0304 	mvn.w	r3, #4
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	e002      	b.n	8000b9c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000b96:	f06f 0303 	mvn.w	r3, #3
 8000b9a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d112      	bne.n	8000bc8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4798      	blx	r3
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000bac:	bf00      	nop
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4798      	blx	r3
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bc0:	d9f5      	bls.n	8000bae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 }
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6810      	ldr	r0, [r2, #0]
 8000be6:	f107 020c 	add.w	r2, r7, #12
 8000bea:	2101      	movs	r1, #1
 8000bec:	4798      	blx	r3
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da02      	bge.n	8000bfa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000bf4:	f06f 0304 	mvn.w	r3, #4
 8000bf8:	e06e      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6810      	ldr	r0, [r2, #0]
 8000c02:	f107 020c 	add.w	r2, r7, #12
 8000c06:	2101      	movs	r1, #1
 8000c08:	4798      	blx	r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da02      	bge.n	8000c16 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c10:	f06f 0304 	mvn.w	r3, #4
 8000c14:	e060      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d101      	bne.n	8000c24 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000c20:	2301      	movs	r3, #1
 8000c22:	e059      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	6810      	ldr	r0, [r2, #0]
 8000c2c:	f107 020c 	add.w	r2, r7, #12
 8000c30:	2100      	movs	r1, #0
 8000c32:	4798      	blx	r3
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da02      	bge.n	8000c40 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000c3a:	f06f 0304 	mvn.w	r3, #4
 8000c3e:	e04b      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d11b      	bne.n	8000c82 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <LAN8742_GetLinkState+0x90>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e03a      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e033      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e02c      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	e02a      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6810      	ldr	r0, [r2, #0]
 8000c8a:	f107 020c 	add.w	r2, r7, #12
 8000c8e:	211f      	movs	r1, #31
 8000c90:	4798      	blx	r3
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da02      	bge.n	8000c9e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000c98:	f06f 0304 	mvn.w	r3, #4
 8000c9c:	e01c      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ca8:	2306      	movs	r3, #6
 8000caa:	e015      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 031c 	and.w	r3, r3, #28
 8000cb2:	2b18      	cmp	r3, #24
 8000cb4:	d101      	bne.n	8000cba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e00e      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f003 031c 	and.w	r3, r3, #28
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d101      	bne.n	8000cc8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e007      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 031c 	and.w	r3, r3, #28
 8000cce:	2b14      	cmp	r3, #20
 8000cd0:	d101      	bne.n	8000cd6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	e000      	b.n	8000cd8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000cd6:	2305      	movs	r3, #5
    }				
  }
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 f952 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cec:	f002 fd04 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_Init+0x68>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	0a1b      	lsrs	r3, r3, #8
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	4913      	ldr	r1, [pc, #76]	; (8000d4c <HAL_Init+0x6c>)
 8000cfe:	5ccb      	ldrb	r3, [r1, r3]
 8000d00:	f003 031f 	and.w	r3, r3, #31
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_Init+0x68>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_Init+0x6c>)
 8000d14:	5cd3      	ldrb	r3, [r2, r3]
 8000d16:	f003 031f 	and.w	r3, r3, #31
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_Init+0x70>)
 8000d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_Init+0x74>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f814 	bl	8000d58 <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e002      	b.n	8000d40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3a:	f7ff fcc1 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58024400 	.word	0x58024400
 8000d4c:	08011b98 	.word	0x08011b98
 8000d50:	24000004 	.word	0x24000004
 8000d54:	24000000 	.word	0x24000000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_InitTick+0x60>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e021      	b.n	8000db0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_InitTick+0x64>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f929 	bl	8000fda <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f901 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x68>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2400000c 	.word	0x2400000c
 8000dbc:	24000000 	.word	0x24000000
 8000dc0:	24000008 	.word	0x24000008

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2400000c 	.word	0x2400000c
 8000de8:	240000b4 	.word	0x240000b4

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	240000b4 	.word	0x240000b4

08000e04 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000e14:	4904      	ldr	r1, [pc, #16]	; (8000e28 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	58000400 	.word	0x58000400

08000e2c <__NVIC_SetPriorityGrouping>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <__NVIC_SetPriorityGrouping+0x40>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x40>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	05fa0000 	.word	0x05fa0000

08000e74 <__NVIC_GetPriorityGrouping>:
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_SetPriority>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff47 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff5e 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff90 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5f 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffb2 	bl	8000f4c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ff8:	f3bf 8f5f 	dmb	sy
}
 8000ffc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_MPU_Disable+0x28>)
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_MPU_Disable+0x28>)
 8001004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001008:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_MPU_Disable+0x2c>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	e000ed90 	.word	0xe000ed90

08001024 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_MPU_Enable+0x38>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_MPU_Enable+0x3c>)
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_MPU_Enable+0x3c>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001042:	f3bf 8f4f 	dsb	sy
}
 8001046:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
}
 800104c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed90 	.word	0xe000ed90
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	785a      	ldrb	r2, [r3, #1]
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_MPU_ConfigRegion+0x84>)
 8001072:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d029      	beq.n	80010d0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800107c:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <HAL_MPU_ConfigRegion+0x84>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7b1b      	ldrb	r3, [r3, #12]
 8001088:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7adb      	ldrb	r3, [r3, #11]
 800108e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001090:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001098:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7b5b      	ldrb	r3, [r3, #13]
 800109e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7b9b      	ldrb	r3, [r3, #14]
 80010a6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7bdb      	ldrb	r3, [r3, #15]
 80010ae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7a5b      	ldrb	r3, [r3, #9]
 80010b6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7a1b      	ldrb	r3, [r3, #8]
 80010be:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010c0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010cc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80010ce:	e005      	b.n	80010dc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_MPU_ConfigRegion+0x84>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <HAL_MPU_ConfigRegion+0x84>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed90 	.word	0xe000ed90

080010ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0cf      	b.n	800129e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2223      	movs	r2, #35	; 0x23
 800110c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f002 ff9d 	bl	8004050 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b64      	ldr	r3, [pc, #400]	; (80012a8 <HAL_ETH_Init+0x1bc>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800111c:	4a62      	ldr	r2, [pc, #392]	; (80012a8 <HAL_ETH_Init+0x1bc>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <HAL_ETH_Init+0x1bc>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7a1b      	ldrb	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d103      	bne.n	8001144 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe61 	bl	8000e04 <HAL_SYSCFG_ETHInterfaceSelect>
 8001142:	e003      	b.n	800114c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001144:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001148:	f7ff fe5c 	bl	8000e04 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <HAL_ETH_Init+0x1c0>)
 800114e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001168:	f7ff fe40 	bl	8000dec <HAL_GetTick>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800116e:	e011      	b.n	8001194 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001170:	f7ff fe3c 	bl	8000dec <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800117e:	d909      	bls.n	8001194 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2204      	movs	r2, #4
 8001184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	22e0      	movs	r2, #224	; 0xe0
 800118c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e084      	b.n	800129e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1e4      	bne.n	8001170 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fd94 	bl	8001cd4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80011ac:	f002 fc1e 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <HAL_ETH_Init+0x1c4>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9a      	lsrs	r2, r3, #18
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3a01      	subs	r2, #1
 80011c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 ff7f 	bl	80020c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80011d6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011e6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	22e0      	movs	r2, #224	; 0xe0
 8001202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e049      	b.n	800129e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001212:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_ETH_Init+0x1c8>)
 8001218:	4013      	ands	r3, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6952      	ldr	r2, [r2, #20]
 800121e:	0051      	lsls	r1, r2, #1
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	430b      	orrs	r3, r1
 8001226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800122a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 ffe7 	bl	8002202 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f001 f82d 	bl	8002294 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	3305      	adds	r3, #5
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	021a      	lsls	r2, r3, #8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	3304      	adds	r3, #4
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	3303      	adds	r3, #3
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	061a      	lsls	r2, r3, #24
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	3302      	adds	r3, #2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001278:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001286:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001288:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2210      	movs	r2, #16
 8001298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58000400 	.word	0x58000400
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	ffff8001 	.word	0xffff8001

080012b8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d153      	bne.n	8001372 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2223      	movs	r2, #35	; 0x23
 80012ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2204      	movs	r2, #4
 80012d6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f9f6 	bl	80016ca <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0202 	orr.w	r2, r2, #2
 80012ec:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800132a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001346:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001352:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2223      	movs	r2, #35	; 0x23
 800136a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800138a:	2b23      	cmp	r3, #35	; 0x23
 800138c:	d13f      	bne.n	800140e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2223      	movs	r2, #35	; 0x23
 8001392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0202 	bic.w	r2, r2, #2
 8001400:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2210      	movs	r2, #16
 8001406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001434:	f043 0201 	orr.w	r2, r3, #1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e07f      	b.n	8001542 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001448:	2b23      	cmp	r3, #35	; 0x23
 800144a:	d179      	bne.n	8001540 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800144c:	2200      	movs	r2, #0
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 ff7d 	bl	8002350 <ETH_Prepare_Tx_Descriptors>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	f043 0202 	orr.w	r2, r3, #2
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e068      	b.n	8001542 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001470:	f3bf 8f4f 	dsb	sy
}
 8001474:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3206      	adds	r2, #6
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	2b03      	cmp	r3, #3
 8001494:	d904      	bls.n	80014a0 <HAL_ETH_Transmit+0x84>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	1f1a      	subs	r2, r3, #4
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3106      	adds	r1, #6
 80014ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80014b8:	f7ff fc98 	bl	8000dec <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80014be:	e039      	b.n	8001534 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80014cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d012      	beq.n	80014fa <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	f043 0208 	orr.w	r2, r3, #8
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ec:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e023      	b.n	8001542 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d018      	beq.n	8001534 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001502:	f7ff fc73 	bl	8000dec <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	d302      	bcc.n	8001518 <HAL_ETH_Transmit+0xfc>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10d      	bne.n	8001534 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	f043 0204 	orr.w	r2, r3, #4
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800152e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e006      	b.n	8001542 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	dbc1      	blt.n	80014c0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	e000      	b.n	8001542 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
  }
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b088      	sub	sp, #32
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0a5      	b.n	80016c2 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800157c:	2b23      	cmp	r3, #35	; 0x23
 800157e:	d001      	beq.n	8001584 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e09e      	b.n	80016c2 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	3212      	adds	r2, #18
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800159a:	f1c3 0304 	rsb	r3, r3, #4
 800159e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015a0:	e067      	b.n	8001672 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <HAL_ETH_ReadData+0x88>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d03d      	beq.n	800164e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00d      	beq.n	8001618 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001628:	461a      	mov	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	b29b      	uxth	r3, r3
 800162e:	f002 fec5 	bl	80043bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	441a      	add	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3301      	adds	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d902      	bls.n	8001660 <HAL_ETH_ReadData+0x116>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b04      	subs	r3, #4
 800165e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	3212      	adds	r2, #18
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db06      	blt.n	8001688 <HAL_ETH_ReadData+0x13e>
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	429a      	cmp	r2, r3
 8001680:	d202      	bcs.n	8001688 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d08c      	beq.n	80015a2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	441a      	add	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f814 	bl	80016ca <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	e000      	b.n	80016c2 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b088      	sub	sp, #32
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80016d6:	2301      	movs	r3, #1
 80016d8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	3212      	adds	r2, #18
 80016e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ea:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016f0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016f2:	e03b      	b.n	800176c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d112      	bne.n	8001722 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fe2b 	bl	800435c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	74fb      	strb	r3, [r7, #19]
 8001710:	e007      	b.n	8001722 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	461a      	mov	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d021      	beq.n	800176c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001728:	f3bf 8f5f 	dmb	sy
}
 800172c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	e003      	b.n	8001748 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001746:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d902      	bls.n	800175a <ETH_UpdateDescriptor+0x90>
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	3b04      	subs	r3, #4
 8001758:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	3212      	adds	r2, #18
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	617b      	str	r3, [r7, #20]
      desccount--;
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	3b01      	subs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <ETH_UpdateDescriptor+0xae>
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1bd      	bne.n	80016f4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	429a      	cmp	r2, r3
 8001780:	d00d      	beq.n	800179e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800179e:	bf00      	nop
 80017a0:	3720      	adds	r7, #32
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e03e      	b.n	8001846 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017d0:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	055b      	lsls	r3, r3, #21
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f043 030c 	orr.w	r3, r3, #12
 80017f4:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001808:	f7ff faf0 	bl	8000dec <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800180e:	e009      	b.n	8001824 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001810:	f7ff faec 	bl	8000dec <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181e:	d901      	bls.n	8001824 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e010      	b.n	8001846 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ed      	bne.n	8001810 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e03c      	b.n	80018ec <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800187a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	055b      	lsls	r3, r3, #21
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f023 030c 	bic.w	r3, r3, #12
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_ETH_WritePHYRegister+0xa4>)
 80018b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80018b6:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_ETH_WritePHYRegister+0xa4>)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80018be:	f7ff fa95 	bl	8000dec <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80018c4:	e009      	b.n	80018da <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80018c6:	f7ff fa91 	bl	8000dec <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d4:	d901      	bls.n	80018da <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e008      	b.n	80018ec <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1ed      	bne.n	80018c6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40028000 	.word	0x40028000

080018f8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e1c3      	b.n	8001c94 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 020c 	and.w	r2, r3, #12
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf0c      	ite	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	2300      	movne	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800199a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf14      	ite	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	2300      	moveq	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf0c      	ite	eq
 8001a26:	2301      	moveq	r3, #1
 8001a28:	2300      	movne	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0e5b      	lsrs	r3, r3, #25
 8001b56:	f003 021f 	and.w	r2, r3, #31
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 020f 	and.w	r2, r3, #15
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf14      	ite	ne
 8001c0a:	2301      	movne	r3, #1
 8001c0c:	2300      	moveq	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c20:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c30:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e00b      	b.n	8001ccc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d105      	bne.n	8001cca <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f85f 	bl	8001d84 <ETH_SetMACConfig>

    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cee:	f001 fe7d 	bl	80039ec <HAL_RCC_GetHCLKFreq>
 8001cf2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d908      	bls.n	8001d0e <HAL_ETH_SetMDIOClockRange+0x3a>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d804      	bhi.n	8001d0e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e027      	b.n	8001d5e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d908      	bls.n	8001d28 <HAL_ETH_SetMDIOClockRange+0x54>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d204      	bcs.n	8001d28 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e01a      	b.n	8001d5e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4a13      	ldr	r2, [pc, #76]	; (8001d78 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d303      	bcc.n	8001d38 <HAL_ETH_SetMDIOClockRange+0x64>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d911      	bls.n	8001d5c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d908      	bls.n	8001d52 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d804      	bhi.n	8001d52 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e005      	b.n	8001d5e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e000      	b.n	8001d5e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001d5c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	01312cff 	.word	0x01312cff
 8001d74:	02160ebf 	.word	0x02160ebf
 8001d78:	03938700 	.word	0x03938700
 8001d7c:	05f5e0ff 	.word	0x05f5e0ff
 8001d80:	08f0d17f 	.word	0x08f0d17f

08001d84 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	791b      	ldrb	r3, [r3, #4]
 8001d9c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001d9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	7b1b      	ldrb	r3, [r3, #12]
 8001da4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001da6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	7b5b      	ldrb	r3, [r3, #13]
 8001dac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	7b9b      	ldrb	r3, [r3, #14]
 8001db4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	7bdb      	ldrb	r3, [r3, #15]
 8001dbc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001dbe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	7c12      	ldrb	r2, [r2, #16]
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d102      	bne.n	8001dce <ETH_SetMACConfig+0x4a>
 8001dc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x4c>
 8001dce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001dd0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	7c52      	ldrb	r2, [r2, #17]
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	d102      	bne.n	8001de0 <ETH_SetMACConfig+0x5c>
 8001dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dde:	e000      	b.n	8001de2 <ETH_SetMACConfig+0x5e>
 8001de0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	7c9b      	ldrb	r3, [r3, #18]
 8001de8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001dea:	431a      	orrs	r2, r3
               macconf->Speed |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001df0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001df6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	7f1b      	ldrb	r3, [r3, #28]
 8001dfc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001dfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7f5b      	ldrb	r3, [r3, #29]
 8001e04:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001e06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	7f92      	ldrb	r2, [r2, #30]
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d102      	bne.n	8001e16 <ETH_SetMACConfig+0x92>
 8001e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e14:	e000      	b.n	8001e18 <ETH_SetMACConfig+0x94>
 8001e16:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001e18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	7fdb      	ldrb	r3, [r3, #31]
 8001e1e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	d102      	bne.n	8001e32 <ETH_SetMACConfig+0xae>
 8001e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e30:	e000      	b.n	8001e34 <ETH_SetMACConfig+0xb0>
 8001e32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001e34:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001e3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e42:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001e44:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <ETH_SetMACConfig+0x22c>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	68f9      	ldr	r1, [r7, #12]
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001e70:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e78:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e82:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001e84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001e8c:	2a00      	cmp	r2, #0
 8001e8e:	d102      	bne.n	8001e96 <ETH_SetMACConfig+0x112>
 8001e90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e94:	e000      	b.n	8001e98 <ETH_SetMACConfig+0x114>
 8001e96:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001e98:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <ETH_SetMACConfig+0x230>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ebc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <ETH_SetMACConfig+0x234>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ee0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ee6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d101      	bne.n	8001ef6 <ETH_SetMACConfig+0x172>
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	e000      	b.n	8001ef8 <ETH_SetMACConfig+0x174>
 8001ef6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001ef8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f0a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001f20:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001f28:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	f023 0103 	bic.w	r1, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001f4e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d101      	bne.n	8001f72 <ETH_SetMACConfig+0x1ee>
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x1f0>
 8001f72:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001f74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001f7c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f86:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001f94:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	00048083 	.word	0x00048083
 8001fb4:	c0f88000 	.word	0xc0f88000
 8001fb8:	fffffef0 	.word	0xfffffef0

08001fbc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <ETH_SetDMAConfig+0xf8>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	6811      	ldr	r1, [r2, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fe2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	791b      	ldrb	r3, [r3, #4]
 8001fe8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001fee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	7b1b      	ldrb	r3, [r3, #12]
 8001ff4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <ETH_SetDMAConfig+0xfc>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	68f9      	ldr	r1, [r7, #12]
 800200e:	430b      	orrs	r3, r1
 8002010:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002014:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7b5b      	ldrb	r3, [r3, #13]
 800201a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <ETH_SetDMAConfig+0x100>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	68f9      	ldr	r1, [r7, #12]
 800203a:	430b      	orrs	r3, r1
 800203c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002040:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	7d1b      	ldrb	r3, [r3, #20]
 800204c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800204e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	7f5b      	ldrb	r3, [r3, #29]
 8002054:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002062:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <ETH_SetDMAConfig+0x104>)
 8002068:	4013      	ands	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	430b      	orrs	r3, r1
 8002072:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002076:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	7f1b      	ldrb	r3, [r3, #28]
 800207e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002084:	4313      	orrs	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <ETH_SetDMAConfig+0x108>)
 8002096:	4013      	ands	r3, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	68f9      	ldr	r1, [r7, #12]
 800209e:	430b      	orrs	r3, r1
 80020a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	ffff87fd 	.word	0xffff87fd
 80020b8:	ffff2ffe 	.word	0xffff2ffe
 80020bc:	fffec000 	.word	0xfffec000
 80020c0:	ffc0efef 	.word	0xffc0efef
 80020c4:	7fc0ffff 	.word	0x7fc0ffff

080020c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0a4      	sub	sp, #144	; 0x90
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002110:	2300      	movs	r3, #0
 8002112:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002120:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002124:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800212c:	2300      	movs	r3, #0
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002142:	2300      	movs	r3, #0
 8002144:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002146:	2300      	movs	r3, #0
 8002148:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800214a:	2300      	movs	r3, #0
 800214c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002160:	2320      	movs	r3, #32
 8002162:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002172:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800217c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80021a2:	2300      	movs	r3, #0
 80021a4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fde6 	bl	8001d84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021b8:	2301      	movs	r3, #1
 80021ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80021e8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fee1 	bl	8001fbc <ETH_SetDMAConfig>
}
 80021fa:	bf00      	nop
 80021fc:	3790      	adds	r7, #144	; 0x90
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e01d      	b.n	800224c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68d9      	ldr	r1, [r3, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	3206      	adds	r2, #6
 8002242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d9de      	bls.n	8002210 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002260:	461a      	mov	r2, r3
 8002262:	2303      	movs	r3, #3
 8002264:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002274:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e023      	b.n	80022ea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	3212      	adds	r2, #18
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d9d8      	bls.n	80022a2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	461a      	mov	r2, r3
 8002318:	2303      	movs	r3, #3
 800231a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002350:	b480      	push	{r7}
 8002352:	b08d      	sub	sp, #52	; 0x34
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3318      	adds	r3, #24
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800238e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002392:	d007      	beq.n	80023a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	3304      	adds	r3, #4
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80023a4:	2302      	movs	r3, #2
 80023a6:	e259      	b.n	800285c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d044      	beq.n	800243e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <ETH_Prepare_Tx_Descriptors+0x240>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c0:	431a      	orrs	r2, r3
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d027      	beq.n	800243e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	431a      	orrs	r2, r3
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800242c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800243c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00e      	beq.n	8002468 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002450:	4013      	ands	r3, r2
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	6992      	ldr	r2, [r2, #24]
 8002456:	431a      	orrs	r2, r3
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d036      	beq.n	80024ee <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800248c:	f3bf 8f5f 	dmb	sy
}
 8002490:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	3301      	adds	r3, #1
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d902      	bls.n	80024b0 <ETH_Prepare_Tx_Descriptors+0x160>
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	3b04      	subs	r3, #4
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024cc:	d10f      	bne.n	80024ee <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80024d8:	f3bf 8f5f 	dmb	sy
}
 80024dc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	e1b6      	b.n	800285c <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002504:	4013      	ands	r3, r2
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	6852      	ldr	r2, [r2, #4]
 800250a:	431a      	orrs	r2, r3
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d012      	beq.n	800253e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <ETH_Prepare_Tx_Descriptors+0x248>)
 800252e:	4013      	ands	r3, r2
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	6852      	ldr	r2, [r2, #4]
 8002534:	0412      	lsls	r2, r2, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	e008      	b.n	8002550 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <ETH_Prepare_Tx_Descriptors+0x248>)
 800254a:	4013      	ands	r3, r2
 800254c:	6a3a      	ldr	r2, [r7, #32]
 800254e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d021      	beq.n	80025a0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	04db      	lsls	r3, r3, #19
 800256a:	431a      	orrs	r2, r3
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002576:	4013      	ands	r3, r2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	69d2      	ldr	r2, [r2, #28]
 800257c:	431a      	orrs	r2, r3
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	e02e      	b.n	80025ee <ETH_Prepare_Tx_Descriptors+0x29e>
 8002590:	ffff0000 	.word	0xffff0000
 8002594:	ffffc000 	.word	0xffffc000
 8002598:	c000ffff 	.word	0xc000ffff
 800259c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <ETH_Prepare_Tx_Descriptors+0x444>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	6852      	ldr	r2, [r2, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	431a      	orrs	r2, r3
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002624:	f3bf 8f5f 	dmb	sy
}
 8002628:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80da 	beq.w	80027f8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	431a      	orrs	r2, r3
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002656:	e0cf      	b.n	80027f8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	3301      	adds	r3, #1
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	2b03      	cmp	r3, #3
 800266e:	d902      	bls.n	8002676 <ETH_Prepare_Tx_Descriptors+0x326>
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	3b04      	subs	r3, #4
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002698:	d007      	beq.n	80026aa <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	3304      	adds	r3, #4
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d029      	beq.n	80026fe <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80026bc:	e019      	b.n	80026f2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80026be:	f3bf 8f5f 	dmb	sy
}
 80026c2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	3301      	adds	r3, #1
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d902      	bls.n	80026e2 <ETH_Prepare_Tx_Descriptors+0x392>
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	3b04      	subs	r3, #4
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	3301      	adds	r3, #1
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d3e1      	bcc.n	80026be <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0ae      	b.n	800285c <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	3301      	adds	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <ETH_Prepare_Tx_Descriptors+0x448>)
 800271a:	4013      	ands	r3, r2
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	6852      	ldr	r2, [r2, #4]
 8002720:	431a      	orrs	r2, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002744:	4013      	ands	r3, r2
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	6852      	ldr	r2, [r2, #4]
 800274a:	0412      	lsls	r2, r2, #16
 800274c:	431a      	orrs	r2, r3
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	e008      	b.n	8002766 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002760:	4013      	ands	r3, r2
 8002762:	6a3a      	ldr	r2, [r7, #32]
 8002764:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d018      	beq.n	80027a4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002778:	4013      	ands	r3, r2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	69d2      	ldr	r2, [r2, #28]
 800277e:	431a      	orrs	r2, r3
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	e020      	b.n	80027d4 <ETH_Prepare_Tx_Descriptors+0x484>
 8002792:	bf00      	nop
 8002794:	ffff8000 	.word	0xffff8000
 8002798:	ffffc000 	.word	0xffffc000
 800279c:	c000ffff 	.word	0xc000ffff
 80027a0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <ETH_Prepare_Tx_Descriptors+0x518>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	6852      	ldr	r2, [r2, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027da:	f3bf 8f5f 	dmb	sy
}
 80027de:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f af2b 	bne.w	8002658 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e005      	b.n	8002822 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002832:	6979      	ldr	r1, [r7, #20]
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	3304      	adds	r3, #4
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002842:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002856:	b662      	cpsie	i
}
 8002858:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3734      	adds	r7, #52	; 0x34
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	ffff8000 	.word	0xffff8000

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800287a:	4b86      	ldr	r3, [pc, #536]	; (8002a94 <HAL_GPIO_Init+0x228>)
 800287c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800287e:	e18c      	b.n	8002b9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 817e 	beq.w	8002b94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d005      	beq.n	80028b0 <HAL_GPIO_Init+0x44>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028e6:	2201      	movs	r2, #1
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0201 	and.w	r2, r3, #1
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d017      	beq.n	800294e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d123      	bne.n	80029a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	69b9      	ldr	r1, [r7, #24]
 800299e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0203 	and.w	r2, r3, #3
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 80d8 	beq.w	8002b94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_GPIO_Init+0x22c>)
 80029e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_GPIO_Init+0x22c>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_GPIO_Init+0x22c>)
 80029f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_GPIO_Init+0x230>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_GPIO_Init+0x234>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_GPIO_Init+0x258>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <HAL_GPIO_Init+0x238>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d02b      	beq.n	8002a8e <HAL_GPIO_Init+0x222>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_GPIO_Init+0x23c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x21e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_GPIO_Init+0x240>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x21a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_GPIO_Init+0x244>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x216>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_GPIO_Init+0x248>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x212>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_GPIO_Init+0x24c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_GPIO_Init+0x250>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x20a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_GPIO_Init+0x254>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x206>
 8002a6e:	2309      	movs	r3, #9
 8002a70:	e029      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a72:	230a      	movs	r3, #10
 8002a74:	e027      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a76:	2307      	movs	r3, #7
 8002a78:	e025      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a7a:	2306      	movs	r3, #6
 8002a7c:	e023      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a7e:	2305      	movs	r3, #5
 8002a80:	e021      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e01f      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a86:	2303      	movs	r3, #3
 8002a88:	e01d      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e01b      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e019      	b.n	8002ac6 <HAL_GPIO_Init+0x25a>
 8002a92:	bf00      	nop
 8002a94:	58000080 	.word	0x58000080
 8002a98:	58024400 	.word	0x58024400
 8002a9c:	58000400 	.word	0x58000400
 8002aa0:	58020000 	.word	0x58020000
 8002aa4:	58020400 	.word	0x58020400
 8002aa8:	58020800 	.word	0x58020800
 8002aac:	58020c00 	.word	0x58020c00
 8002ab0:	58021000 	.word	0x58021000
 8002ab4:	58021400 	.word	0x58021400
 8002ab8:	58021800 	.word	0x58021800
 8002abc:	58021c00 	.word	0x58021c00
 8002ac0:	58022400 	.word	0x58022400
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f002 0203 	and.w	r2, r2, #3
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	4093      	lsls	r3, r2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad6:	4938      	ldr	r1, [pc, #224]	; (8002bb8 <HAL_GPIO_Init+0x34c>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f47f ae6b 	bne.w	8002880 <HAL_GPIO_Init+0x14>
  }
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	3724      	adds	r7, #36	; 0x24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	58000400 	.word	0x58000400

08002bbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_PWREx_ConfigSupply+0x70>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d00a      	beq.n	8002be6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_PWREx_ConfigSupply+0x70>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e01f      	b.n	8002c22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e01d      	b.n	8002c22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_PWREx_ConfigSupply+0x70>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	490f      	ldr	r1, [pc, #60]	; (8002c2c <HAL_PWREx_ConfigSupply+0x70>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bf6:	f7fe f8f9 	bl	8000dec <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bfc:	e009      	b.n	8002c12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bfe:	f7fe f8f5 	bl	8000dec <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c0c:	d901      	bls.n	8002c12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e007      	b.n	8002c22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_PWREx_ConfigSupply+0x70>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	58024800 	.word	0x58024800

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e39d      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8087 	beq.w	8002d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c50:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c5a:	4b86      	ldr	r3, [pc, #536]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d007      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46>
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	2b18      	cmp	r3, #24
 8002c6a:	d110      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5e>
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c76:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d06c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x12c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d168      	bne.n	8002d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e377      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x76>
 8002c98:	4b76      	ldr	r3, [pc, #472]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x98>
 8002cae:	4b71      	ldr	r3, [pc, #452]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a70      	ldr	r2, [pc, #448]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b6e      	ldr	r3, [pc, #440]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0xbc>
 8002cd2:	4b68      	ldr	r3, [pc, #416]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a67      	ldr	r2, [pc, #412]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a64      	ldr	r2, [pc, #400]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe f86e 	bl	8000dec <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe f86a 	bl	8000dec <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e32b      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d26:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0xe4>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe f85a 	bl	8000dec <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe f856 	bl	8000dec <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e317      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d4e:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x10c>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 808c 	beq.w	8002e84 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_RCC_OscConfig+0x162>
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b18      	cmp	r3, #24
 8002d86:	d137      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1c8>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d132      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d92:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x17a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e2e9      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002daa:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0219 	bic.w	r2, r3, #25
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	492f      	ldr	r1, [pc, #188]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dbc:	f7fe f816 	bl	8000dec <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f812 	bl	8000dec <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e2d3      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	4920      	ldr	r1, [pc, #128]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df6:	e045      	b.n	8002e84 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d026      	beq.n	8002e4e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0219 	bic.w	r2, r3, #25
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4919      	ldr	r1, [pc, #100]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fd ffeb 	bl	8000dec <HAL_GetTick>
 8002e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fd ffe7 	bl	8000dec <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e2a8      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	490b      	ldr	r1, [pc, #44]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
 8002e4c:	e01a      	b.n	8002e84 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <HAL_RCC_OscConfig+0x244>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fd ffc7 	bl	8000dec <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fd ffc3 	bl	8000dec <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d903      	bls.n	8002e78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e284      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
 8002e74:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e78:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ee      	bne.n	8002e62 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d06a      	beq.n	8002f66 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e90:	4b90      	ldr	r3, [pc, #576]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e9a:	4b8e      	ldr	r3, [pc, #568]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d007      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x286>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b18      	cmp	r3, #24
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2b4>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d116      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x29e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b80      	cmp	r3, #128	; 0x80
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e257      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ece:	4b81      	ldr	r3, [pc, #516]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	497d      	ldr	r1, [pc, #500]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee2:	e040      	b.n	8002f66 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002eec:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a78      	ldr	r2, [pc, #480]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fd ff78 	bl	8000dec <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f00:	f7fd ff74 	bl	8000dec <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e235      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f12:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	4969      	ldr	r1, [pc, #420]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60cb      	str	r3, [r1, #12]
 8002f32:	e018      	b.n	8002f66 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f34:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a66      	ldr	r2, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fd ff54 	bl	8000dec <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f48:	f7fd ff50 	bl	8000dec <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e211      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f5a:	4b5e      	ldr	r3, [pc, #376]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d019      	beq.n	8002fae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	4a55      	ldr	r2, [pc, #340]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fd ff31 	bl	8000dec <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fd ff2d 	bl	8000dec <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1ee      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x35e>
 8002fac:	e018      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fae:	4b49      	ldr	r3, [pc, #292]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	4a48      	ldr	r2, [pc, #288]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fd ff17 	bl	8000dec <HAL_GetTick>
 8002fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc2:	f7fd ff13 	bl	8000dec <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e1d4      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fd4:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d036      	beq.n	800305a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d019      	beq.n	8003028 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ff4:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a36      	ldr	r2, [pc, #216]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8002ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003000:	f7fd fef4 	bl	8000dec <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003008:	f7fd fef0 	bl	8000dec <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1b1      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800301a:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x3d8>
 8003026:	e018      	b.n	800305a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 800302e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003032:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003034:	f7fd feda 	bl	8000dec <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800303c:	f7fd fed6 	bl	8000dec <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e197      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8086 	beq.w	8003174 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4a8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_RCC_OscConfig+0x4a8>)
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003074:	f7fd feba 	bl	8000dec <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7fd feb6 	bl	8000dec <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e177      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_OscConfig+0x4a8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d106      	bne.n	80030b0 <HAL_RCC_OscConfig+0x480>
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	e032      	b.n	8003116 <HAL_RCC_OscConfig+0x4e6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4ac>
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a02      	ldr	r2, [pc, #8]	; (80030d4 <HAL_RCC_OscConfig+0x4a4>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	e021      	b.n	8003116 <HAL_RCC_OscConfig+0x4e6>
 80030d2:	bf00      	nop
 80030d4:	58024400 	.word	0x58024400
 80030d8:	58024800 	.word	0x58024800
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b05      	cmp	r3, #5
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x4ce>
 80030e4:	4b83      	ldr	r3, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	4a82      	ldr	r2, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80030ea:	f043 0304 	orr.w	r3, r3, #4
 80030ee:	6713      	str	r3, [r2, #112]	; 0x70
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a7f      	ldr	r2, [pc, #508]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6713      	str	r3, [r2, #112]	; 0x70
 80030fc:	e00b      	b.n	8003116 <HAL_RCC_OscConfig+0x4e6>
 80030fe:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a7c      	ldr	r2, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d015      	beq.n	800314a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fd fe65 	bl	8000dec <HAL_GetTick>
 8003122:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd fe61 	bl	8000dec <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e120      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800313c:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RCC_OscConfig+0x4f6>
 8003148:	e014      	b.n	8003174 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fd fe4f 	bl	8000dec <HAL_GetTick>
 800314e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fd fe4b 	bl	8000dec <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e10a      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003168:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ee      	bne.n	8003152 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80ff 	beq.w	800337c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003186:	2b18      	cmp	r3, #24
 8003188:	f000 80ba 	beq.w	8003300 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	2b02      	cmp	r3, #2
 8003192:	f040 8095 	bne.w	80032c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a56      	ldr	r2, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800319c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fd fe23 	bl	8000dec <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fd fe1f 	bl	8000dec <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0e0      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031bc:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80031ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031cc:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <HAL_RCC_OscConfig+0x6c8>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	430a      	orrs	r2, r1
 80031dc:	4945      	ldr	r1, [pc, #276]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	628b      	str	r3, [r1, #40]	; 0x28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	3b01      	subs	r3, #1
 80031e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	3b01      	subs	r3, #1
 80031f2:	025b      	lsls	r3, r3, #9
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	3b01      	subs	r3, #1
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003212:	4938      	ldr	r1, [pc, #224]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	4a35      	ldr	r2, [pc, #212]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003224:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x6cc>)
 800322a:	4013      	ands	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003230:	00d2      	lsls	r2, r2, #3
 8003232:	4930      	ldr	r1, [pc, #192]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003234:	4313      	orrs	r3, r2
 8003236:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f023 020c 	bic.w	r2, r3, #12
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	492b      	ldr	r1, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f023 0202 	bic.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4927      	ldr	r1, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003274:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800327a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fda8 	bl	8000dec <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd fda4 	bl	8000dec <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e065      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x670>
 80032be:	e05d      	b.n	800337c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0b      	ldr	r2, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80032c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd fd8e 	bl	8000dec <HAL_GetTick>
 80032d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fd fd8a 	bl	8000dec <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04b      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032e6:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_OscConfig+0x6c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x6a4>
 80032f2:	e043      	b.n	800337c <HAL_RCC_OscConfig+0x74c>
 80032f4:	58024400 	.word	0x58024400
 80032f8:	fffffc0c 	.word	0xfffffc0c
 80032fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RCC_OscConfig+0x758>)
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_OscConfig+0x758>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2b01      	cmp	r3, #1
 8003312:	d031      	beq.n	8003378 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f003 0203 	and.w	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d12a      	bne.n	8003378 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d122      	bne.n	8003378 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11a      	bne.n	8003378 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0a5b      	lsrs	r3, r3, #9
 8003346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d111      	bne.n	8003378 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d108      	bne.n	8003378 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0e1b      	lsrs	r3, r3, #24
 800336a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3730      	adds	r7, #48	; 0x30
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	58024400 	.word	0x58024400

0800338c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e19c      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b8a      	ldr	r3, [pc, #552]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b87      	ldr	r3, [pc, #540]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 020f 	bic.w	r2, r3, #15
 80033b6:	4985      	ldr	r1, [pc, #532]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b83      	ldr	r3, [pc, #524]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e184      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d908      	bls.n	80033fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033ec:	4b78      	ldr	r3, [pc, #480]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	4975      	ldr	r1, [pc, #468]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003416:	429a      	cmp	r2, r3
 8003418:	d908      	bls.n	800342c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800341a:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	496a      	ldr	r1, [pc, #424]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003428:	4313      	orrs	r3, r2
 800342a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	4b64      	ldr	r3, [pc, #400]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003444:	429a      	cmp	r2, r3
 8003446:	d908      	bls.n	800345a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	495e      	ldr	r1, [pc, #376]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003456:	4313      	orrs	r3, r2
 8003458:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	4b59      	ldr	r3, [pc, #356]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003472:	429a      	cmp	r2, r3
 8003474:	d908      	bls.n	8003488 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003476:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4953      	ldr	r1, [pc, #332]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003484:	4313      	orrs	r3, r2
 8003486:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4b4d      	ldr	r3, [pc, #308]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d908      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b4a      	ldr	r3, [pc, #296]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f023 020f 	bic.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4947      	ldr	r1, [pc, #284]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d055      	beq.n	800356e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4940      	ldr	r1, [pc, #256]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d107      	bne.n	80034ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034dc:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d121      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0f6      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d115      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0ea      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0de      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351c:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d6      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4925      	ldr	r1, [pc, #148]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800353a:	4313      	orrs	r3, r2
 800353c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fd fc55 	bl	8000dec <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003544:	e00a      	b.n	800355c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003546:	f7fd fc51 	bl	8000dec <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0be      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	429a      	cmp	r2, r3
 800356c:	d1eb      	bne.n	8003546 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	429a      	cmp	r2, r3
 8003588:	d208      	bcs.n	800359c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f023 020f 	bic.w	r2, r3, #15
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	490e      	ldr	r1, [pc, #56]	; (80035d0 <HAL_RCC_ClockConfig+0x244>)
 8003598:	4313      	orrs	r3, r2
 800359a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d214      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 020f 	bic.w	r2, r3, #15
 80035b2:	4906      	ldr	r1, [pc, #24]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <HAL_RCC_ClockConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e086      	b.n	80036da <HAL_RCC_ClockConfig+0x34e>
 80035cc:	52002000 	.word	0x52002000
 80035d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d208      	bcs.n	8003602 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4939      	ldr	r1, [pc, #228]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d010      	beq.n	8003630 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800361a:	429a      	cmp	r2, r3
 800361c:	d208      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	492e      	ldr	r1, [pc, #184]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800362c:	4313      	orrs	r3, r2
 800362e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699a      	ldr	r2, [r3, #24]
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003648:	429a      	cmp	r2, r3
 800364a:	d208      	bcs.n	800365e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4922      	ldr	r1, [pc, #136]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800365a:	4313      	orrs	r3, r2
 800365c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003676:	429a      	cmp	r2, r3
 8003678:	d208      	bcs.n	800368c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4917      	ldr	r1, [pc, #92]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003688:	4313      	orrs	r3, r2
 800368a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800368c:	f000 f834 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	4912      	ldr	r1, [pc, #72]	; (80036e8 <HAL_RCC_ClockConfig+0x35c>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
 80036a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_RCC_ClockConfig+0x358>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_RCC_ClockConfig+0x35c>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <HAL_RCC_ClockConfig+0x360>)
 80036c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x364>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x368>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fb42 	bl	8000d58 <HAL_InitTick>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	58024400 	.word	0x58024400
 80036e8:	08011b98 	.word	0x08011b98
 80036ec:	24000004 	.word	0x24000004
 80036f0:	24000000 	.word	0x24000000
 80036f4:	24000008 	.word	0x24000008

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fe:	4bb3      	ldr	r3, [pc, #716]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003706:	2b18      	cmp	r3, #24
 8003708:	f200 8155 	bhi.w	80039b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800370c:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <HAL_RCC_GetSysClockFreq+0x1c>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003779 	.word	0x08003779
 8003718:	080039b7 	.word	0x080039b7
 800371c:	080039b7 	.word	0x080039b7
 8003720:	080039b7 	.word	0x080039b7
 8003724:	080039b7 	.word	0x080039b7
 8003728:	080039b7 	.word	0x080039b7
 800372c:	080039b7 	.word	0x080039b7
 8003730:	080039b7 	.word	0x080039b7
 8003734:	0800379f 	.word	0x0800379f
 8003738:	080039b7 	.word	0x080039b7
 800373c:	080039b7 	.word	0x080039b7
 8003740:	080039b7 	.word	0x080039b7
 8003744:	080039b7 	.word	0x080039b7
 8003748:	080039b7 	.word	0x080039b7
 800374c:	080039b7 	.word	0x080039b7
 8003750:	080039b7 	.word	0x080039b7
 8003754:	080037a5 	.word	0x080037a5
 8003758:	080039b7 	.word	0x080039b7
 800375c:	080039b7 	.word	0x080039b7
 8003760:	080039b7 	.word	0x080039b7
 8003764:	080039b7 	.word	0x080039b7
 8003768:	080039b7 	.word	0x080039b7
 800376c:	080039b7 	.word	0x080039b7
 8003770:	080039b7 	.word	0x080039b7
 8003774:	080037ab 	.word	0x080037ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003778:	4b94      	ldr	r3, [pc, #592]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003784:	4b91      	ldr	r3, [pc, #580]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003796:	e111      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003798:	4b8d      	ldr	r3, [pc, #564]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800379a:	61bb      	str	r3, [r7, #24]
    break;
 800379c:	e10e      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800379e:	4b8d      	ldr	r3, [pc, #564]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a0:	61bb      	str	r3, [r7, #24]
    break;
 80037a2:	e10b      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80037a4:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037a6:	61bb      	str	r3, [r7, #24]
    break;
 80037a8:	e108      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80037b4:	4b85      	ldr	r3, [pc, #532]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037c0:	4b82      	ldr	r3, [pc, #520]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80037ca:	4b80      	ldr	r3, [pc, #512]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ce:	08db      	lsrs	r3, r3, #3
 80037d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80e1 	beq.w	80039b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f000 8083 	beq.w	80038fc <HAL_RCC_GetSysClockFreq+0x204>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f200 80a1 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x248>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x114>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d056      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800380a:	e099      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800380c:	4b6f      	ldr	r3, [pc, #444]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02d      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003818:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	4a6b      	ldr	r2, [pc, #428]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b62      	ldr	r3, [pc, #392]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a02 	vldr	s12, [r7, #8]
 8003856:	eddf 5a61 	vldr	s11, [pc, #388]	; 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003872:	e087      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80039e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b51      	ldr	r3, [pc, #324]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003896:	ed97 6a02 	vldr	s12, [r7, #8]
 800389a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038b6:	e065      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ca:	4b40      	ldr	r3, [pc, #256]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038da:	ed97 6a02 	vldr	s12, [r7, #8]
 80038de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80038e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038fa:	e043      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800390a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003922:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800393e:	e021      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800394e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003962:	ed97 6a02 	vldr	s12, [r7, #8]
 8003966:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80039dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800396a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003982:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	0a5b      	lsrs	r3, r3, #9
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	3301      	adds	r3, #1
 8003990:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800399c:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a8:	ee17 3a90 	vmov	r3, s15
 80039ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80039ae:	e005      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61bb      	str	r3, [r7, #24]
    break;
 80039b4:	e002      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039b8:	61bb      	str	r3, [r7, #24]
    break;
 80039ba:	bf00      	nop
  }

  return sysclockfreq;
 80039bc:	69bb      	ldr	r3, [r7, #24]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
 80039d0:	03d09000 	.word	0x03d09000
 80039d4:	003d0900 	.word	0x003d0900
 80039d8:	007a1200 	.word	0x007a1200
 80039dc:	46000000 	.word	0x46000000
 80039e0:	4c742400 	.word	0x4c742400
 80039e4:	4a742400 	.word	0x4a742400
 80039e8:	4af42400 	.word	0x4af42400

080039ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039f2:	f7ff fe81 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_GetHCLKFreq+0x50>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	490f      	ldr	r1, [pc, #60]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a2a:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	08011b98 	.word	0x08011b98
 8003a44:	24000004 	.word	0x24000004
 8003a48:	24000000 	.word	0x24000000

08003a4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003a52:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003a54:	22c0      	movs	r2, #192	; 0xc0
 8003a56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003a58:	4b8b      	ldr	r3, [pc, #556]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003a5a:	22a8      	movs	r2, #168	; 0xa8
 8003a5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003a5e:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8003a64:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003a66:	220a      	movs	r2, #10
 8003a68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003a6a:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003a6c:	22ff      	movs	r2, #255	; 0xff
 8003a6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003a70:	4b86      	ldr	r3, [pc, #536]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003a72:	22ff      	movs	r2, #255	; 0xff
 8003a74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003a76:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003a7c:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003a82:	4b83      	ldr	r3, [pc, #524]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003a88:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003a8e:	4b80      	ldr	r3, [pc, #512]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003a9a:	f000 fde1 	bl	8004660 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003a9e:	4b7a      	ldr	r3, [pc, #488]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	061a      	lsls	r2, r3, #24
 8003aa4:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003aae:	789b      	ldrb	r3, [r3, #2]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	4a74      	ldr	r2, [pc, #464]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003ab6:	78d2      	ldrb	r2, [r2, #3]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	061a      	lsls	r2, r3, #24
 8003abc:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	0619      	lsls	r1, r3, #24
 8003ac2:	4b71      	ldr	r3, [pc, #452]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003ac4:	785b      	ldrb	r3, [r3, #1]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	4319      	orrs	r1, r3
 8003aca:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003acc:	789b      	ldrb	r3, [r3, #2]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	496d      	ldr	r1, [pc, #436]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003ad4:	78c9      	ldrb	r1, [r1, #3]
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	4b69      	ldr	r3, [pc, #420]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	0619      	lsls	r1, r3, #24
 8003ae6:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	4319      	orrs	r1, r3
 8003aee:	4b66      	ldr	r3, [pc, #408]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003af0:	789b      	ldrb	r3, [r3, #2]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	430b      	orrs	r3, r1
 8003af6:	4964      	ldr	r1, [pc, #400]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003af8:	78c9      	ldrb	r1, [r1, #3]
 8003afa:	430b      	orrs	r3, r1
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b02:	431a      	orrs	r2, r3
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	0619      	lsls	r1, r3, #24
 8003b0a:	4b5f      	ldr	r3, [pc, #380]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	4319      	orrs	r1, r3
 8003b12:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003b14:	789b      	ldrb	r3, [r3, #2]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	495b      	ldr	r1, [pc, #364]	; (8003c88 <MX_LWIP_Init+0x23c>)
 8003b1c:	78c9      	ldrb	r1, [r1, #3]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	0e1b      	lsrs	r3, r3, #24
 8003b22:	4313      	orrs	r3, r2
 8003b24:	4a5b      	ldr	r2, [pc, #364]	; (8003c94 <MX_LWIP_Init+0x248>)
 8003b26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b28:	4b58      	ldr	r3, [pc, #352]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	061a      	lsls	r2, r3, #24
 8003b2e:	4b57      	ldr	r3, [pc, #348]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b30:	785b      	ldrb	r3, [r3, #1]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	4b55      	ldr	r3, [pc, #340]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	4a53      	ldr	r2, [pc, #332]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b40:	78d2      	ldrb	r2, [r2, #3]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	061a      	lsls	r2, r3, #24
 8003b46:	4b51      	ldr	r3, [pc, #324]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	0619      	lsls	r1, r3, #24
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	4319      	orrs	r1, r3
 8003b54:	4b4d      	ldr	r3, [pc, #308]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b56:	789b      	ldrb	r3, [r3, #2]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	494b      	ldr	r1, [pc, #300]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b5e:	78c9      	ldrb	r1, [r1, #3]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	0619      	lsls	r1, r3, #24
 8003b70:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	4319      	orrs	r1, r3
 8003b78:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b7a:	789b      	ldrb	r3, [r3, #2]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	4942      	ldr	r1, [pc, #264]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b82:	78c9      	ldrb	r1, [r1, #3]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	0619      	lsls	r1, r3, #24
 8003b94:	4b3d      	ldr	r3, [pc, #244]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	041b      	lsls	r3, r3, #16
 8003b9a:	4319      	orrs	r1, r3
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003b9e:	789b      	ldrb	r3, [r3, #2]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	4939      	ldr	r1, [pc, #228]	; (8003c8c <MX_LWIP_Init+0x240>)
 8003ba6:	78c9      	ldrb	r1, [r1, #3]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	0e1b      	lsrs	r3, r3, #24
 8003bac:	4313      	orrs	r3, r2
 8003bae:	4a3a      	ldr	r2, [pc, #232]	; (8003c98 <MX_LWIP_Init+0x24c>)
 8003bb0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	061a      	lsls	r2, r3, #24
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bc2:	789b      	ldrb	r3, [r3, #2]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	4a31      	ldr	r2, [pc, #196]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bca:	78d2      	ldrb	r2, [r2, #3]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	061a      	lsls	r2, r3, #24
 8003bd0:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	0619      	lsls	r1, r3, #24
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	4319      	orrs	r1, r3
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003be0:	789b      	ldrb	r3, [r3, #2]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	430b      	orrs	r3, r1
 8003be6:	492a      	ldr	r1, [pc, #168]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003be8:	78c9      	ldrb	r1, [r1, #3]
 8003bea:	430b      	orrs	r3, r1
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	0619      	lsls	r1, r3, #24
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	4319      	orrs	r1, r3
 8003c02:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003c04:	789b      	ldrb	r3, [r3, #2]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	4921      	ldr	r1, [pc, #132]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003c0c:	78c9      	ldrb	r1, [r1, #3]
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c16:	431a      	orrs	r2, r3
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	0619      	lsls	r1, r3, #24
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	4319      	orrs	r1, r3
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003c28:	789b      	ldrb	r3, [r3, #2]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	4918      	ldr	r1, [pc, #96]	; (8003c90 <MX_LWIP_Init+0x244>)
 8003c30:	78c9      	ldrb	r1, [r1, #3]
 8003c32:	430b      	orrs	r3, r1
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	4313      	orrs	r3, r2
 8003c38:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <MX_LWIP_Init+0x250>)
 8003c3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003c3c:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <MX_LWIP_Init+0x254>)
 8003c3e:	9302      	str	r3, [sp, #8]
 8003c40:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <MX_LWIP_Init+0x258>)
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	2300      	movs	r3, #0
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <MX_LWIP_Init+0x250>)
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <MX_LWIP_Init+0x24c>)
 8003c4c:	4911      	ldr	r1, [pc, #68]	; (8003c94 <MX_LWIP_Init+0x248>)
 8003c4e:	4816      	ldr	r0, [pc, #88]	; (8003ca8 <MX_LWIP_Init+0x25c>)
 8003c50:	f001 f9ee 	bl	8005030 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003c54:	4814      	ldr	r0, [pc, #80]	; (8003ca8 <MX_LWIP_Init+0x25c>)
 8003c56:	f001 fb9d 	bl	8005394 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <MX_LWIP_Init+0x25c>)
 8003c5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003c6c:	480e      	ldr	r0, [pc, #56]	; (8003ca8 <MX_LWIP_Init+0x25c>)
 8003c6e:	f001 fba1 	bl	80053b4 <netif_set_up>
 8003c72:	e002      	b.n	8003c7a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003c74:	480c      	ldr	r0, [pc, #48]	; (8003ca8 <MX_LWIP_Init+0x25c>)
 8003c76:	f001 fc09 	bl	800548c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003c7a:	490c      	ldr	r1, [pc, #48]	; (8003cac <MX_LWIP_Init+0x260>)
 8003c7c:	480a      	ldr	r0, [pc, #40]	; (8003ca8 <MX_LWIP_Init+0x25c>)
 8003c7e:	f001 fc9b 	bl	80055b8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	240000fc 	.word	0x240000fc
 8003c8c:	24000100 	.word	0x24000100
 8003c90:	24000104 	.word	0x24000104
 8003c94:	240000f0 	.word	0x240000f0
 8003c98:	240000f4 	.word	0x240000f4
 8003c9c:	240000f8 	.word	0x240000f8
 8003ca0:	0800dec1 	.word	0x0800dec1
 8003ca4:	08003fa9 	.word	0x08003fa9
 8003ca8:	240000bc 	.word	0x240000bc
 8003cac:	08003d01 	.word	0x08003d01

08003cb0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003cb8:	f7fd f898 	bl	8000dec <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <Ethernet_Link_Periodic_Handle+0x30>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b63      	cmp	r3, #99	; 0x63
 8003cc6:	d907      	bls.n	8003cd8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003cc8:	f7fd f890 	bl	8000dec <HAL_GetTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <Ethernet_Link_Periodic_Handle+0x30>)
 8003cd0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fab6 	bl	8004244 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	240000b8 	.word	0x240000b8

08003ce4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003ce8:	4804      	ldr	r0, [pc, #16]	; (8003cfc <MX_LWIP_Process+0x18>)
 8003cea:	f000 f93d 	bl	8003f68 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003cee:	f007 fcd5 	bl	800b69c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003cf2:	4802      	ldr	r0, [pc, #8]	; (8003cfc <MX_LWIP_Process+0x18>)
 8003cf4:	f7ff ffdc 	bl	8003cb0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	240000bc 	.word	0x240000bc

08003d00 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003d20:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <low_level_init+0x10c>)
 8003d22:	4a40      	ldr	r2, [pc, #256]	; (8003e24 <low_level_init+0x110>)
 8003d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003d26:	2300      	movs	r3, #0
 8003d28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003d2e:	23e1      	movs	r3, #225	; 0xe1
 8003d30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003d32:	2300      	movs	r3, #0
 8003d34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003d3e:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <low_level_init+0x10c>)
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003d46:	4b36      	ldr	r3, [pc, #216]	; (8003e20 <low_level_init+0x10c>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <low_level_init+0x10c>)
 8003d4e:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <low_level_init+0x114>)
 8003d50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <low_level_init+0x10c>)
 8003d54:	4a35      	ldr	r2, [pc, #212]	; (8003e2c <low_level_init+0x118>)
 8003d56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003d58:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <low_level_init+0x10c>)
 8003d5a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003d5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003d60:	482f      	ldr	r0, [pc, #188]	; (8003e20 <low_level_init+0x10c>)
 8003d62:	f7fd f9c3 	bl	80010ec <HAL_ETH_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003d6a:	2238      	movs	r2, #56	; 0x38
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4830      	ldr	r0, [pc, #192]	; (8003e30 <low_level_init+0x11c>)
 8003d70:	f00a f9be 	bl	800e0f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003d74:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <low_level_init+0x11c>)
 8003d76:	2221      	movs	r2, #33	; 0x21
 8003d78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <low_level_init+0x11c>)
 8003d7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003d82:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <low_level_init+0x11c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003d88:	482a      	ldr	r0, [pc, #168]	; (8003e34 <low_level_init+0x120>)
 8003d8a:	f001 f819 	bl	8004dc0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2206      	movs	r2, #6
 8003d92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <low_level_init+0x10c>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <low_level_init+0x10c>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	785a      	ldrb	r2, [r3, #1]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <low_level_init+0x10c>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	789a      	ldrb	r2, [r3, #2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <low_level_init+0x10c>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	78da      	ldrb	r2, [r3, #3]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <low_level_init+0x10c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	791a      	ldrb	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <low_level_init+0x10c>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	795a      	ldrb	r2, [r3, #5]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003de4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dec:	f043 030a 	orr.w	r3, r3, #10
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003df8:	490f      	ldr	r1, [pc, #60]	; (8003e38 <low_level_init+0x124>)
 8003dfa:	4810      	ldr	r0, [pc, #64]	; (8003e3c <low_level_init+0x128>)
 8003dfc:	f7fc fe0f 	bl	8000a1e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003e00:	480e      	ldr	r0, [pc, #56]	; (8003e3c <low_level_init+0x128>)
 8003e02:	f7fc fe3e 	bl	8000a82 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa19 	bl	8004244 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003e12:	e001      	b.n	8003e18 <low_level_init+0x104>
    Error_Handler();
 8003e14:	f7fc fc4e 	bl	80006b4 <Error_Handler>
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	24000114 	.word	0x24000114
 8003e24:	40028000 	.word	0x40028000
 8003e28:	30000200 	.word	0x30000200
 8003e2c:	30000000 	.word	0x30000000
 8003e30:	240001c4 	.word	0x240001c4
 8003e34:	08011ba8 	.word	0x08011ba8
 8003e38:	24000010 	.word	0x24000010
 8003e3c:	240001fc 	.word	0x240001fc

08003e40 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b092      	sub	sp, #72	; 0x48
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	2230      	movs	r2, #48	; 0x30
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f00a f945 	bl	800e0f0 <memset>

  for(q = p; q != NULL; q = q->next)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	643b      	str	r3, [r7, #64]	; 0x40
 8003e6a:	e045      	b.n	8003ef8 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d902      	bls.n	8003e78 <low_level_output+0x38>
      return ERR_IF;
 8003e72:	f06f 030b 	mvn.w	r3, #11
 8003e76:	e055      	b.n	8003f24 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3348      	adds	r3, #72	; 0x48
 8003e88:	443b      	add	r3, r7
 8003e8a:	3b3c      	subs	r3, #60	; 0x3c
 8003e8c:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e90:	895b      	ldrh	r3, [r3, #10]
 8003e92:	4619      	mov	r1, r3
 8003e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3348      	adds	r3, #72	; 0x48
 8003ea0:	443b      	add	r3, r7
 8003ea2:	3b38      	subs	r3, #56	; 0x38
 8003ea4:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d011      	beq.n	8003ed0 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eae:	1e5a      	subs	r2, r3, #1
 8003eb0:	f107 000c 	add.w	r0, r7, #12
 8003eb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	440b      	add	r3, r1
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	18c1      	adds	r1, r0, r3
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3348      	adds	r3, #72	; 0x48
 8003eca:	443b      	add	r3, r7
 8003ecc:	3b34      	subs	r3, #52	; 0x34
 8003ece:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	3348      	adds	r3, #72	; 0x48
 8003ee4:	443b      	add	r3, r7
 8003ee6:	3b34      	subs	r3, #52	; 0x34
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eee:	3301      	adds	r3, #1
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1b6      	bne.n	8003e6c <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	891b      	ldrh	r3, [r3, #8]
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <low_level_output+0xec>)
 8003f06:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003f08:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <low_level_output+0xec>)
 8003f0a:	f107 030c 	add.w	r3, r7, #12
 8003f0e:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003f10:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <low_level_output+0xec>)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003f16:	2214      	movs	r2, #20
 8003f18:	4904      	ldr	r1, [pc, #16]	; (8003f2c <low_level_output+0xec>)
 8003f1a:	4805      	ldr	r0, [pc, #20]	; (8003f30 <low_level_output+0xf0>)
 8003f1c:	f7fd fa7e 	bl	800141c <HAL_ETH_Transmit>

  return errval;
 8003f20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3748      	adds	r7, #72	; 0x48
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	240001c4 	.word	0x240001c4
 8003f30:	24000114 	.word	0x24000114

08003f34 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <low_level_input+0x2c>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4805      	ldr	r0, [pc, #20]	; (8003f64 <low_level_input+0x30>)
 8003f50:	f7fd fafb 	bl	800154a <HAL_ETH_ReadData>
  }

  return p;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2400010c 	.word	0x2400010c
 8003f64:	24000114 	.word	0x24000114

08003f68 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ffdd 	bl	8003f34 <low_level_input>
 8003f7a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	4798      	blx	r3
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f001 fe90 	bl	8005cb8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ea      	bne.n	8003f74 <ethernetif_input+0xc>
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <ethernetif_init+0x1c>
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <ethernetif_init+0x48>)
 8003fb8:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8003fbc:	490d      	ldr	r1, [pc, #52]	; (8003ff4 <ethernetif_init+0x4c>)
 8003fbe:	480e      	ldr	r0, [pc, #56]	; (8003ff8 <ethernetif_init+0x50>)
 8003fc0:	f00a f89e 	bl	800e100 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2273      	movs	r2, #115	; 0x73
 8003fc8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2274      	movs	r2, #116	; 0x74
 8003fd0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <ethernetif_init+0x54>)
 8003fd8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a08      	ldr	r2, [pc, #32]	; (8004000 <ethernetif_init+0x58>)
 8003fde:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff fe97 	bl	8003d14 <low_level_init>

  return ERR_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	0800f1b8 	.word	0x0800f1b8
 8003ff4:	0800f1d4 	.word	0x0800f1d4
 8003ff8:	0800f1e4 	.word	0x0800f1e4
 8003ffc:	0800c32d 	.word	0x0800c32d
 8004000:	08003e41 	.word	0x08003e41

08004004 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	4808      	ldr	r0, [pc, #32]	; (8004034 <pbuf_free_custom+0x30>)
 8004014:	f000 ffb6 	bl	8004f84 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <pbuf_free_custom+0x34>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d105      	bne.n	800402c <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <pbuf_free_custom+0x34>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <pbuf_free_custom+0x38>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
  }
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	08011ba8 	.word	0x08011ba8
 8004038:	2400010c 	.word	0x2400010c
 800403c:	24000110 	.word	0x24000110

08004040 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004044:	f7fc fed2 	bl	8000dec <HAL_GetTick>
 8004048:	4603      	mov	r3, r0
}
 800404a:	4618      	mov	r0, r3
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a49      	ldr	r2, [pc, #292]	; (8004194 <HAL_ETH_MspInit+0x144>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f040 808b 	bne.w	800418a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004074:	4b48      	ldr	r3, [pc, #288]	; (8004198 <HAL_ETH_MspInit+0x148>)
 8004076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800407a:	4a47      	ldr	r2, [pc, #284]	; (8004198 <HAL_ETH_MspInit+0x148>)
 800407c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004080:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004084:	4b44      	ldr	r3, [pc, #272]	; (8004198 <HAL_ETH_MspInit+0x148>)
 8004086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800408a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004092:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_ETH_MspInit+0x148>)
 8004094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004098:	4a3f      	ldr	r2, [pc, #252]	; (8004198 <HAL_ETH_MspInit+0x148>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040b6:	4a38      	ldr	r2, [pc, #224]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040c0:	4b35      	ldr	r3, [pc, #212]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ce:	4b32      	ldr	r3, [pc, #200]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d4:	4a30      	ldr	r2, [pc, #192]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040de:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f2:	4a29      	ldr	r2, [pc, #164]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040fc:	4b26      	ldr	r3, [pc, #152]	; (8004198 <HAL_ETH_MspInit+0x148>)
 80040fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410a:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_ETH_MspInit+0x148>)
 800410c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_ETH_MspInit+0x148>)
 8004112:	f043 0302 	orr.w	r3, r3, #2
 8004116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <HAL_ETH_MspInit+0x148>)
 800411c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004128:	2332      	movs	r3, #50	; 0x32
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2300      	movs	r3, #0
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004138:	230b      	movs	r3, #11
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004140:	4619      	mov	r1, r3
 8004142:	4816      	ldr	r0, [pc, #88]	; (800419c <HAL_ETH_MspInit+0x14c>)
 8004144:	f7fe fb92 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004148:	2386      	movs	r3, #134	; 0x86
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414c:	2302      	movs	r3, #2
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004154:	2300      	movs	r3, #0
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004158:	230b      	movs	r3, #11
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004160:	4619      	mov	r1, r3
 8004162:	480f      	ldr	r0, [pc, #60]	; (80041a0 <HAL_ETH_MspInit+0x150>)
 8004164:	f7fe fb82 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004168:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	2302      	movs	r3, #2
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800417a:	230b      	movs	r3, #11
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004182:	4619      	mov	r1, r3
 8004184:	4807      	ldr	r0, [pc, #28]	; (80041a4 <HAL_ETH_MspInit+0x154>)
 8004186:	f7fe fb71 	bl	800286c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800418a:	bf00      	nop
 800418c:	3738      	adds	r7, #56	; 0x38
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40028000 	.word	0x40028000
 8004198:	58024400 	.word	0x58024400
 800419c:	58020800 	.word	0x58020800
 80041a0:	58020000 	.word	0x58020000
 80041a4:	58020400 	.word	0x58020400

080041a8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80041ac:	4802      	ldr	r0, [pc, #8]	; (80041b8 <ETH_PHY_IO_Init+0x10>)
 80041ae:	f7fd fd91 	bl	8001cd4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	24000114 	.word	0x24000114

080041bc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return 0;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	68f9      	ldr	r1, [r7, #12]
 80041de:	4807      	ldr	r0, [pc, #28]	; (80041fc <ETH_PHY_IO_ReadReg+0x30>)
 80041e0:	f7fd fae1 	bl	80017a6 <HAL_ETH_ReadPHYRegister>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	e000      	b.n	80041f2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	24000114 	.word	0x24000114

08004200 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	4807      	ldr	r0, [pc, #28]	; (8004230 <ETH_PHY_IO_WriteReg+0x30>)
 8004214:	f7fd fb1c 	bl	8001850 <HAL_ETH_WritePHYRegister>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e000      	b.n	8004226 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	24000114 	.word	0x24000114

08004234 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004238:	f7fc fdd8 	bl	8000dec <HAL_GetTick>
 800423c:	4603      	mov	r3, r0
}
 800423e:	4618      	mov	r0, r3
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b0a0      	sub	sp, #128	; 0x80
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	2264      	movs	r2, #100	; 0x64
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f009 ff4b 	bl	800e0f0 <memset>
  int32_t PHYLinkState = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004262:	2300      	movs	r3, #0
 8004264:	67bb      	str	r3, [r7, #120]	; 0x78
 8004266:	2300      	movs	r3, #0
 8004268:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800426a:	483a      	ldr	r0, [pc, #232]	; (8004354 <ethernet_link_check_state+0x110>)
 800426c:	f7fc fcb1 	bl	8000bd2 <LAN8742_GetLinkState>
 8004270:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00c      	beq.n	800429e <ethernet_link_check_state+0x5a>
 8004284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004286:	2b01      	cmp	r3, #1
 8004288:	dc09      	bgt.n	800429e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800428a:	4833      	ldr	r0, [pc, #204]	; (8004358 <ethernet_link_check_state+0x114>)
 800428c:	f7fd f876 	bl	800137c <HAL_ETH_Stop>
    netif_set_down(netif);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 f8fb 	bl	800548c <netif_set_down>
    netif_set_link_down(netif);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f001 f95e 	bl	8005558 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800429c:	e055      	b.n	800434a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d14e      	bne.n	800434a <ethernet_link_check_state+0x106>
 80042ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	dd4b      	ble.n	800434a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80042b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b4:	3b02      	subs	r3, #2
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d82a      	bhi.n	8004310 <ethernet_link_check_state+0xcc>
 80042ba:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <ethernet_link_check_state+0x7c>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042e3 	.word	0x080042e3
 80042c8:	080042f3 	.word	0x080042f3
 80042cc:	08004303 	.word	0x08004303
      duplex = ETH_FULLDUPLEX_MODE;
 80042d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80042d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042dc:	2301      	movs	r3, #1
 80042de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80042e0:	e017      	b.n	8004312 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80042e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80042f0:	e00f      	b.n	8004312 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80042f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80042f8:	2300      	movs	r3, #0
 80042fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042fc:	2301      	movs	r3, #1
 80042fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004300:	e007      	b.n	8004312 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004302:	2300      	movs	r3, #0
 8004304:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004306:	2300      	movs	r3, #0
 8004308:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800430e:	e000      	b.n	8004312 <ethernet_link_check_state+0xce>
      break;
 8004310:	bf00      	nop
    if(linkchanged)
 8004312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d018      	beq.n	800434a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	4619      	mov	r1, r3
 800431e:	480e      	ldr	r0, [pc, #56]	; (8004358 <ethernet_link_check_state+0x114>)
 8004320:	f7fd faea 	bl	80018f8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	4619      	mov	r1, r3
 8004332:	4809      	ldr	r0, [pc, #36]	; (8004358 <ethernet_link_check_state+0x114>)
 8004334:	f7fd fcb4 	bl	8001ca0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004338:	4807      	ldr	r0, [pc, #28]	; (8004358 <ethernet_link_check_state+0x114>)
 800433a:	f7fc ffbd 	bl	80012b8 <HAL_ETH_Start>
      netif_set_up(netif);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f001 f838 	bl	80053b4 <netif_set_up>
      netif_set_link_up(netif);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f001 f8d3 	bl	80054f0 <netif_set_link_up>
}
 800434a:	bf00      	nop
 800434c:	3780      	adds	r7, #128	; 0x80
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	240001fc 	.word	0x240001fc
 8004358:	24000114 	.word	0x24000114

0800435c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004364:	4812      	ldr	r0, [pc, #72]	; (80043b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004366:	f000 fd9f 	bl	8004ea8 <memp_malloc_pool>
 800436a:	60f8      	str	r0, [r7, #12]
  if (p)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f103 0220 	add.w	r2, r3, #32
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004380:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800438a:	9201      	str	r2, [sp, #4]
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2241      	movs	r2, #65	; 0x41
 8004392:	2100      	movs	r1, #0
 8004394:	2000      	movs	r0, #0
 8004396:	f001 fad5 	bl	8005944 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800439a:	e005      	b.n	80043a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800439e:	2201      	movs	r2, #1
 80043a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	08011ba8 	.word	0x08011ba8
 80043b4:	08004005 	.word	0x08004005
 80043b8:	2400010c 	.word	0x2400010c

080043bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80043bc:	b480      	push	{r7}
 80043be:	b08d      	sub	sp, #52	; 0x34
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3b20      	subs	r3, #32
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2200      	movs	r2, #0
 80043e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e003      	b.n	8004406 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004404:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004412:	e009      	b.n	8004428 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	891a      	ldrh	r2, [r3, #8]
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	4413      	add	r3, r2
 800441c:	b29a      	uxth	r2, r3
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f2      	bne.n	8004414 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	623a      	str	r2, [r7, #32]
 8004434:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	dd1d      	ble.n	8004478 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	f003 021f 	and.w	r2, r3, #31
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800444c:	f3bf 8f4f 	dsb	sy
}
 8004450:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004452:	4a0d      	ldr	r2, [pc, #52]	; (8004488 <HAL_ETH_RxLinkCallback+0xcc>)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	3320      	adds	r3, #32
 800445e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	3b20      	subs	r3, #32
 8004464:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	dcf2      	bgt.n	8004452 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800446c:	f3bf 8f4f 	dsb	sy
}
 8004470:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004472:	f3bf 8f6f 	isb	sy
}
 8004476:	bf00      	nop
}
 8004478:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800447a:	bf00      	nop
 800447c:	3734      	adds	r7, #52	; 0x34
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	b21a      	sxth	r2, r3
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	b21b      	sxth	r3, r3
 80044a4:	4313      	orrs	r3, r2
 80044a6:	b21b      	sxth	r3, r3
 80044a8:	b29b      	uxth	r3, r3
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	061a      	lsls	r2, r3, #24
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	4313      	orrs	r3, r2
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <lwip_standard_chksum+0x40>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	dd0a      	ble.n	8004528 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	1c53      	adds	r3, r2, #1
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	f107 030e 	add.w	r3, r7, #14
 800451c:	3301      	adds	r3, #1
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	701a      	strb	r2, [r3, #0]
    len--;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	3b01      	subs	r3, #1
 8004526:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800452c:	e00a      	b.n	8004544 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	1c9a      	adds	r2, r3, #2
 8004532:	61ba      	str	r2, [r7, #24]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4413      	add	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	3b02      	subs	r3, #2
 8004542:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b01      	cmp	r3, #1
 8004548:	dcf1      	bgt.n	800452e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	dd04      	ble.n	800455a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004550:	f107 030e 	add.w	r3, r7, #14
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	7812      	ldrb	r2, [r2, #0]
 8004558:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800455a:	89fb      	ldrh	r3, [r7, #14]
 800455c:	461a      	mov	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	0c1a      	lsrs	r2, r3, #16
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	b29b      	uxth	r3, r3
 800456c:	4413      	add	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	0c1a      	lsrs	r2, r3, #16
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	b29b      	uxth	r3, r3
 8004578:	4413      	add	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	b29a      	uxth	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	b2db      	uxtb	r3, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	b29b      	uxth	r3, r3
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80045ae:	887b      	ldrh	r3, [r7, #2]
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff98 	bl	80044e8 <lwip_standard_chksum>
 80045b8:	4603      	mov	r3, r0
 80045ba:	43db      	mvns	r3, r3
 80045bc:	b29b      	uxth	r3, r3
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e02b      	b.n	8004634 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	895b      	ldrh	r3, [r3, #10]
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7ff ff7e 	bl	80044e8 <lwip_standard_chksum>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	0c1a      	lsrs	r2, r3, #16
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4413      	add	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	895b      	ldrh	r3, [r3, #10]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00e      	beq.n	800462e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	b29a      	uxth	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1d0      	bne.n	80045dc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	b29a      	uxth	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	b29b      	uxth	r3, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	b29b      	uxth	r3, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800466a:	f000 f8d5 	bl	8004818 <mem_init>
  memp_init();
 800466e:	f000 fbd7 	bl	8004e20 <memp_init>
  pbuf_init();
  netif_init();
 8004672:	f000 fcd5 	bl	8005020 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004676:	f007 f853 	bl	800b720 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800467a:	f001 fdab 	bl	80061d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800467e:	f006 ffc5 	bl	800b60c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <ptr_to_mem+0x20>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	4413      	add	r3, r2
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	24000234 	.word	0x24000234

080046b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <mem_to_ptr+0x20>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	b29b      	uxth	r3, r3
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	24000234 	.word	0x24000234

080046d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80046dc:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <plug_holes+0x120>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d206      	bcs.n	80046f4 <plug_holes+0x20>
 80046e6:	4b44      	ldr	r3, [pc, #272]	; (80047f8 <plug_holes+0x124>)
 80046e8:	f240 12df 	movw	r2, #479	; 0x1df
 80046ec:	4943      	ldr	r1, [pc, #268]	; (80047fc <plug_holes+0x128>)
 80046ee:	4844      	ldr	r0, [pc, #272]	; (8004800 <plug_holes+0x12c>)
 80046f0:	f009 fd06 	bl	800e100 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80046f4:	4b43      	ldr	r3, [pc, #268]	; (8004804 <plug_holes+0x130>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d306      	bcc.n	800470c <plug_holes+0x38>
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <plug_holes+0x124>)
 8004700:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004704:	4940      	ldr	r1, [pc, #256]	; (8004808 <plug_holes+0x134>)
 8004706:	483e      	ldr	r0, [pc, #248]	; (8004800 <plug_holes+0x12c>)
 8004708:	f009 fcfa 	bl	800e100 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <plug_holes+0x4e>
 8004714:	4b38      	ldr	r3, [pc, #224]	; (80047f8 <plug_holes+0x124>)
 8004716:	f240 12e1 	movw	r2, #481	; 0x1e1
 800471a:	493c      	ldr	r1, [pc, #240]	; (800480c <plug_holes+0x138>)
 800471c:	4838      	ldr	r0, [pc, #224]	; (8004800 <plug_holes+0x12c>)
 800471e:	f009 fcef 	bl	800e100 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800472a:	d906      	bls.n	800473a <plug_holes+0x66>
 800472c:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <plug_holes+0x124>)
 800472e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004732:	4937      	ldr	r1, [pc, #220]	; (8004810 <plug_holes+0x13c>)
 8004734:	4832      	ldr	r0, [pc, #200]	; (8004800 <plug_holes+0x12c>)
 8004736:	f009 fce3 	bl	800e100 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ffa4 	bl	800468c <ptr_to_mem>
 8004744:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	429a      	cmp	r2, r3
 800474c:	d024      	beq.n	8004798 <plug_holes+0xc4>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	791b      	ldrb	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d120      	bne.n	8004798 <plug_holes+0xc4>
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <plug_holes+0x130>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d01b      	beq.n	8004798 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004760:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <plug_holes+0x140>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	429a      	cmp	r2, r3
 8004768:	d102      	bne.n	8004770 <plug_holes+0x9c>
      lfree = mem;
 800476a:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <plug_holes+0x140>)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	881a      	ldrh	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004780:	d00a      	beq.n	8004798 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff80 	bl	800468c <ptr_to_mem>
 800478c:	4604      	mov	r4, r0
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ff8e 	bl	80046b0 <mem_to_ptr>
 8004794:	4603      	mov	r3, r0
 8004796:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	885b      	ldrh	r3, [r3, #2]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff75 	bl	800468c <ptr_to_mem>
 80047a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d01f      	beq.n	80047ec <plug_holes+0x118>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	791b      	ldrb	r3, [r3, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11b      	bne.n	80047ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <plug_holes+0x140>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d102      	bne.n	80047c4 <plug_holes+0xf0>
      lfree = pmem;
 80047be:	4a15      	ldr	r2, [pc, #84]	; (8004814 <plug_holes+0x140>)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80047d4:	d00a      	beq.n	80047ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ff56 	bl	800468c <ptr_to_mem>
 80047e0:	4604      	mov	r4, r0
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f7ff ff64 	bl	80046b0 <mem_to_ptr>
 80047e8:	4603      	mov	r3, r0
 80047ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd90      	pop	{r4, r7, pc}
 80047f4:	24000234 	.word	0x24000234
 80047f8:	0800f20c 	.word	0x0800f20c
 80047fc:	0800f23c 	.word	0x0800f23c
 8004800:	0800f254 	.word	0x0800f254
 8004804:	24000238 	.word	0x24000238
 8004808:	0800f27c 	.word	0x0800f27c
 800480c:	0800f298 	.word	0x0800f298
 8004810:	0800f2b4 	.word	0x0800f2b4
 8004814:	2400023c 	.word	0x2400023c

08004818 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800481e:	4b16      	ldr	r3, [pc, #88]	; (8004878 <mem_init+0x60>)
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <mem_init+0x64>)
 8004822:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <mem_init+0x60>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004830:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800483e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004842:	f7ff ff23 	bl	800468c <ptr_to_mem>
 8004846:	4603      	mov	r3, r0
 8004848:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <mem_init+0x68>)
 800484a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <mem_init+0x68>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2201      	movs	r2, #1
 8004852:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <mem_init+0x68>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800485c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <mem_init+0x68>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004866:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <mem_init+0x60>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a05      	ldr	r2, [pc, #20]	; (8004884 <mem_init+0x6c>)
 800486e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	24000234 	.word	0x24000234
 800487c:	30004000 	.word	0x30004000
 8004880:	24000238 	.word	0x24000238
 8004884:	2400023c 	.word	0x2400023c

08004888 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff0d 	bl	80046b0 <mem_to_ptr>
 8004896:	4603      	mov	r3, r0
 8004898:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fef4 	bl	800468c <ptr_to_mem>
 80048a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	885b      	ldrh	r3, [r3, #2]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff feee 	bl	800468c <ptr_to_mem>
 80048b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048ba:	d818      	bhi.n	80048ee <mem_link_valid+0x66>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	885b      	ldrh	r3, [r3, #2]
 80048c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048c4:	d813      	bhi.n	80048ee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80048ca:	8afa      	ldrh	r2, [r7, #22]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d004      	beq.n	80048da <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	8afa      	ldrh	r2, [r7, #22]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d109      	bne.n	80048ee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <mem_link_valid+0x74>)
 80048dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d006      	beq.n	80048f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	885b      	ldrh	r3, [r3, #2]
 80048e8:	8afa      	ldrh	r2, [r7, #22]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d001      	beq.n	80048f2 <mem_link_valid+0x6a>
    return 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <mem_link_valid+0x6c>
  }
  return 1;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	24000238 	.word	0x24000238

08004900 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04c      	beq.n	80049a8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d007      	beq.n	8004928 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <mem_free+0xb0>)
 800491a:	f240 2273 	movw	r2, #627	; 0x273
 800491e:	4925      	ldr	r1, [pc, #148]	; (80049b4 <mem_free+0xb4>)
 8004920:	4825      	ldr	r0, [pc, #148]	; (80049b8 <mem_free+0xb8>)
 8004922:	f009 fbed 	bl	800e100 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004926:	e040      	b.n	80049aa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b08      	subs	r3, #8
 800492c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <mem_free+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d306      	bcc.n	8004946 <mem_free+0x46>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f103 020c 	add.w	r2, r3, #12
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <mem_free+0xc0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d907      	bls.n	8004956 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004946:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <mem_free+0xb0>)
 8004948:	f240 227f 	movw	r2, #639	; 0x27f
 800494c:	491d      	ldr	r1, [pc, #116]	; (80049c4 <mem_free+0xc4>)
 800494e:	481a      	ldr	r0, [pc, #104]	; (80049b8 <mem_free+0xb8>)
 8004950:	f009 fbd6 	bl	800e100 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004954:	e029      	b.n	80049aa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	791b      	ldrb	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d107      	bne.n	800496e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800495e:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <mem_free+0xb0>)
 8004960:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004964:	4918      	ldr	r1, [pc, #96]	; (80049c8 <mem_free+0xc8>)
 8004966:	4814      	ldr	r0, [pc, #80]	; (80049b8 <mem_free+0xb8>)
 8004968:	f009 fbca 	bl	800e100 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800496c:	e01d      	b.n	80049aa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff8a 	bl	8004888 <mem_link_valid>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <mem_free+0xb0>)
 800497c:	f240 2295 	movw	r2, #661	; 0x295
 8004980:	4912      	ldr	r1, [pc, #72]	; (80049cc <mem_free+0xcc>)
 8004982:	480d      	ldr	r0, [pc, #52]	; (80049b8 <mem_free+0xb8>)
 8004984:	f009 fbbc 	bl	800e100 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004988:	e00f      	b.n	80049aa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <mem_free+0xd0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	429a      	cmp	r2, r3
 8004998:	d202      	bcs.n	80049a0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <mem_free+0xd0>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff fe97 	bl	80046d4 <plug_holes>
 80049a6:	e000      	b.n	80049aa <mem_free+0xaa>
    return;
 80049a8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	0800f20c 	.word	0x0800f20c
 80049b4:	0800f2e0 	.word	0x0800f2e0
 80049b8:	0800f254 	.word	0x0800f254
 80049bc:	24000234 	.word	0x24000234
 80049c0:	24000238 	.word	0x24000238
 80049c4:	0800f304 	.word	0x0800f304
 80049c8:	0800f320 	.word	0x0800f320
 80049cc:	0800f348 	.word	0x0800f348
 80049d0:	2400023c 	.word	0x2400023c

080049d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	3303      	adds	r3, #3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80049ec:	8bfb      	ldrh	r3, [r7, #30]
 80049ee:	2b0b      	cmp	r3, #11
 80049f0:	d801      	bhi.n	80049f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80049f2:	230c      	movs	r3, #12
 80049f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80049f6:	8bfb      	ldrh	r3, [r7, #30]
 80049f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80049fc:	d803      	bhi.n	8004a06 <mem_trim+0x32>
 80049fe:	8bfa      	ldrh	r2, [r7, #30]
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d201      	bcs.n	8004a0a <mem_trim+0x36>
    return NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e0cc      	b.n	8004ba4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004a0a:	4b68      	ldr	r3, [pc, #416]	; (8004bac <mem_trim+0x1d8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d304      	bcc.n	8004a1e <mem_trim+0x4a>
 8004a14:	4b66      	ldr	r3, [pc, #408]	; (8004bb0 <mem_trim+0x1dc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d306      	bcc.n	8004a2c <mem_trim+0x58>
 8004a1e:	4b65      	ldr	r3, [pc, #404]	; (8004bb4 <mem_trim+0x1e0>)
 8004a20:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004a24:	4964      	ldr	r1, [pc, #400]	; (8004bb8 <mem_trim+0x1e4>)
 8004a26:	4865      	ldr	r0, [pc, #404]	; (8004bbc <mem_trim+0x1e8>)
 8004a28:	f009 fb6a 	bl	800e100 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004a2c:	4b5f      	ldr	r3, [pc, #380]	; (8004bac <mem_trim+0x1d8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d304      	bcc.n	8004a40 <mem_trim+0x6c>
 8004a36:	4b5e      	ldr	r3, [pc, #376]	; (8004bb0 <mem_trim+0x1dc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d301      	bcc.n	8004a44 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	e0af      	b.n	8004ba4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3b08      	subs	r3, #8
 8004a48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004a4a:	69b8      	ldr	r0, [r7, #24]
 8004a4c:	f7ff fe30 	bl	80046b0 <mem_to_ptr>
 8004a50:	4603      	mov	r3, r0
 8004a52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	881a      	ldrh	r2, [r3, #0]
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b08      	subs	r3, #8
 8004a60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004a62:	8bfa      	ldrh	r2, [r7, #30]
 8004a64:	8abb      	ldrh	r3, [r7, #20]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d906      	bls.n	8004a78 <mem_trim+0xa4>
 8004a6a:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <mem_trim+0x1e0>)
 8004a6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004a70:	4953      	ldr	r1, [pc, #332]	; (8004bc0 <mem_trim+0x1ec>)
 8004a72:	4852      	ldr	r0, [pc, #328]	; (8004bbc <mem_trim+0x1e8>)
 8004a74:	f009 fb44 	bl	800e100 <iprintf>
  if (newsize > size) {
 8004a78:	8bfa      	ldrh	r2, [r7, #30]
 8004a7a:	8abb      	ldrh	r3, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d901      	bls.n	8004a84 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	e08f      	b.n	8004ba4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004a84:	8bfa      	ldrh	r2, [r7, #30]
 8004a86:	8abb      	ldrh	r3, [r7, #20]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d101      	bne.n	8004a90 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	e089      	b.n	8004ba4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fdf9 	bl	800468c <ptr_to_mem>
 8004a9a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	791b      	ldrb	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d13f      	bne.n	8004b24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004aac:	d106      	bne.n	8004abc <mem_trim+0xe8>
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <mem_trim+0x1e0>)
 8004ab0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004ab4:	4943      	ldr	r1, [pc, #268]	; (8004bc4 <mem_trim+0x1f0>)
 8004ab6:	4841      	ldr	r0, [pc, #260]	; (8004bbc <mem_trim+0x1e8>)
 8004ab8:	f009 fb22 	bl	800e100 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ac2:	8afa      	ldrh	r2, [r7, #22]
 8004ac4:	8bfb      	ldrh	r3, [r7, #30]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3308      	adds	r3, #8
 8004acc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004ace:	4b3e      	ldr	r3, [pc, #248]	; (8004bc8 <mem_trim+0x1f4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d106      	bne.n	8004ae6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fdd6 	bl	800468c <ptr_to_mem>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4a39      	ldr	r2, [pc, #228]	; (8004bc8 <mem_trim+0x1f4>)
 8004ae4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fdcf 	bl	800468c <ptr_to_mem>
 8004aee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2200      	movs	r2, #0
 8004af4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	89ba      	ldrh	r2, [r7, #12]
 8004afa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	8afa      	ldrh	r2, [r7, #22]
 8004b00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	89fa      	ldrh	r2, [r7, #14]
 8004b06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b10:	d047      	beq.n	8004ba2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fdb8 	bl	800468c <ptr_to_mem>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	89fb      	ldrh	r3, [r7, #14]
 8004b20:	8053      	strh	r3, [r2, #2]
 8004b22:	e03e      	b.n	8004ba2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004b24:	8bfb      	ldrh	r3, [r7, #30]
 8004b26:	f103 0214 	add.w	r2, r3, #20
 8004b2a:	8abb      	ldrh	r3, [r7, #20]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d838      	bhi.n	8004ba2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b30:	8afa      	ldrh	r2, [r7, #22]
 8004b32:	8bfb      	ldrh	r3, [r7, #30]
 8004b34:	4413      	add	r3, r2
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3308      	adds	r3, #8
 8004b3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b44:	d106      	bne.n	8004b54 <mem_trim+0x180>
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <mem_trim+0x1e0>)
 8004b48:	f240 3216 	movw	r2, #790	; 0x316
 8004b4c:	491d      	ldr	r1, [pc, #116]	; (8004bc4 <mem_trim+0x1f0>)
 8004b4e:	481b      	ldr	r0, [pc, #108]	; (8004bbc <mem_trim+0x1e8>)
 8004b50:	f009 fad6 	bl	800e100 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004b54:	89fb      	ldrh	r3, [r7, #14]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fd98 	bl	800468c <ptr_to_mem>
 8004b5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <mem_trim+0x1f4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d202      	bcs.n	8004b6e <mem_trim+0x19a>
      lfree = mem2;
 8004b68:	4a17      	ldr	r2, [pc, #92]	; (8004bc8 <mem_trim+0x1f4>)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2200      	movs	r2, #0
 8004b72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	8afa      	ldrh	r2, [r7, #22]
 8004b80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	89fa      	ldrh	r2, [r7, #14]
 8004b86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b90:	d007      	beq.n	8004ba2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fd78 	bl	800468c <ptr_to_mem>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	89fb      	ldrh	r3, [r7, #14]
 8004ba0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ba2:	687b      	ldr	r3, [r7, #4]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	24000234 	.word	0x24000234
 8004bb0:	24000238 	.word	0x24000238
 8004bb4:	0800f20c 	.word	0x0800f20c
 8004bb8:	0800f37c 	.word	0x0800f37c
 8004bbc:	0800f254 	.word	0x0800f254
 8004bc0:	0800f394 	.word	0x0800f394
 8004bc4:	0800f3b4 	.word	0x0800f3b4
 8004bc8:	2400023c 	.word	0x2400023c

08004bcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <mem_malloc+0x14>
    return NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e0d9      	b.n	8004d94 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	3303      	adds	r3, #3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004bec:	8bbb      	ldrh	r3, [r7, #28]
 8004bee:	2b0b      	cmp	r3, #11
 8004bf0:	d801      	bhi.n	8004bf6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004bf6:	8bbb      	ldrh	r3, [r7, #28]
 8004bf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bfc:	d803      	bhi.n	8004c06 <mem_malloc+0x3a>
 8004bfe:	8bba      	ldrh	r2, [r7, #28]
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d201      	bcs.n	8004c0a <mem_malloc+0x3e>
    return NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e0c4      	b.n	8004d94 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004c0a:	4b64      	ldr	r3, [pc, #400]	; (8004d9c <mem_malloc+0x1d0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fd4e 	bl	80046b0 <mem_to_ptr>
 8004c14:	4603      	mov	r3, r0
 8004c16:	83fb      	strh	r3, [r7, #30]
 8004c18:	e0b4      	b.n	8004d84 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004c1a:	8bfb      	ldrh	r3, [r7, #30]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fd35 	bl	800468c <ptr_to_mem>
 8004c22:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	791b      	ldrb	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 80a4 	bne.w	8004d76 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	8bfb      	ldrh	r3, [r7, #30]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f1a3 0208 	sub.w	r2, r3, #8
 8004c3c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	f0c0 8099 	bcc.w	8004d76 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	8bfb      	ldrh	r3, [r7, #30]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f1a3 0208 	sub.w	r2, r3, #8
 8004c52:	8bbb      	ldrh	r3, [r7, #28]
 8004c54:	3314      	adds	r3, #20
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d333      	bcc.n	8004cc2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004c5a:	8bfa      	ldrh	r2, [r7, #30]
 8004c5c:	8bbb      	ldrh	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3308      	adds	r3, #8
 8004c64:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004c66:	8a7b      	ldrh	r3, [r7, #18]
 8004c68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c6c:	d106      	bne.n	8004c7c <mem_malloc+0xb0>
 8004c6e:	4b4c      	ldr	r3, [pc, #304]	; (8004da0 <mem_malloc+0x1d4>)
 8004c70:	f240 3287 	movw	r2, #903	; 0x387
 8004c74:	494b      	ldr	r1, [pc, #300]	; (8004da4 <mem_malloc+0x1d8>)
 8004c76:	484c      	ldr	r0, [pc, #304]	; (8004da8 <mem_malloc+0x1dc>)
 8004c78:	f009 fa42 	bl	800e100 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004c7c:	8a7b      	ldrh	r3, [r7, #18]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fd04 	bl	800468c <ptr_to_mem>
 8004c84:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8bfa      	ldrh	r2, [r7, #30]
 8004c98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	8a7a      	ldrh	r2, [r7, #18]
 8004c9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cae:	d00b      	beq.n	8004cc8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fce9 	bl	800468c <ptr_to_mem>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	8a7b      	ldrh	r3, [r7, #18]
 8004cbe:	8053      	strh	r3, [r2, #2]
 8004cc0:	e002      	b.n	8004cc8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004cc8:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <mem_malloc+0x1d0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d127      	bne.n	8004d22 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004cd2:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <mem_malloc+0x1d0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004cd8:	e005      	b.n	8004ce6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fcd4 	bl	800468c <ptr_to_mem>
 8004ce4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	791b      	ldrb	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <mem_malloc+0x12c>
 8004cee:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <mem_malloc+0x1e0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d1f0      	bne.n	8004cda <mem_malloc+0x10e>
          }
          lfree = cur;
 8004cf8:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <mem_malloc+0x1d0>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004cfe:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <mem_malloc+0x1d0>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <mem_malloc+0x1e0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d00b      	beq.n	8004d22 <mem_malloc+0x156>
 8004d0a:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <mem_malloc+0x1d0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	791b      	ldrb	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <mem_malloc+0x156>
 8004d14:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <mem_malloc+0x1d4>)
 8004d16:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004d1a:	4925      	ldr	r1, [pc, #148]	; (8004db0 <mem_malloc+0x1e4>)
 8004d1c:	4822      	ldr	r0, [pc, #136]	; (8004da8 <mem_malloc+0x1dc>)
 8004d1e:	f009 f9ef 	bl	800e100 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d22:	8bba      	ldrh	r2, [r7, #28]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4413      	add	r3, r2
 8004d28:	3308      	adds	r3, #8
 8004d2a:	4a20      	ldr	r2, [pc, #128]	; (8004dac <mem_malloc+0x1e0>)
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d906      	bls.n	8004d40 <mem_malloc+0x174>
 8004d32:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <mem_malloc+0x1d4>)
 8004d34:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004d38:	491e      	ldr	r1, [pc, #120]	; (8004db4 <mem_malloc+0x1e8>)
 8004d3a:	481b      	ldr	r0, [pc, #108]	; (8004da8 <mem_malloc+0x1dc>)
 8004d3c:	f009 f9e0 	bl	800e100 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d006      	beq.n	8004d58 <mem_malloc+0x18c>
 8004d4a:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <mem_malloc+0x1d4>)
 8004d4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004d50:	4919      	ldr	r1, [pc, #100]	; (8004db8 <mem_malloc+0x1ec>)
 8004d52:	4815      	ldr	r0, [pc, #84]	; (8004da8 <mem_malloc+0x1dc>)
 8004d54:	f009 f9d4 	bl	800e100 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <mem_malloc+0x1a4>
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <mem_malloc+0x1d4>)
 8004d64:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004d68:	4914      	ldr	r1, [pc, #80]	; (8004dbc <mem_malloc+0x1f0>)
 8004d6a:	480f      	ldr	r0, [pc, #60]	; (8004da8 <mem_malloc+0x1dc>)
 8004d6c:	f009 f9c8 	bl	800e100 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3308      	adds	r3, #8
 8004d74:	e00e      	b.n	8004d94 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004d76:	8bfb      	ldrh	r3, [r7, #30]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fc87 	bl	800468c <ptr_to_mem>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004d84:	8bfa      	ldrh	r2, [r7, #30]
 8004d86:	8bbb      	ldrh	r3, [r7, #28]
 8004d88:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	f4ff af44 	bcc.w	8004c1a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3720      	adds	r7, #32
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	2400023c 	.word	0x2400023c
 8004da0:	0800f20c 	.word	0x0800f20c
 8004da4:	0800f3b4 	.word	0x0800f3b4
 8004da8:	0800f254 	.word	0x0800f254
 8004dac:	24000238 	.word	0x24000238
 8004db0:	0800f3c8 	.word	0x0800f3c8
 8004db4:	0800f3e4 	.word	0x0800f3e4
 8004db8:	0800f414 	.word	0x0800f414
 8004dbc:	0800f444 	.word	0x0800f444

08004dc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	3303      	adds	r3, #3
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e011      	b.n	8004e06 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	885b      	ldrh	r3, [r3, #2]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	dbe7      	blt.n	8004de2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e26:	2300      	movs	r3, #0
 8004e28:	80fb      	strh	r3, [r7, #6]
 8004e2a:	e009      	b.n	8004e40 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <memp_init+0x30>)
 8004e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ffc3 	bl	8004dc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	80fb      	strh	r3, [r7, #6]
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d9f2      	bls.n	8004e2c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	08011c20 	.word	0x08011c20

08004e54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d012      	beq.n	8004e90 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <do_memp_malloc_pool+0x38>
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <do_memp_malloc_pool+0x48>)
 8004e80:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004e84:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <do_memp_malloc_pool+0x4c>)
 8004e86:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <do_memp_malloc_pool+0x50>)
 8004e88:	f009 f93a 	bl	800e100 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e000      	b.n	8004e92 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800f468 	.word	0x0800f468
 8004ea0:	0800f498 	.word	0x0800f498
 8004ea4:	0800f4bc 	.word	0x0800f4bc

08004ea8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <memp_malloc_pool+0x1c>
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <memp_malloc_pool+0x38>)
 8004eb8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004ebc:	4909      	ldr	r1, [pc, #36]	; (8004ee4 <memp_malloc_pool+0x3c>)
 8004ebe:	480a      	ldr	r0, [pc, #40]	; (8004ee8 <memp_malloc_pool+0x40>)
 8004ec0:	f009 f91e 	bl	800e100 <iprintf>
  if (desc == NULL) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <memp_malloc_pool+0x26>
    return NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e003      	b.n	8004ed6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ffc0 	bl	8004e54 <do_memp_malloc_pool>
 8004ed4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	0800f468 	.word	0x0800f468
 8004ee4:	0800f4e4 	.word	0x0800f4e4
 8004ee8:	0800f4bc 	.word	0x0800f4bc

08004eec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d908      	bls.n	8004f0e <memp_malloc+0x22>
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <memp_malloc+0x3c>)
 8004efe:	f240 1257 	movw	r2, #343	; 0x157
 8004f02:	490a      	ldr	r1, [pc, #40]	; (8004f2c <memp_malloc+0x40>)
 8004f04:	480a      	ldr	r0, [pc, #40]	; (8004f30 <memp_malloc+0x44>)
 8004f06:	f009 f8fb 	bl	800e100 <iprintf>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e008      	b.n	8004f20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <memp_malloc+0x48>)
 8004f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff ff9c 	bl	8004e54 <do_memp_malloc_pool>
 8004f1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	0800f468 	.word	0x0800f468
 8004f2c:	0800f4f8 	.word	0x0800f4f8
 8004f30:	0800f4bc 	.word	0x0800f4bc
 8004f34:	08011c20 	.word	0x08011c20

08004f38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d006      	beq.n	8004f5a <do_memp_free_pool+0x22>
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <do_memp_free_pool+0x40>)
 8004f4e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004f52:	490a      	ldr	r1, [pc, #40]	; (8004f7c <do_memp_free_pool+0x44>)
 8004f54:	480a      	ldr	r0, [pc, #40]	; (8004f80 <do_memp_free_pool+0x48>)
 8004f56:	f009 f8d3 	bl	800e100 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	0800f468 	.word	0x0800f468
 8004f7c:	0800f518 	.word	0x0800f518
 8004f80:	0800f4bc 	.word	0x0800f4bc

08004f84 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <memp_free_pool+0x1e>
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <memp_free_pool+0x3c>)
 8004f96:	f240 1295 	movw	r2, #405	; 0x195
 8004f9a:	490a      	ldr	r1, [pc, #40]	; (8004fc4 <memp_free_pool+0x40>)
 8004f9c:	480a      	ldr	r0, [pc, #40]	; (8004fc8 <memp_free_pool+0x44>)
 8004f9e:	f009 f8af 	bl	800e100 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <memp_free_pool+0x34>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ffc1 	bl	8004f38 <do_memp_free_pool>
 8004fb6:	e000      	b.n	8004fba <memp_free_pool+0x36>
    return;
 8004fb8:	bf00      	nop
}
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	0800f468 	.word	0x0800f468
 8004fc4:	0800f4e4 	.word	0x0800f4e4
 8004fc8:	0800f4bc 	.word	0x0800f4bc

08004fcc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	6039      	str	r1, [r7, #0]
 8004fd6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d907      	bls.n	8004fee <memp_free+0x22>
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <memp_free+0x44>)
 8004fe0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004fe4:	490b      	ldr	r1, [pc, #44]	; (8005014 <memp_free+0x48>)
 8004fe6:	480c      	ldr	r0, [pc, #48]	; (8005018 <memp_free+0x4c>)
 8004fe8:	f009 f88a 	bl	800e100 <iprintf>
 8004fec:	e00c      	b.n	8005008 <memp_free+0x3c>

  if (mem == NULL) {
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <memp_free+0x50>)
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ff9a 	bl	8004f38 <do_memp_free_pool>
 8005004:	e000      	b.n	8005008 <memp_free+0x3c>
    return;
 8005006:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	0800f468 	.word	0x0800f468
 8005014:	0800f538 	.word	0x0800f538
 8005018:	0800f4bc 	.word	0x0800f4bc
 800501c:	08011c20 	.word	0x08011c20

08005020 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <netif_add+0x26>
 8005044:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <netif_add+0x174>)
 8005046:	f240 1227 	movw	r2, #295	; 0x127
 800504a:	4957      	ldr	r1, [pc, #348]	; (80051a8 <netif_add+0x178>)
 800504c:	4857      	ldr	r0, [pc, #348]	; (80051ac <netif_add+0x17c>)
 800504e:	f009 f857 	bl	800e100 <iprintf>
 8005052:	2300      	movs	r3, #0
 8005054:	e0a2      	b.n	800519c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d108      	bne.n	800506e <netif_add+0x3e>
 800505c:	4b51      	ldr	r3, [pc, #324]	; (80051a4 <netif_add+0x174>)
 800505e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005062:	4953      	ldr	r1, [pc, #332]	; (80051b0 <netif_add+0x180>)
 8005064:	4851      	ldr	r0, [pc, #324]	; (80051ac <netif_add+0x17c>)
 8005066:	f009 f84b 	bl	800e100 <iprintf>
 800506a:	2300      	movs	r3, #0
 800506c:	e096      	b.n	800519c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005074:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <netif_add+0x184>)
 8005076:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800507e:	4b4d      	ldr	r3, [pc, #308]	; (80051b4 <netif_add+0x184>)
 8005080:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005088:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <netif_add+0x184>)
 800508a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a45      	ldr	r2, [pc, #276]	; (80051b8 <netif_add+0x188>)
 80050a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a3a      	ldr	r2, [r7, #32]
 80050bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80050be:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <netif_add+0x18c>)
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	68b9      	ldr	r1, [r7, #8]
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f913 	bl	8005300 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	4798      	blx	r3
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <netif_add+0xba>
    return NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e058      	b.n	800519c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050f0:	2bff      	cmp	r3, #255	; 0xff
 80050f2:	d103      	bne.n	80050fc <netif_add+0xcc>
        netif->num = 0;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005100:	4b2f      	ldr	r3, [pc, #188]	; (80051c0 <netif_add+0x190>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e02b      	b.n	8005160 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	429a      	cmp	r2, r3
 800510e:	d106      	bne.n	800511e <netif_add+0xee>
 8005110:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <netif_add+0x174>)
 8005112:	f240 128b 	movw	r2, #395	; 0x18b
 8005116:	492b      	ldr	r1, [pc, #172]	; (80051c4 <netif_add+0x194>)
 8005118:	4824      	ldr	r0, [pc, #144]	; (80051ac <netif_add+0x17c>)
 800511a:	f008 fff1 	bl	800e100 <iprintf>
        num_netifs++;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2bff      	cmp	r3, #255	; 0xff
 8005128:	dd06      	ble.n	8005138 <netif_add+0x108>
 800512a:	4b1e      	ldr	r3, [pc, #120]	; (80051a4 <netif_add+0x174>)
 800512c:	f240 128d 	movw	r2, #397	; 0x18d
 8005130:	4925      	ldr	r1, [pc, #148]	; (80051c8 <netif_add+0x198>)
 8005132:	481e      	ldr	r0, [pc, #120]	; (80051ac <netif_add+0x17c>)
 8005134:	f008 ffe4 	bl	800e100 <iprintf>
        if (netif2->num == netif->num) {
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005144:	429a      	cmp	r2, r3
 8005146:	d108      	bne.n	800515a <netif_add+0x12a>
          netif->num++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800514e:	3301      	adds	r3, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005158:	e005      	b.n	8005166 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1d0      	bne.n	8005108 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1be      	bne.n	80050ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005172:	2bfe      	cmp	r3, #254	; 0xfe
 8005174:	d103      	bne.n	800517e <netif_add+0x14e>
    netif_num = 0;
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <netif_add+0x18c>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e006      	b.n	800518c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005184:	3301      	adds	r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <netif_add+0x18c>)
 800518a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <netif_add+0x190>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <netif_add+0x190>)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800519a:	68fb      	ldr	r3, [r7, #12]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	0800f554 	.word	0x0800f554
 80051a8:	0800f5e8 	.word	0x0800f5e8
 80051ac:	0800f5a4 	.word	0x0800f5a4
 80051b0:	0800f604 	.word	0x0800f604
 80051b4:	08011c84 	.word	0x08011c84
 80051b8:	080055db 	.word	0x080055db
 80051bc:	24003134 	.word	0x24003134
 80051c0:	2400312c 	.word	0x2400312c
 80051c4:	0800f628 	.word	0x0800f628
 80051c8:	0800f63c 	.word	0x0800f63c

080051cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f002 fb43 	bl	8007864 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f006 fc27 	bl	800ba34 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <netif_do_set_ipaddr+0x20>
 8005202:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <netif_do_set_ipaddr+0x88>)
 8005204:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005208:	491c      	ldr	r1, [pc, #112]	; (800527c <netif_do_set_ipaddr+0x8c>)
 800520a:	481d      	ldr	r0, [pc, #116]	; (8005280 <netif_do_set_ipaddr+0x90>)
 800520c:	f008 ff78 	bl	800e100 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <netif_do_set_ipaddr+0x34>
 8005216:	4b18      	ldr	r3, [pc, #96]	; (8005278 <netif_do_set_ipaddr+0x88>)
 8005218:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800521c:	4917      	ldr	r1, [pc, #92]	; (800527c <netif_do_set_ipaddr+0x8c>)
 800521e:	4818      	ldr	r0, [pc, #96]	; (8005280 <netif_do_set_ipaddr+0x90>)
 8005220:	f008 ff6e 	bl	800e100 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3304      	adds	r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d01c      	beq.n	800526c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3304      	adds	r3, #4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff ffbf 	bl	80051cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <netif_do_set_ipaddr+0x6a>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	e000      	b.n	800525c <netif_do_set_ipaddr+0x6c>
 800525a:	2300      	movs	r3, #0
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005260:	2101      	movs	r1, #1
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f8d2 	bl	800540c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	0800f554 	.word	0x0800f554
 800527c:	0800f66c 	.word	0x0800f66c
 8005280:	0800f5a4 	.word	0x0800f5a4

08005284 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3308      	adds	r3, #8
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d00a      	beq.n	80052b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <netif_do_set_netmask+0x26>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	e000      	b.n	80052ac <netif_do_set_netmask+0x28>
 80052aa:	2300      	movs	r3, #0
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	330c      	adds	r3, #12
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d00a      	beq.n	80052f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <netif_do_set_gw+0x26>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	e000      	b.n	80052ea <netif_do_set_gw+0x28>
 80052e8:	2300      	movs	r3, #0
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800531c:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <netif_set_addr+0x90>)
 800531e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <netif_set_addr+0x90>)
 8005328:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005330:	4b17      	ldr	r3, [pc, #92]	; (8005390 <netif_set_addr+0x90>)
 8005332:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <netif_set_addr+0x42>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <netif_set_addr+0x46>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <netif_set_addr+0x48>
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
  if (remove) {
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	461a      	mov	r2, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff49 	bl	80051f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff ff8e 	bl	8005284 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ffa8 	bl	80052c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	461a      	mov	r2, r3
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff35 	bl	80051f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005386:	bf00      	nop
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	08011c84 	.word	0x08011c84

08005394 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800539c:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <netif_set_default+0x1c>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	24003130 	.word	0x24003130

080053b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <netif_set_up+0x1e>
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <netif_set_up+0x4c>)
 80053c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80053c8:	490e      	ldr	r1, [pc, #56]	; (8005404 <netif_set_up+0x50>)
 80053ca:	480f      	ldr	r0, [pc, #60]	; (8005408 <netif_set_up+0x54>)
 80053cc:	f008 fe98 	bl	800e100 <iprintf>
 80053d0:	e013      	b.n	80053fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10c      	bne.n	80053fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80053f2:	2103      	movs	r1, #3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f809 	bl	800540c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	0800f554 	.word	0x0800f554
 8005404:	0800f6dc 	.word	0x0800f6dc
 8005408:	0800f5a4 	.word	0x0800f5a4

0800540c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <netif_issue_reports+0x20>
 800541e:	4b18      	ldr	r3, [pc, #96]	; (8005480 <netif_issue_reports+0x74>)
 8005420:	f240 326d 	movw	r2, #877	; 0x36d
 8005424:	4917      	ldr	r1, [pc, #92]	; (8005484 <netif_issue_reports+0x78>)
 8005426:	4818      	ldr	r0, [pc, #96]	; (8005488 <netif_issue_reports+0x7c>)
 8005428:	f008 fe6a 	bl	800e100 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01e      	beq.n	8005478 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005440:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3304      	adds	r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f007 fa49 	bl	800c908 <etharp_request>
 8005476:	e000      	b.n	800547a <netif_issue_reports+0x6e>
    return;
 8005478:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	0800f554 	.word	0x0800f554
 8005484:	0800f6f8 	.word	0x0800f6f8
 8005488:	0800f5a4 	.word	0x0800f5a4

0800548c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <netif_set_down+0x1e>
 800549a:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <netif_set_down+0x58>)
 800549c:	f240 329b 	movw	r2, #923	; 0x39b
 80054a0:	4911      	ldr	r1, [pc, #68]	; (80054e8 <netif_set_down+0x5c>)
 80054a2:	4812      	ldr	r0, [pc, #72]	; (80054ec <netif_set_down+0x60>)
 80054a4:	f008 fe2c 	bl	800e100 <iprintf>
 80054a8:	e019      	b.n	80054de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d012      	beq.n	80054de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f006 fdd3 	bl	800c084 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	0800f554 	.word	0x0800f554
 80054e8:	0800f71c 	.word	0x0800f71c
 80054ec:	0800f5a4 	.word	0x0800f5a4

080054f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <netif_set_link_up+0x1e>
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <netif_set_link_up+0x5c>)
 8005500:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005504:	4912      	ldr	r1, [pc, #72]	; (8005550 <netif_set_link_up+0x60>)
 8005506:	4813      	ldr	r0, [pc, #76]	; (8005554 <netif_set_link_up+0x64>)
 8005508:	f008 fdfa 	bl	800e100 <iprintf>
 800550c:	e01b      	b.n	8005546 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d114      	bne.n	8005546 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005522:	f043 0304 	orr.w	r3, r3, #4
 8005526:	b2da      	uxtb	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800552e:	2103      	movs	r1, #3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff6b 	bl	800540c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <netif_set_link_up+0x56>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	0800f554 	.word	0x0800f554
 8005550:	0800f73c 	.word	0x0800f73c
 8005554:	0800f5a4 	.word	0x0800f5a4

08005558 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d107      	bne.n	8005576 <netif_set_link_down+0x1e>
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <netif_set_link_down+0x54>)
 8005568:	f240 4206 	movw	r2, #1030	; 0x406
 800556c:	4910      	ldr	r1, [pc, #64]	; (80055b0 <netif_set_link_down+0x58>)
 800556e:	4811      	ldr	r0, [pc, #68]	; (80055b4 <netif_set_link_down+0x5c>)
 8005570:	f008 fdc6 	bl	800e100 <iprintf>
 8005574:	e017      	b.n	80055a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800558a:	f023 0304 	bic.w	r3, r3, #4
 800558e:	b2da      	uxtb	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <netif_set_link_down+0x4e>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	0800f554 	.word	0x0800f554
 80055b0:	0800f760 	.word	0x0800f760
 80055b4:	0800f5a4 	.word	0x0800f5a4

080055b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	61da      	str	r2, [r3, #28]
  }
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80055e6:	f06f 030b 	mvn.w	r3, #11
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d013      	beq.n	8005630 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <netif_get_by_index+0x48>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e00c      	b.n	800562a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005616:	3301      	adds	r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	79fa      	ldrb	r2, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d101      	bne.n	8005624 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	e006      	b.n	8005632 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ef      	bne.n	8005610 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2400312c 	.word	0x2400312c

08005644 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <pbuf_free_ooseq+0x38>)
 800564c:	2200      	movs	r2, #0
 800564e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <pbuf_free_ooseq+0x3c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	e00a      	b.n	800566e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f002 f93d 	bl	80078e0 <tcp_free_ooseq>
      return;
 8005666:	e005      	b.n	8005674 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f1      	bne.n	8005658 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	24003135 	.word	0x24003135
 8005680:	24003144 	.word	0x24003144

08005684 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005688:	4b03      	ldr	r3, [pc, #12]	; (8005698 <pbuf_pool_is_empty+0x14>)
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800568e:	bf00      	nop
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	24003135 	.word	0x24003135

0800569c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	460b      	mov	r3, r1
 80056ac:	80fb      	strh	r3, [r7, #6]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88ba      	ldrh	r2, [r7, #4]
 80056c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80056ca:	8b3b      	ldrh	r3, [r7, #24]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	7f3a      	ldrb	r2, [r7, #28]
 80056d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	73da      	strb	r2, [r3, #15]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	; 0x30
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	4603      	mov	r3, r0
 80056f8:	71fb      	strb	r3, [r7, #7]
 80056fa:	460b      	mov	r3, r1
 80056fc:	80bb      	strh	r3, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005706:	887b      	ldrh	r3, [r7, #2]
 8005708:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800570c:	d07f      	beq.n	800580e <pbuf_alloc+0x11e>
 800570e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005712:	f300 80c8 	bgt.w	80058a6 <pbuf_alloc+0x1b6>
 8005716:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800571a:	d010      	beq.n	800573e <pbuf_alloc+0x4e>
 800571c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005720:	f300 80c1 	bgt.w	80058a6 <pbuf_alloc+0x1b6>
 8005724:	2b01      	cmp	r3, #1
 8005726:	d002      	beq.n	800572e <pbuf_alloc+0x3e>
 8005728:	2b41      	cmp	r3, #65	; 0x41
 800572a:	f040 80bc 	bne.w	80058a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	88bb      	ldrh	r3, [r7, #4]
 8005732:	4619      	mov	r1, r3
 8005734:	2000      	movs	r0, #0
 8005736:	f000 f8d1 	bl	80058dc <pbuf_alloc_reference>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800573c:	e0bd      	b.n	80058ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005746:	88bb      	ldrh	r3, [r7, #4]
 8005748:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800574a:	2008      	movs	r0, #8
 800574c:	f7ff fbce 	bl	8004eec <memp_malloc>
 8005750:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005758:	f7ff ff94 	bl	8005684 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005764:	f000 faa8 	bl	8005cb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	e0a7      	b.n	80058bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800576c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800576e:	3303      	adds	r3, #3
 8005770:	b29b      	uxth	r3, r3
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	b29b      	uxth	r3, r3
 8005778:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800577c:	b29b      	uxth	r3, r3
 800577e:	8b7a      	ldrh	r2, [r7, #26]
 8005780:	4293      	cmp	r3, r2
 8005782:	bf28      	it	cs
 8005784:	4613      	movcs	r3, r2
 8005786:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800578a:	3310      	adds	r3, #16
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	3303      	adds	r3, #3
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	4618      	mov	r0, r3
 8005798:	89f9      	ldrh	r1, [r7, #14]
 800579a:	8b7a      	ldrh	r2, [r7, #26]
 800579c:	2300      	movs	r3, #0
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	460b      	mov	r3, r1
 80057a6:	4601      	mov	r1, r0
 80057a8:	6938      	ldr	r0, [r7, #16]
 80057aa:	f7ff ff77 	bl	800569c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <pbuf_alloc+0xd8>
 80057ba:	4b42      	ldr	r3, [pc, #264]	; (80058c4 <pbuf_alloc+0x1d4>)
 80057bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c0:	4941      	ldr	r1, [pc, #260]	; (80058c8 <pbuf_alloc+0x1d8>)
 80057c2:	4842      	ldr	r0, [pc, #264]	; (80058cc <pbuf_alloc+0x1dc>)
 80057c4:	f008 fc9c 	bl	800e100 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80057c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057ca:	3303      	adds	r3, #3
 80057cc:	f023 0303 	bic.w	r3, r3, #3
 80057d0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80057d4:	d106      	bne.n	80057e4 <pbuf_alloc+0xf4>
 80057d6:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <pbuf_alloc+0x1d4>)
 80057d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80057dc:	493c      	ldr	r1, [pc, #240]	; (80058d0 <pbuf_alloc+0x1e0>)
 80057de:	483b      	ldr	r0, [pc, #236]	; (80058cc <pbuf_alloc+0x1dc>)
 80057e0:	f008 fc8e 	bl	800e100 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
 80057ee:	e002      	b.n	80057f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80057fa:	8b7a      	ldrh	r2, [r7, #26]
 80057fc:	89fb      	ldrh	r3, [r7, #14]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005806:	8b7b      	ldrh	r3, [r7, #26]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d19e      	bne.n	800574a <pbuf_alloc+0x5a>
      break;
 800580c:	e055      	b.n	80058ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800580e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005810:	3303      	adds	r3, #3
 8005812:	b29b      	uxth	r3, r3
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	b29a      	uxth	r2, r3
 800581a:	88bb      	ldrh	r3, [r7, #4]
 800581c:	3303      	adds	r3, #3
 800581e:	b29b      	uxth	r3, r3
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	b29b      	uxth	r3, r3
 8005826:	4413      	add	r3, r2
 8005828:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800582a:	8b3b      	ldrh	r3, [r7, #24]
 800582c:	3310      	adds	r3, #16
 800582e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005830:	8b3a      	ldrh	r2, [r7, #24]
 8005832:	88bb      	ldrh	r3, [r7, #4]
 8005834:	3303      	adds	r3, #3
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	429a      	cmp	r2, r3
 800583c:	d306      	bcc.n	800584c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800583e:	8afa      	ldrh	r2, [r7, #22]
 8005840:	88bb      	ldrh	r3, [r7, #4]
 8005842:	3303      	adds	r3, #3
 8005844:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d201      	bcs.n	8005850 <pbuf_alloc+0x160>
        return NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	e035      	b.n	80058bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005850:	8afb      	ldrh	r3, [r7, #22]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f9ba 	bl	8004bcc <mem_malloc>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <pbuf_alloc+0x174>
        return NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	e02b      	b.n	80058bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005866:	3310      	adds	r3, #16
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	4413      	add	r3, r2
 800586c:	3303      	adds	r3, #3
 800586e:	f023 0303 	bic.w	r3, r3, #3
 8005872:	4618      	mov	r0, r3
 8005874:	88b9      	ldrh	r1, [r7, #4]
 8005876:	88ba      	ldrh	r2, [r7, #4]
 8005878:	2300      	movs	r3, #0
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	887b      	ldrh	r3, [r7, #2]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	460b      	mov	r3, r1
 8005882:	4601      	mov	r1, r0
 8005884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005886:	f7ff ff09 	bl	800569c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d010      	beq.n	80058b8 <pbuf_alloc+0x1c8>
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <pbuf_alloc+0x1d4>)
 8005898:	f44f 7291 	mov.w	r2, #290	; 0x122
 800589c:	490d      	ldr	r1, [pc, #52]	; (80058d4 <pbuf_alloc+0x1e4>)
 800589e:	480b      	ldr	r0, [pc, #44]	; (80058cc <pbuf_alloc+0x1dc>)
 80058a0:	f008 fc2e 	bl	800e100 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80058a4:	e008      	b.n	80058b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <pbuf_alloc+0x1d4>)
 80058a8:	f240 1227 	movw	r2, #295	; 0x127
 80058ac:	490a      	ldr	r1, [pc, #40]	; (80058d8 <pbuf_alloc+0x1e8>)
 80058ae:	4807      	ldr	r0, [pc, #28]	; (80058cc <pbuf_alloc+0x1dc>)
 80058b0:	f008 fc26 	bl	800e100 <iprintf>
      return NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e001      	b.n	80058bc <pbuf_alloc+0x1cc>
      break;
 80058b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3728      	adds	r7, #40	; 0x28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	0800f784 	.word	0x0800f784
 80058c8:	0800f7b4 	.word	0x0800f7b4
 80058cc:	0800f7e4 	.word	0x0800f7e4
 80058d0:	0800f80c 	.word	0x0800f80c
 80058d4:	0800f840 	.word	0x0800f840
 80058d8:	0800f86c 	.word	0x0800f86c

080058dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
 80058e8:	4613      	mov	r3, r2
 80058ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80058ec:	883b      	ldrh	r3, [r7, #0]
 80058ee:	2b41      	cmp	r3, #65	; 0x41
 80058f0:	d009      	beq.n	8005906 <pbuf_alloc_reference+0x2a>
 80058f2:	883b      	ldrh	r3, [r7, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d006      	beq.n	8005906 <pbuf_alloc_reference+0x2a>
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <pbuf_alloc_reference+0x5c>)
 80058fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80058fe:	490f      	ldr	r1, [pc, #60]	; (800593c <pbuf_alloc_reference+0x60>)
 8005900:	480f      	ldr	r0, [pc, #60]	; (8005940 <pbuf_alloc_reference+0x64>)
 8005902:	f008 fbfd 	bl	800e100 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005906:	2007      	movs	r0, #7
 8005908:	f7ff faf0 	bl	8004eec <memp_malloc>
 800590c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	e00b      	b.n	8005930 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005918:	8879      	ldrh	r1, [r7, #2]
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	2300      	movs	r3, #0
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	883b      	ldrh	r3, [r7, #0]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	460b      	mov	r3, r1
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff feb7 	bl	800569c <pbuf_init_alloced_pbuf>
  return p;
 800592e:	68fb      	ldr	r3, [r7, #12]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	0800f784 	.word	0x0800f784
 800593c:	0800f888 	.word	0x0800f888
 8005940:	0800f7e4 	.word	0x0800f7e4

08005944 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	460b      	mov	r3, r1
 8005952:	81bb      	strh	r3, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800595c:	8a7b      	ldrh	r3, [r7, #18]
 800595e:	3303      	adds	r3, #3
 8005960:	f023 0203 	bic.w	r2, r3, #3
 8005964:	89bb      	ldrh	r3, [r7, #12]
 8005966:	441a      	add	r2, r3
 8005968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596a:	429a      	cmp	r2, r3
 800596c:	d901      	bls.n	8005972 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	e018      	b.n	80059a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005978:	8a7b      	ldrh	r3, [r7, #18]
 800597a:	3303      	adds	r3, #3
 800597c:	f023 0303 	bic.w	r3, r3, #3
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	4413      	add	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e001      	b.n	800598c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	89b9      	ldrh	r1, [r7, #12]
 8005990:	89ba      	ldrh	r2, [r7, #12]
 8005992:	2302      	movs	r3, #2
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	897b      	ldrh	r3, [r7, #10]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	460b      	mov	r3, r1
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	f7ff fe7d 	bl	800569c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80059a2:	687b      	ldr	r3, [r7, #4]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <pbuf_realloc+0x20>
 80059be:	4b3a      	ldr	r3, [pc, #232]	; (8005aa8 <pbuf_realloc+0xfc>)
 80059c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80059c4:	4939      	ldr	r1, [pc, #228]	; (8005aac <pbuf_realloc+0x100>)
 80059c6:	483a      	ldr	r0, [pc, #232]	; (8005ab0 <pbuf_realloc+0x104>)
 80059c8:	f008 fb9a 	bl	800e100 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	891b      	ldrh	r3, [r3, #8]
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d263      	bcs.n	8005a9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	891a      	ldrh	r2, [r3, #8]
 80059da:	887b      	ldrh	r3, [r7, #2]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80059e8:	e018      	b.n	8005a1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	895b      	ldrh	r3, [r3, #10]
 80059ee:	897a      	ldrh	r2, [r7, #10]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	891a      	ldrh	r2, [r3, #8]
 80059f8:	893b      	ldrh	r3, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <pbuf_realloc+0x70>
 8005a0e:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <pbuf_realloc+0xfc>)
 8005a10:	f240 12af 	movw	r2, #431	; 0x1af
 8005a14:	4927      	ldr	r1, [pc, #156]	; (8005ab4 <pbuf_realloc+0x108>)
 8005a16:	4826      	ldr	r0, [pc, #152]	; (8005ab0 <pbuf_realloc+0x104>)
 8005a18:	f008 fb72 	bl	800e100 <iprintf>
  while (rem_len > q->len) {
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	895b      	ldrh	r3, [r3, #10]
 8005a20:	897a      	ldrh	r2, [r7, #10]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d8e1      	bhi.n	80059ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	7b1b      	ldrb	r3, [r3, #12]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d121      	bne.n	8005a76 <pbuf_realloc+0xca>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	895b      	ldrh	r3, [r3, #10]
 8005a36:	897a      	ldrh	r2, [r7, #10]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d01c      	beq.n	8005a76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	7b5b      	ldrb	r3, [r3, #13]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d116      	bne.n	8005a76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	897b      	ldrh	r3, [r7, #10]
 8005a54:	4413      	add	r3, r2
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7fe ffba 	bl	80049d4 <mem_trim>
 8005a60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <pbuf_realloc+0xca>
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <pbuf_realloc+0xfc>)
 8005a6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005a6e:	4912      	ldr	r1, [pc, #72]	; (8005ab8 <pbuf_realloc+0x10c>)
 8005a70:	480f      	ldr	r0, [pc, #60]	; (8005ab0 <pbuf_realloc+0x104>)
 8005a72:	f008 fb45 	bl	800e100 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	897a      	ldrh	r2, [r7, #10]
 8005a7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	895a      	ldrh	r2, [r3, #10]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f911 	bl	8005cb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e000      	b.n	8005aa0 <pbuf_realloc+0xf4>
    return;
 8005a9e:	bf00      	nop

}
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	0800f784 	.word	0x0800f784
 8005aac:	0800f89c 	.word	0x0800f89c
 8005ab0:	0800f7e4 	.word	0x0800f7e4
 8005ab4:	0800f8b4 	.word	0x0800f8b4
 8005ab8:	0800f8cc 	.word	0x0800f8cc

08005abc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <pbuf_add_header_impl+0x22>
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <pbuf_add_header_impl+0xc4>)
 8005ad2:	f240 12df 	movw	r2, #479	; 0x1df
 8005ad6:	492b      	ldr	r1, [pc, #172]	; (8005b84 <pbuf_add_header_impl+0xc8>)
 8005ad8:	482b      	ldr	r0, [pc, #172]	; (8005b88 <pbuf_add_header_impl+0xcc>)
 8005ada:	f008 fb11 	bl	800e100 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <pbuf_add_header_impl+0x30>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aea:	d301      	bcc.n	8005af0 <pbuf_add_header_impl+0x34>
    return 1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e043      	b.n	8005b78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <pbuf_add_header_impl+0x3e>
    return 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e03e      	b.n	8005b78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	891a      	ldrh	r2, [r3, #8]
 8005b02:	8a7b      	ldrh	r3, [r7, #18]
 8005b04:	4413      	add	r3, r2
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8a7a      	ldrh	r2, [r7, #18]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d901      	bls.n	8005b12 <pbuf_add_header_impl+0x56>
    return 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e032      	b.n	8005b78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	7b1b      	ldrb	r3, [r3, #12]
 8005b16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005b18:	8a3b      	ldrh	r3, [r7, #16]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	425b      	negs	r3, r3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3310      	adds	r3, #16
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d20d      	bcs.n	8005b54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e01d      	b.n	8005b78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d006      	beq.n	8005b50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	425b      	negs	r3, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e001      	b.n	8005b54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e011      	b.n	8005b78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	895a      	ldrh	r2, [r3, #10]
 8005b5e:	8a7b      	ldrh	r3, [r7, #18]
 8005b60:	4413      	add	r3, r2
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	891a      	ldrh	r2, [r3, #8]
 8005b6c:	8a7b      	ldrh	r3, [r7, #18]
 8005b6e:	4413      	add	r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	811a      	strh	r2, [r3, #8]


  return 0;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	0800f784 	.word	0x0800f784
 8005b84:	0800f8e8 	.word	0x0800f8e8
 8005b88:	0800f7e4 	.word	0x0800f7e4

08005b8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005b96:	2200      	movs	r2, #0
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff8e 	bl	8005abc <pbuf_add_header_impl>
 8005ba0:	4603      	mov	r3, r0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <pbuf_remove_header+0x1e>
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <pbuf_remove_header+0x94>)
 8005bbe:	f240 224b 	movw	r2, #587	; 0x24b
 8005bc2:	4920      	ldr	r1, [pc, #128]	; (8005c44 <pbuf_remove_header+0x98>)
 8005bc4:	4820      	ldr	r0, [pc, #128]	; (8005c48 <pbuf_remove_header+0x9c>)
 8005bc6:	f008 fa9b 	bl	800e100 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <pbuf_remove_header+0x2c>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd6:	d301      	bcc.n	8005bdc <pbuf_remove_header+0x30>
    return 1;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e02c      	b.n	8005c36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <pbuf_remove_header+0x3a>
    return 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e027      	b.n	8005c36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	895b      	ldrh	r3, [r3, #10]
 8005bee:	89fa      	ldrh	r2, [r7, #14]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d908      	bls.n	8005c06 <pbuf_remove_header+0x5a>
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <pbuf_remove_header+0x94>)
 8005bf6:	f240 2255 	movw	r2, #597	; 0x255
 8005bfa:	4914      	ldr	r1, [pc, #80]	; (8005c4c <pbuf_remove_header+0xa0>)
 8005bfc:	4812      	ldr	r0, [pc, #72]	; (8005c48 <pbuf_remove_header+0x9c>)
 8005bfe:	f008 fa7f 	bl	800e100 <iprintf>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e017      	b.n	8005c36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	441a      	add	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	895a      	ldrh	r2, [r3, #10]
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	891a      	ldrh	r2, [r3, #8]
 8005c2a:	89fb      	ldrh	r3, [r7, #14]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	0800f784 	.word	0x0800f784
 8005c44:	0800f8e8 	.word	0x0800f8e8
 8005c48:	0800f7e4 	.word	0x0800f7e4
 8005c4c:	0800f8f4 	.word	0x0800f8f4

08005c50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	807b      	strh	r3, [r7, #2]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005c60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da08      	bge.n	8005c7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c6c:	425b      	negs	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff9b 	bl	8005bac <pbuf_remove_header>
 8005c76:	4603      	mov	r3, r0
 8005c78:	e007      	b.n	8005c8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005c7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c7e:	787a      	ldrb	r2, [r7, #1]
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff ff1a 	bl	8005abc <pbuf_add_header_impl>
 8005c88:	4603      	mov	r3, r0
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005c9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ffd2 	bl	8005c50 <pbuf_header_impl>
 8005cac:	4603      	mov	r3, r0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10b      	bne.n	8005cde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <pbuf_free+0x22>
 8005ccc:	4b38      	ldr	r3, [pc, #224]	; (8005db0 <pbuf_free+0xf8>)
 8005cce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005cd2:	4938      	ldr	r1, [pc, #224]	; (8005db4 <pbuf_free+0xfc>)
 8005cd4:	4838      	ldr	r0, [pc, #224]	; (8005db8 <pbuf_free+0x100>)
 8005cd6:	f008 fa13 	bl	800e100 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e063      	b.n	8005da6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005ce2:	e05c      	b.n	8005d9e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7b9b      	ldrb	r3, [r3, #14]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d106      	bne.n	8005cfa <pbuf_free+0x42>
 8005cec:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <pbuf_free+0xf8>)
 8005cee:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005cf2:	4932      	ldr	r1, [pc, #200]	; (8005dbc <pbuf_free+0x104>)
 8005cf4:	4830      	ldr	r0, [pc, #192]	; (8005db8 <pbuf_free+0x100>)
 8005cf6:	f008 fa03 	bl	800e100 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7b9b      	ldrb	r3, [r3, #14]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	739a      	strb	r2, [r3, #14]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7b9b      	ldrb	r3, [r3, #14]
 8005d0a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005d0c:	7dbb      	ldrb	r3, [r7, #22]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d143      	bne.n	8005d9a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7b1b      	ldrb	r3, [r3, #12]
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	7b5b      	ldrb	r3, [r3, #13]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d011      	beq.n	8005d52 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <pbuf_free+0x90>
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <pbuf_free+0xf8>)
 8005d3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005d40:	491f      	ldr	r1, [pc, #124]	; (8005dc0 <pbuf_free+0x108>)
 8005d42:	481d      	ldr	r0, [pc, #116]	; (8005db8 <pbuf_free+0x100>)
 8005d44:	f008 f9dc 	bl	800e100 <iprintf>
        pc->custom_free_function(p);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
 8005d50:	e01d      	b.n	8005d8e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d104      	bne.n	8005d62 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	2008      	movs	r0, #8
 8005d5c:	f7ff f936 	bl	8004fcc <memp_free>
 8005d60:	e015      	b.n	8005d8e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d104      	bne.n	8005d72 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	2007      	movs	r0, #7
 8005d6c:	f7ff f92e 	bl	8004fcc <memp_free>
 8005d70:	e00d      	b.n	8005d8e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <pbuf_free+0xc8>
          mem_free(p);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fe fdc1 	bl	8004900 <mem_free>
 8005d7e:	e006      	b.n	8005d8e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <pbuf_free+0xf8>)
 8005d82:	f240 320f 	movw	r2, #783	; 0x30f
 8005d86:	490f      	ldr	r1, [pc, #60]	; (8005dc4 <pbuf_free+0x10c>)
 8005d88:	480b      	ldr	r0, [pc, #44]	; (8005db8 <pbuf_free+0x100>)
 8005d8a:	f008 f9b9 	bl	800e100 <iprintf>
        }
      }
      count++;
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	3301      	adds	r3, #1
 8005d92:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	e001      	b.n	8005d9e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d19f      	bne.n	8005ce4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	0800f784 	.word	0x0800f784
 8005db4:	0800f8e8 	.word	0x0800f8e8
 8005db8:	0800f7e4 	.word	0x0800f7e4
 8005dbc:	0800f914 	.word	0x0800f914
 8005dc0:	0800f92c 	.word	0x0800f92c
 8005dc4:	0800f950 	.word	0x0800f950

08005dc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005dd4:	e005      	b.n	8005de2 <pbuf_clen+0x1a>
    ++len;
 8005dd6:	89fb      	ldrh	r3, [r7, #14]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f6      	bne.n	8005dd6 <pbuf_clen+0xe>
  }
  return len;
 8005de8:	89fb      	ldrh	r3, [r7, #14]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7b9b      	ldrb	r3, [r3, #14]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7b9b      	ldrb	r3, [r3, #14]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <pbuf_ref+0x30>
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <pbuf_ref+0x38>)
 8005e1c:	f240 3242 	movw	r2, #834	; 0x342
 8005e20:	4904      	ldr	r1, [pc, #16]	; (8005e34 <pbuf_ref+0x3c>)
 8005e22:	4805      	ldr	r0, [pc, #20]	; (8005e38 <pbuf_ref+0x40>)
 8005e24:	f008 f96c 	bl	800e100 <iprintf>
  }
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	0800f784 	.word	0x0800f784
 8005e34:	0800f964 	.word	0x0800f964
 8005e38:	0800f7e4 	.word	0x0800f7e4

08005e3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <pbuf_cat+0x16>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <pbuf_cat+0x26>
 8005e52:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <pbuf_cat+0x98>)
 8005e54:	f240 3259 	movw	r2, #857	; 0x359
 8005e58:	491f      	ldr	r1, [pc, #124]	; (8005ed8 <pbuf_cat+0x9c>)
 8005e5a:	4820      	ldr	r0, [pc, #128]	; (8005edc <pbuf_cat+0xa0>)
 8005e5c:	f008 f950 	bl	800e100 <iprintf>
 8005e60:	e034      	b.n	8005ecc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e00a      	b.n	8005e7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	891a      	ldrh	r2, [r3, #8]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	891b      	ldrh	r3, [r3, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	891a      	ldrh	r2, [r3, #8]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	895b      	ldrh	r3, [r3, #10]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d006      	beq.n	8005ea0 <pbuf_cat+0x64>
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <pbuf_cat+0x98>)
 8005e94:	f240 3262 	movw	r2, #866	; 0x362
 8005e98:	4911      	ldr	r1, [pc, #68]	; (8005ee0 <pbuf_cat+0xa4>)
 8005e9a:	4810      	ldr	r0, [pc, #64]	; (8005edc <pbuf_cat+0xa0>)
 8005e9c:	f008 f930 	bl	800e100 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d006      	beq.n	8005eb6 <pbuf_cat+0x7a>
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <pbuf_cat+0x98>)
 8005eaa:	f240 3263 	movw	r2, #867	; 0x363
 8005eae:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <pbuf_cat+0xa8>)
 8005eb0:	480a      	ldr	r0, [pc, #40]	; (8005edc <pbuf_cat+0xa0>)
 8005eb2:	f008 f925 	bl	800e100 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	891a      	ldrh	r2, [r3, #8]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	891b      	ldrh	r3, [r3, #8]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	0800f784 	.word	0x0800f784
 8005ed8:	0800f978 	.word	0x0800f978
 8005edc:	0800f7e4 	.word	0x0800f7e4
 8005ee0:	0800f9b0 	.word	0x0800f9b0
 8005ee4:	0800f9e0 	.word	0x0800f9e0

08005ee8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <pbuf_copy+0x2a>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <pbuf_copy+0x2a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	891a      	ldrh	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	891b      	ldrh	r3, [r3, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d209      	bcs.n	8005f26 <pbuf_copy+0x3e>
 8005f12:	4b57      	ldr	r3, [pc, #348]	; (8006070 <pbuf_copy+0x188>)
 8005f14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005f18:	4956      	ldr	r1, [pc, #344]	; (8006074 <pbuf_copy+0x18c>)
 8005f1a:	4857      	ldr	r0, [pc, #348]	; (8006078 <pbuf_copy+0x190>)
 8005f1c:	f008 f8f0 	bl	800e100 <iprintf>
 8005f20:	f06f 030f 	mvn.w	r3, #15
 8005f24:	e09f      	b.n	8006066 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	895b      	ldrh	r3, [r3, #10]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	895b      	ldrh	r3, [r3, #10]
 8005f34:	4619      	mov	r1, r3
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1acb      	subs	r3, r1, r3
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d306      	bcc.n	8005f4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	895b      	ldrh	r3, [r3, #10]
 8005f42:	461a      	mov	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	e005      	b.n	8005f58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	895b      	ldrh	r3, [r3, #10]
 8005f50:	461a      	mov	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	18d0      	adds	r0, r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	f008 f8b2 	bl	800e0d4 <memcpy>
    offset_to += len;
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	895b      	ldrh	r3, [r3, #10]
 8005f84:	461a      	mov	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d906      	bls.n	8005f9a <pbuf_copy+0xb2>
 8005f8c:	4b38      	ldr	r3, [pc, #224]	; (8006070 <pbuf_copy+0x188>)
 8005f8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005f92:	493a      	ldr	r1, [pc, #232]	; (800607c <pbuf_copy+0x194>)
 8005f94:	4838      	ldr	r0, [pc, #224]	; (8006078 <pbuf_copy+0x190>)
 8005f96:	f008 f8b3 	bl	800e100 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	895b      	ldrh	r3, [r3, #10]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d906      	bls.n	8005fb4 <pbuf_copy+0xcc>
 8005fa6:	4b32      	ldr	r3, [pc, #200]	; (8006070 <pbuf_copy+0x188>)
 8005fa8:	f240 32da 	movw	r2, #986	; 0x3da
 8005fac:	4934      	ldr	r1, [pc, #208]	; (8006080 <pbuf_copy+0x198>)
 8005fae:	4832      	ldr	r0, [pc, #200]	; (8006078 <pbuf_copy+0x190>)
 8005fb0:	f008 f8a6 	bl	800e100 <iprintf>
    if (offset_from >= p_from->len) {
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	895b      	ldrh	r3, [r3, #10]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d304      	bcc.n	8005fca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	895b      	ldrh	r3, [r3, #10]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d114      	bne.n	8006000 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10c      	bne.n	8006000 <pbuf_copy+0x118>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <pbuf_copy+0x118>
 8005fec:	4b20      	ldr	r3, [pc, #128]	; (8006070 <pbuf_copy+0x188>)
 8005fee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005ff2:	4924      	ldr	r1, [pc, #144]	; (8006084 <pbuf_copy+0x19c>)
 8005ff4:	4820      	ldr	r0, [pc, #128]	; (8006078 <pbuf_copy+0x190>)
 8005ff6:	f008 f883 	bl	800e100 <iprintf>
 8005ffa:	f06f 030f 	mvn.w	r3, #15
 8005ffe:	e032      	b.n	8006066 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d013      	beq.n	800602e <pbuf_copy+0x146>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	895a      	ldrh	r2, [r3, #10]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	891b      	ldrh	r3, [r3, #8]
 800600e:	429a      	cmp	r2, r3
 8006010:	d10d      	bne.n	800602e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <pbuf_copy+0x146>
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <pbuf_copy+0x188>)
 800601c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006020:	4919      	ldr	r1, [pc, #100]	; (8006088 <pbuf_copy+0x1a0>)
 8006022:	4815      	ldr	r0, [pc, #84]	; (8006078 <pbuf_copy+0x190>)
 8006024:	f008 f86c 	bl	800e100 <iprintf>
 8006028:	f06f 0305 	mvn.w	r3, #5
 800602c:	e01b      	b.n	8006066 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <pbuf_copy+0x174>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	895a      	ldrh	r2, [r3, #10]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	891b      	ldrh	r3, [r3, #8]
 800603c:	429a      	cmp	r2, r3
 800603e:	d10d      	bne.n	800605c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d009      	beq.n	800605c <pbuf_copy+0x174>
 8006048:	4b09      	ldr	r3, [pc, #36]	; (8006070 <pbuf_copy+0x188>)
 800604a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800604e:	490e      	ldr	r1, [pc, #56]	; (8006088 <pbuf_copy+0x1a0>)
 8006050:	4809      	ldr	r0, [pc, #36]	; (8006078 <pbuf_copy+0x190>)
 8006052:	f008 f855 	bl	800e100 <iprintf>
 8006056:	f06f 0305 	mvn.w	r3, #5
 800605a:	e004      	b.n	8006066 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f47f af61 	bne.w	8005f26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	0800f784 	.word	0x0800f784
 8006074:	0800fa2c 	.word	0x0800fa2c
 8006078:	0800f7e4 	.word	0x0800f7e4
 800607c:	0800fa5c 	.word	0x0800fa5c
 8006080:	0800fa74 	.word	0x0800fa74
 8006084:	0800fa90 	.word	0x0800fa90
 8006088:	0800faa0 	.word	0x0800faa0

0800608c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4611      	mov	r1, r2
 8006098:	461a      	mov	r2, r3
 800609a:	460b      	mov	r3, r1
 800609c:	80fb      	strh	r3, [r7, #6]
 800609e:	4613      	mov	r3, r2
 80060a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d108      	bne.n	80060c2 <pbuf_copy_partial+0x36>
 80060b0:	4b2b      	ldr	r3, [pc, #172]	; (8006160 <pbuf_copy_partial+0xd4>)
 80060b2:	f240 420a 	movw	r2, #1034	; 0x40a
 80060b6:	492b      	ldr	r1, [pc, #172]	; (8006164 <pbuf_copy_partial+0xd8>)
 80060b8:	482b      	ldr	r0, [pc, #172]	; (8006168 <pbuf_copy_partial+0xdc>)
 80060ba:	f008 f821 	bl	800e100 <iprintf>
 80060be:	2300      	movs	r3, #0
 80060c0:	e04a      	b.n	8006158 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d108      	bne.n	80060da <pbuf_copy_partial+0x4e>
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <pbuf_copy_partial+0xd4>)
 80060ca:	f240 420b 	movw	r2, #1035	; 0x40b
 80060ce:	4927      	ldr	r1, [pc, #156]	; (800616c <pbuf_copy_partial+0xe0>)
 80060d0:	4825      	ldr	r0, [pc, #148]	; (8006168 <pbuf_copy_partial+0xdc>)
 80060d2:	f008 f815 	bl	800e100 <iprintf>
 80060d6:	2300      	movs	r3, #0
 80060d8:	e03e      	b.n	8006158 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e034      	b.n	800614a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80060e0:	88bb      	ldrh	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <pbuf_copy_partial+0x70>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	895b      	ldrh	r3, [r3, #10]
 80060ea:	88ba      	ldrh	r2, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d305      	bcc.n	80060fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	895b      	ldrh	r3, [r3, #10]
 80060f4:	88ba      	ldrh	r2, [r7, #4]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	80bb      	strh	r3, [r7, #4]
 80060fa:	e023      	b.n	8006144 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	895a      	ldrh	r2, [r3, #10]
 8006100:	88bb      	ldrh	r3, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006106:	8b3a      	ldrh	r2, [r7, #24]
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	429a      	cmp	r2, r3
 800610c:	d901      	bls.n	8006112 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006112:	8b7b      	ldrh	r3, [r7, #26]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	18d0      	adds	r0, r2, r3
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	88bb      	ldrh	r3, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	8b3a      	ldrh	r2, [r7, #24]
 8006122:	4619      	mov	r1, r3
 8006124:	f007 ffd6 	bl	800e0d4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006128:	8afa      	ldrh	r2, [r7, #22]
 800612a:	8b3b      	ldrh	r3, [r7, #24]
 800612c:	4413      	add	r3, r2
 800612e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006130:	8b7a      	ldrh	r2, [r7, #26]
 8006132:	8b3b      	ldrh	r3, [r7, #24]
 8006134:	4413      	add	r3, r2
 8006136:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	8b3b      	ldrh	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <pbuf_copy_partial+0xca>
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1c4      	bne.n	80060e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006156:	8afb      	ldrh	r3, [r7, #22]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	0800f784 	.word	0x0800f784
 8006164:	0800facc 	.word	0x0800facc
 8006168:	0800f7e4 	.word	0x0800f7e4
 800616c:	0800faec 	.word	0x0800faec

08006170 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	603a      	str	r2, [r7, #0]
 800617a:	71fb      	strb	r3, [r7, #7]
 800617c:	460b      	mov	r3, r1
 800617e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	8919      	ldrh	r1, [r3, #8]
 8006184:	88ba      	ldrh	r2, [r7, #4]
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fab1 	bl	80056f0 <pbuf_alloc>
 800618e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <pbuf_clone+0x2a>
    return NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	e011      	b.n	80061be <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff fea3 	bl	8005ee8 <pbuf_copy>
 80061a2:	4603      	mov	r3, r0
 80061a4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80061a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d006      	beq.n	80061bc <pbuf_clone+0x4c>
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <pbuf_clone+0x58>)
 80061b0:	f240 5224 	movw	r2, #1316	; 0x524
 80061b4:	4905      	ldr	r1, [pc, #20]	; (80061cc <pbuf_clone+0x5c>)
 80061b6:	4806      	ldr	r0, [pc, #24]	; (80061d0 <pbuf_clone+0x60>)
 80061b8:	f007 ffa2 	bl	800e100 <iprintf>
  return q;
 80061bc:	68fb      	ldr	r3, [r7, #12]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	0800f784 	.word	0x0800f784
 80061cc:	0800fbf8 	.word	0x0800fbf8
 80061d0:	0800f7e4 	.word	0x0800f7e4

080061d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80061d8:	f007 ffaa 	bl	800e130 <rand>
 80061dc:	4603      	mov	r3, r0
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	4b01      	ldr	r3, [pc, #4]	; (80061f4 <tcp_init+0x20>)
 80061ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80061f0:	bf00      	nop
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	24000024 	.word	0x24000024

080061f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7d1b      	ldrb	r3, [r3, #20]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d105      	bne.n	8006214 <tcp_free+0x1c>
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <tcp_free+0x2c>)
 800620a:	22d4      	movs	r2, #212	; 0xd4
 800620c:	4906      	ldr	r1, [pc, #24]	; (8006228 <tcp_free+0x30>)
 800620e:	4807      	ldr	r0, [pc, #28]	; (800622c <tcp_free+0x34>)
 8006210:	f007 ff76 	bl	800e100 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	2001      	movs	r0, #1
 8006218:	f7fe fed8 	bl	8004fcc <memp_free>
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	0800fc84 	.word	0x0800fc84
 8006228:	0800fcb4 	.word	0x0800fcb4
 800622c:	0800fcc8 	.word	0x0800fcc8

08006230 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7d1b      	ldrb	r3, [r3, #20]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d105      	bne.n	800624c <tcp_free_listen+0x1c>
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <tcp_free_listen+0x2c>)
 8006242:	22df      	movs	r2, #223	; 0xdf
 8006244:	4906      	ldr	r1, [pc, #24]	; (8006260 <tcp_free_listen+0x30>)
 8006246:	4807      	ldr	r0, [pc, #28]	; (8006264 <tcp_free_listen+0x34>)
 8006248:	f007 ff5a 	bl	800e100 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	2002      	movs	r0, #2
 8006250:	f7fe febc 	bl	8004fcc <memp_free>
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	0800fc84 	.word	0x0800fc84
 8006260:	0800fcf0 	.word	0x0800fcf0
 8006264:	0800fcc8 	.word	0x0800fcc8

08006268 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800626c:	f000 fea2 	bl	8006fb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <tcp_tmr+0x28>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <tcp_tmr+0x28>)
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <tcp_tmr+0x28>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006288:	f000 fb54 	bl	8006934 <tcp_slowtmr>
  }
}
 800628c:	bf00      	nop
 800628e:	bd80      	pop	{r7, pc}
 8006290:	2400314d 	.word	0x2400314d

08006294 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <tcp_remove_listener+0x1c>
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <tcp_remove_listener+0x48>)
 80062a6:	22ff      	movs	r2, #255	; 0xff
 80062a8:	490d      	ldr	r1, [pc, #52]	; (80062e0 <tcp_remove_listener+0x4c>)
 80062aa:	480e      	ldr	r0, [pc, #56]	; (80062e4 <tcp_remove_listener+0x50>)
 80062ac:	f007 ff28 	bl	800e100 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e00a      	b.n	80062cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d102      	bne.n	80062c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f1      	bne.n	80062b6 <tcp_remove_listener+0x22>
    }
  }
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	0800fc84 	.word	0x0800fc84
 80062e0:	0800fd0c 	.word	0x0800fd0c
 80062e4:	0800fcc8 	.word	0x0800fcc8

080062e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <tcp_listen_closed+0x1c>
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <tcp_listen_closed+0x60>)
 80062f8:	f240 1211 	movw	r2, #273	; 0x111
 80062fc:	4913      	ldr	r1, [pc, #76]	; (800634c <tcp_listen_closed+0x64>)
 80062fe:	4814      	ldr	r0, [pc, #80]	; (8006350 <tcp_listen_closed+0x68>)
 8006300:	f007 fefe 	bl	800e100 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7d1b      	ldrb	r3, [r3, #20]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d006      	beq.n	800631a <tcp_listen_closed+0x32>
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <tcp_listen_closed+0x60>)
 800630e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006312:	4910      	ldr	r1, [pc, #64]	; (8006354 <tcp_listen_closed+0x6c>)
 8006314:	480e      	ldr	r0, [pc, #56]	; (8006350 <tcp_listen_closed+0x68>)
 8006316:	f007 fef3 	bl	800e100 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800631a:	2301      	movs	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e00b      	b.n	8006338 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006320:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <tcp_listen_closed+0x70>)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ffb1 	bl	8006294 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d9f0      	bls.n	8006320 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	0800fc84 	.word	0x0800fc84
 800634c:	0800fd34 	.word	0x0800fd34
 8006350:	0800fcc8 	.word	0x0800fcc8
 8006354:	0800fd40 	.word	0x0800fd40
 8006358:	08011c5c 	.word	0x08011c5c

0800635c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af04      	add	r7, sp, #16
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <tcp_close_shutdown+0x20>
 800636e:	4b63      	ldr	r3, [pc, #396]	; (80064fc <tcp_close_shutdown+0x1a0>)
 8006370:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006374:	4962      	ldr	r1, [pc, #392]	; (8006500 <tcp_close_shutdown+0x1a4>)
 8006376:	4863      	ldr	r0, [pc, #396]	; (8006504 <tcp_close_shutdown+0x1a8>)
 8006378:	f007 fec2 	bl	800e100 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d066      	beq.n	8006450 <tcp_close_shutdown+0xf4>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7d1b      	ldrb	r3, [r3, #20]
 8006386:	2b04      	cmp	r3, #4
 8006388:	d003      	beq.n	8006392 <tcp_close_shutdown+0x36>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7d1b      	ldrb	r3, [r3, #20]
 800638e:	2b07      	cmp	r3, #7
 8006390:	d15e      	bne.n	8006450 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <tcp_close_shutdown+0x48>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80063a2:	d055      	beq.n	8006450 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8b5b      	ldrh	r3, [r3, #26]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <tcp_close_shutdown+0x62>
 80063b0:	4b52      	ldr	r3, [pc, #328]	; (80064fc <tcp_close_shutdown+0x1a0>)
 80063b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80063b6:	4954      	ldr	r1, [pc, #336]	; (8006508 <tcp_close_shutdown+0x1ac>)
 80063b8:	4852      	ldr	r0, [pc, #328]	; (8006504 <tcp_close_shutdown+0x1a8>)
 80063ba:	f007 fea1 	bl	800e100 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80063c6:	687d      	ldr	r5, [r7, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	8ad2      	ldrh	r2, [r2, #22]
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	8b09      	ldrh	r1, [r1, #24]
 80063d4:	9102      	str	r1, [sp, #8]
 80063d6:	9201      	str	r2, [sp, #4]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462b      	mov	r3, r5
 80063dc:	4622      	mov	r2, r4
 80063de:	4601      	mov	r1, r0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f004 fe91 	bl	800b108 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f001 f8c6 	bl	8007578 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80063ec:	4b47      	ldr	r3, [pc, #284]	; (800650c <tcp_close_shutdown+0x1b0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d105      	bne.n	8006402 <tcp_close_shutdown+0xa6>
 80063f6:	4b45      	ldr	r3, [pc, #276]	; (800650c <tcp_close_shutdown+0x1b0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4a43      	ldr	r2, [pc, #268]	; (800650c <tcp_close_shutdown+0x1b0>)
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e013      	b.n	800642a <tcp_close_shutdown+0xce>
 8006402:	4b42      	ldr	r3, [pc, #264]	; (800650c <tcp_close_shutdown+0x1b0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e00c      	b.n	8006424 <tcp_close_shutdown+0xc8>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d104      	bne.n	800641e <tcp_close_shutdown+0xc2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	60da      	str	r2, [r3, #12]
 800641c:	e005      	b.n	800642a <tcp_close_shutdown+0xce>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1ef      	bne.n	800640a <tcp_close_shutdown+0xae>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	60da      	str	r2, [r3, #12]
 8006430:	4b37      	ldr	r3, [pc, #220]	; (8006510 <tcp_close_shutdown+0x1b4>)
 8006432:	2201      	movs	r2, #1
 8006434:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006436:	4b37      	ldr	r3, [pc, #220]	; (8006514 <tcp_close_shutdown+0x1b8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	429a      	cmp	r2, r3
 800643e:	d102      	bne.n	8006446 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006440:	f003 fd5e 	bl	8009f00 <tcp_trigger_input_pcb_close>
 8006444:	e002      	b.n	800644c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fed6 	bl	80061f8 <tcp_free>
      }
      return ERR_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e050      	b.n	80064f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7d1b      	ldrb	r3, [r3, #20]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d03b      	beq.n	80064d0 <tcp_close_shutdown+0x174>
 8006458:	2b02      	cmp	r3, #2
 800645a:	dc44      	bgt.n	80064e6 <tcp_close_shutdown+0x18a>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <tcp_close_shutdown+0x10a>
 8006460:	2b01      	cmp	r3, #1
 8006462:	d02a      	beq.n	80064ba <tcp_close_shutdown+0x15e>
 8006464:	e03f      	b.n	80064e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	8adb      	ldrh	r3, [r3, #22]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d021      	beq.n	80064b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800646e:	4b2a      	ldr	r3, [pc, #168]	; (8006518 <tcp_close_shutdown+0x1bc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d105      	bne.n	8006484 <tcp_close_shutdown+0x128>
 8006478:	4b27      	ldr	r3, [pc, #156]	; (8006518 <tcp_close_shutdown+0x1bc>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	4a26      	ldr	r2, [pc, #152]	; (8006518 <tcp_close_shutdown+0x1bc>)
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e013      	b.n	80064ac <tcp_close_shutdown+0x150>
 8006484:	4b24      	ldr	r3, [pc, #144]	; (8006518 <tcp_close_shutdown+0x1bc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	e00c      	b.n	80064a6 <tcp_close_shutdown+0x14a>
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	429a      	cmp	r2, r3
 8006494:	d104      	bne.n	80064a0 <tcp_close_shutdown+0x144>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	60da      	str	r2, [r3, #12]
 800649e:	e005      	b.n	80064ac <tcp_close_shutdown+0x150>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1ef      	bne.n	800648c <tcp_close_shutdown+0x130>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fea0 	bl	80061f8 <tcp_free>
      break;
 80064b8:	e01a      	b.n	80064f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ff14 	bl	80062e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	4816      	ldr	r0, [pc, #88]	; (800651c <tcp_close_shutdown+0x1c0>)
 80064c4:	f001 f8a8 	bl	8007618 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff feb1 	bl	8006230 <tcp_free_listen>
      break;
 80064ce:	e00f      	b.n	80064f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	480e      	ldr	r0, [pc, #56]	; (800650c <tcp_close_shutdown+0x1b0>)
 80064d4:	f001 f8a0 	bl	8007618 <tcp_pcb_remove>
 80064d8:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <tcp_close_shutdown+0x1b4>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe8a 	bl	80061f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80064e4:	e004      	b.n	80064f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f81a 	bl	8006520 <tcp_close_shutdown_fin>
 80064ec:	4603      	mov	r3, r0
 80064ee:	e000      	b.n	80064f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bdb0      	pop	{r4, r5, r7, pc}
 80064fa:	bf00      	nop
 80064fc:	0800fc84 	.word	0x0800fc84
 8006500:	0800fd58 	.word	0x0800fd58
 8006504:	0800fcc8 	.word	0x0800fcc8
 8006508:	0800fd78 	.word	0x0800fd78
 800650c:	24003144 	.word	0x24003144
 8006510:	2400314c 	.word	0x2400314c
 8006514:	24003184 	.word	0x24003184
 8006518:	2400313c 	.word	0x2400313c
 800651c:	24003140 	.word	0x24003140

08006520 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <tcp_close_shutdown_fin+0x1c>
 800652e:	4b2e      	ldr	r3, [pc, #184]	; (80065e8 <tcp_close_shutdown_fin+0xc8>)
 8006530:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006534:	492d      	ldr	r1, [pc, #180]	; (80065ec <tcp_close_shutdown_fin+0xcc>)
 8006536:	482e      	ldr	r0, [pc, #184]	; (80065f0 <tcp_close_shutdown_fin+0xd0>)
 8006538:	f007 fde2 	bl	800e100 <iprintf>

  switch (pcb->state) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7d1b      	ldrb	r3, [r3, #20]
 8006540:	2b07      	cmp	r3, #7
 8006542:	d020      	beq.n	8006586 <tcp_close_shutdown_fin+0x66>
 8006544:	2b07      	cmp	r3, #7
 8006546:	dc2b      	bgt.n	80065a0 <tcp_close_shutdown_fin+0x80>
 8006548:	2b03      	cmp	r3, #3
 800654a:	d002      	beq.n	8006552 <tcp_close_shutdown_fin+0x32>
 800654c:	2b04      	cmp	r3, #4
 800654e:	d00d      	beq.n	800656c <tcp_close_shutdown_fin+0x4c>
 8006550:	e026      	b.n	80065a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f003 fee6 	bl	800a324 <tcp_send_fin>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800655c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11f      	bne.n	80065a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2205      	movs	r2, #5
 8006568:	751a      	strb	r2, [r3, #20]
      }
      break;
 800656a:	e01b      	b.n	80065a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f003 fed9 	bl	800a324 <tcp_send_fin>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d114      	bne.n	80065a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2205      	movs	r2, #5
 8006582:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006584:	e010      	b.n	80065a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f003 fecc 	bl	800a324 <tcp_send_fin>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2209      	movs	r2, #9
 800659c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800659e:	e005      	b.n	80065ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e01c      	b.n	80065de <tcp_close_shutdown_fin+0xbe>
      break;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <tcp_close_shutdown_fin+0x8e>
      break;
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <tcp_close_shutdown_fin+0x8e>
      break;
 80065ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80065ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d103      	bne.n	80065be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f003 fff2 	bl	800a5a0 <tcp_output>
 80065bc:	e00d      	b.n	80065da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80065be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d108      	bne.n	80065da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8b5b      	ldrh	r3, [r3, #26]
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e001      	b.n	80065de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80065da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	0800fc84 	.word	0x0800fc84
 80065ec:	0800fd34 	.word	0x0800fd34
 80065f0:	0800fcc8 	.word	0x0800fcc8

080065f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <tcp_close+0x22>
 8006602:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <tcp_close+0x4c>)
 8006604:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006608:	490e      	ldr	r1, [pc, #56]	; (8006644 <tcp_close+0x50>)
 800660a:	480f      	ldr	r0, [pc, #60]	; (8006648 <tcp_close+0x54>)
 800660c:	f007 fd78 	bl	800e100 <iprintf>
 8006610:	f06f 030f 	mvn.w	r3, #15
 8006614:	e00f      	b.n	8006636 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7d1b      	ldrb	r3, [r3, #20]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d006      	beq.n	800662c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8b5b      	ldrh	r3, [r3, #26]
 8006622:	f043 0310 	orr.w	r3, r3, #16
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800662c:	2101      	movs	r1, #1
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fe94 	bl	800635c <tcp_close_shutdown>
 8006634:	4603      	mov	r3, r0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	0800fc84 	.word	0x0800fc84
 8006644:	0800fd94 	.word	0x0800fd94
 8006648:	0800fcc8 	.word	0x0800fcc8

0800664c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08e      	sub	sp, #56	; 0x38
 8006650:	af04      	add	r7, sp, #16
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d107      	bne.n	800666c <tcp_abandon+0x20>
 800665c:	4b52      	ldr	r3, [pc, #328]	; (80067a8 <tcp_abandon+0x15c>)
 800665e:	f240 223d 	movw	r2, #573	; 0x23d
 8006662:	4952      	ldr	r1, [pc, #328]	; (80067ac <tcp_abandon+0x160>)
 8006664:	4852      	ldr	r0, [pc, #328]	; (80067b0 <tcp_abandon+0x164>)
 8006666:	f007 fd4b 	bl	800e100 <iprintf>
 800666a:	e099      	b.n	80067a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7d1b      	ldrb	r3, [r3, #20]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d106      	bne.n	8006682 <tcp_abandon+0x36>
 8006674:	4b4c      	ldr	r3, [pc, #304]	; (80067a8 <tcp_abandon+0x15c>)
 8006676:	f44f 7210 	mov.w	r2, #576	; 0x240
 800667a:	494e      	ldr	r1, [pc, #312]	; (80067b4 <tcp_abandon+0x168>)
 800667c:	484c      	ldr	r0, [pc, #304]	; (80067b0 <tcp_abandon+0x164>)
 800667e:	f007 fd3f 	bl	800e100 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7d1b      	ldrb	r3, [r3, #20]
 8006686:	2b0a      	cmp	r3, #10
 8006688:	d107      	bne.n	800669a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	484a      	ldr	r0, [pc, #296]	; (80067b8 <tcp_abandon+0x16c>)
 800668e:	f000 ffc3 	bl	8007618 <tcp_pcb_remove>
    tcp_free(pcb);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fdb0 	bl	80061f8 <tcp_free>
 8006698:	e082      	b.n	80067a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7d1b      	ldrb	r3, [r3, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d126      	bne.n	8006712 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8adb      	ldrh	r3, [r3, #22]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d02e      	beq.n	800672a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80066cc:	4b3b      	ldr	r3, [pc, #236]	; (80067bc <tcp_abandon+0x170>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d105      	bne.n	80066e2 <tcp_abandon+0x96>
 80066d6:	4b39      	ldr	r3, [pc, #228]	; (80067bc <tcp_abandon+0x170>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4a37      	ldr	r2, [pc, #220]	; (80067bc <tcp_abandon+0x170>)
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e013      	b.n	800670a <tcp_abandon+0xbe>
 80066e2:	4b36      	ldr	r3, [pc, #216]	; (80067bc <tcp_abandon+0x170>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e00c      	b.n	8006704 <tcp_abandon+0xb8>
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d104      	bne.n	80066fe <tcp_abandon+0xb2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	60da      	str	r2, [r3, #12]
 80066fc:	e005      	b.n	800670a <tcp_abandon+0xbe>
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ef      	bne.n	80066ea <tcp_abandon+0x9e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e00b      	b.n	800672a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8adb      	ldrh	r3, [r3, #22]
 800671a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4828      	ldr	r0, [pc, #160]	; (80067c0 <tcp_abandon+0x174>)
 8006720:	f000 ff7a 	bl	8007618 <tcp_pcb_remove>
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <tcp_abandon+0x178>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fd1c 	bl	8007174 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fd13 	bl	8007174 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fd0a 	bl	8007174 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00e      	beq.n	8006784 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3304      	adds	r3, #4
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	8b12      	ldrh	r2, [r2, #24]
 8006770:	9202      	str	r2, [sp, #8]
 8006772:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006774:	9201      	str	r2, [sp, #4]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	460b      	mov	r3, r1
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f004 fcc2 	bl	800b108 <tcp_rst>
    }
    last_state = pcb->state;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	7d1b      	ldrb	r3, [r3, #20]
 8006788:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fd34 	bl	80061f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <tcp_abandon+0x154>
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f06f 010c 	mvn.w	r1, #12
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	4798      	blx	r3
  }
}
 80067a0:	3728      	adds	r7, #40	; 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	0800fc84 	.word	0x0800fc84
 80067ac:	0800fdc8 	.word	0x0800fdc8
 80067b0:	0800fcc8 	.word	0x0800fcc8
 80067b4:	0800fde4 	.word	0x0800fde4
 80067b8:	24003148 	.word	0x24003148
 80067bc:	2400313c 	.word	0x2400313c
 80067c0:	24003144 	.word	0x24003144
 80067c4:	2400314c 	.word	0x2400314c

080067c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80067d0:	2101      	movs	r1, #1
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff3a 	bl	800664c <tcp_abandon>
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <tcp_update_rcv_ann_wnd+0x1c>
 80067ee:	4b25      	ldr	r3, [pc, #148]	; (8006884 <tcp_update_rcv_ann_wnd+0xa4>)
 80067f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80067f4:	4924      	ldr	r1, [pc, #144]	; (8006888 <tcp_update_rcv_ann_wnd+0xa8>)
 80067f6:	4825      	ldr	r0, [pc, #148]	; (800688c <tcp_update_rcv_ann_wnd+0xac>)
 80067f8:	f007 fc82 	bl	800e100 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006804:	4413      	add	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006810:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006814:	bf28      	it	cs
 8006816:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800681a:	b292      	uxth	r2, r2
 800681c:	4413      	add	r3, r2
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	db08      	blt.n	8006838 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	e020      	b.n	800687a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd03      	ble.n	800684e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800684c:	e014      	b.n	8006878 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d306      	bcc.n	8006870 <tcp_update_rcv_ann_wnd+0x90>
 8006862:	4b08      	ldr	r3, [pc, #32]	; (8006884 <tcp_update_rcv_ann_wnd+0xa4>)
 8006864:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006868:	4909      	ldr	r1, [pc, #36]	; (8006890 <tcp_update_rcv_ann_wnd+0xb0>)
 800686a:	4808      	ldr	r0, [pc, #32]	; (800688c <tcp_update_rcv_ann_wnd+0xac>)
 800686c:	f007 fc48 	bl	800e100 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	b29a      	uxth	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006878:	2300      	movs	r3, #0
  }
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	0800fc84 	.word	0x0800fc84
 8006888:	0800fee0 	.word	0x0800fee0
 800688c:	0800fcc8 	.word	0x0800fcc8
 8006890:	0800ff04 	.word	0x0800ff04

08006894 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d107      	bne.n	80068b6 <tcp_recved+0x22>
 80068a6:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <tcp_recved+0x90>)
 80068a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80068ac:	491e      	ldr	r1, [pc, #120]	; (8006928 <tcp_recved+0x94>)
 80068ae:	481f      	ldr	r0, [pc, #124]	; (800692c <tcp_recved+0x98>)
 80068b0:	f007 fc26 	bl	800e100 <iprintf>
 80068b4:	e032      	b.n	800691c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7d1b      	ldrb	r3, [r3, #20]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d106      	bne.n	80068cc <tcp_recved+0x38>
 80068be:	4b19      	ldr	r3, [pc, #100]	; (8006924 <tcp_recved+0x90>)
 80068c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80068c4:	491a      	ldr	r1, [pc, #104]	; (8006930 <tcp_recved+0x9c>)
 80068c6:	4819      	ldr	r0, [pc, #100]	; (800692c <tcp_recved+0x98>)
 80068c8:	f007 fc1a 	bl	800e100 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80068d0:	887b      	ldrh	r3, [r7, #2]
 80068d2:	4413      	add	r3, r2
 80068d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80068d6:	89fb      	ldrh	r3, [r7, #14]
 80068d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80068dc:	d804      	bhi.n	80068e8 <tcp_recved+0x54>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	89fa      	ldrh	r2, [r7, #14]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d204      	bcs.n	80068f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80068ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80068f0:	e002      	b.n	80068f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	89fa      	ldrh	r2, [r7, #14]
 80068f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff ff71 	bl	80067e0 <tcp_update_rcv_ann_wnd>
 80068fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006906:	d309      	bcc.n	800691c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8b5b      	ldrh	r3, [r3, #26]
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	b29a      	uxth	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f003 fe42 	bl	800a5a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	0800fc84 	.word	0x0800fc84
 8006928:	0800ff20 	.word	0x0800ff20
 800692c:	0800fcc8 	.word	0x0800fcc8
 8006930:	0800ff38 	.word	0x0800ff38

08006934 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006934:	b5b0      	push	{r4, r5, r7, lr}
 8006936:	b090      	sub	sp, #64	; 0x40
 8006938:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006940:	4b94      	ldr	r3, [pc, #592]	; (8006b94 <tcp_slowtmr+0x260>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	4a93      	ldr	r2, [pc, #588]	; (8006b94 <tcp_slowtmr+0x260>)
 8006948:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800694a:	4b93      	ldr	r3, [pc, #588]	; (8006b98 <tcp_slowtmr+0x264>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4b91      	ldr	r3, [pc, #580]	; (8006b98 <tcp_slowtmr+0x264>)
 8006954:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006956:	2300      	movs	r3, #0
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800695a:	4b90      	ldr	r3, [pc, #576]	; (8006b9c <tcp_slowtmr+0x268>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006960:	e29d      	b.n	8006e9e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	7d1b      	ldrb	r3, [r3, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <tcp_slowtmr+0x44>
 800696a:	4b8d      	ldr	r3, [pc, #564]	; (8006ba0 <tcp_slowtmr+0x26c>)
 800696c:	f240 42be 	movw	r2, #1214	; 0x4be
 8006970:	498c      	ldr	r1, [pc, #560]	; (8006ba4 <tcp_slowtmr+0x270>)
 8006972:	488d      	ldr	r0, [pc, #564]	; (8006ba8 <tcp_slowtmr+0x274>)
 8006974:	f007 fbc4 	bl	800e100 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	7d1b      	ldrb	r3, [r3, #20]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d106      	bne.n	800698e <tcp_slowtmr+0x5a>
 8006980:	4b87      	ldr	r3, [pc, #540]	; (8006ba0 <tcp_slowtmr+0x26c>)
 8006982:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006986:	4989      	ldr	r1, [pc, #548]	; (8006bac <tcp_slowtmr+0x278>)
 8006988:	4887      	ldr	r0, [pc, #540]	; (8006ba8 <tcp_slowtmr+0x274>)
 800698a:	f007 fbb9 	bl	800e100 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	7d1b      	ldrb	r3, [r3, #20]
 8006992:	2b0a      	cmp	r3, #10
 8006994:	d106      	bne.n	80069a4 <tcp_slowtmr+0x70>
 8006996:	4b82      	ldr	r3, [pc, #520]	; (8006ba0 <tcp_slowtmr+0x26c>)
 8006998:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800699c:	4984      	ldr	r1, [pc, #528]	; (8006bb0 <tcp_slowtmr+0x27c>)
 800699e:	4882      	ldr	r0, [pc, #520]	; (8006ba8 <tcp_slowtmr+0x274>)
 80069a0:	f007 fbae 	bl	800e100 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	7f9a      	ldrb	r2, [r3, #30]
 80069a8:	4b7b      	ldr	r3, [pc, #492]	; (8006b98 <tcp_slowtmr+0x264>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d105      	bne.n	80069bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80069ba:	e270      	b.n	8006e9e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80069bc:	4b76      	ldr	r3, [pc, #472]	; (8006b98 <tcp_slowtmr+0x264>)
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	7d1b      	ldrb	r3, [r3, #20]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d10a      	bne.n	80069ee <tcp_slowtmr+0xba>
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d905      	bls.n	80069ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80069e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069e6:	3301      	adds	r3, #1
 80069e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069ec:	e11e      	b.n	8006c2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f4:	2b0b      	cmp	r3, #11
 80069f6:	d905      	bls.n	8006a04 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80069f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fc:	3301      	adds	r3, #1
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a02:	e113      	b.n	8006c2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d075      	beq.n	8006afa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d006      	beq.n	8006a24 <tcp_slowtmr+0xf0>
 8006a16:	4b62      	ldr	r3, [pc, #392]	; (8006ba0 <tcp_slowtmr+0x26c>)
 8006a18:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006a1c:	4965      	ldr	r1, [pc, #404]	; (8006bb4 <tcp_slowtmr+0x280>)
 8006a1e:	4862      	ldr	r0, [pc, #392]	; (8006ba8 <tcp_slowtmr+0x274>)
 8006a20:	f007 fb6e 	bl	800e100 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d106      	bne.n	8006a3a <tcp_slowtmr+0x106>
 8006a2c:	4b5c      	ldr	r3, [pc, #368]	; (8006ba0 <tcp_slowtmr+0x26c>)
 8006a2e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006a32:	4961      	ldr	r1, [pc, #388]	; (8006bb8 <tcp_slowtmr+0x284>)
 8006a34:	485c      	ldr	r0, [pc, #368]	; (8006ba8 <tcp_slowtmr+0x274>)
 8006a36:	f007 fb63 	bl	800e100 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006a40:	2b0b      	cmp	r3, #11
 8006a42:	d905      	bls.n	8006a50 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a48:	3301      	adds	r3, #1
 8006a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a4e:	e0ed      	b.n	8006c2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006a56:	3b01      	subs	r3, #1
 8006a58:	4a58      	ldr	r2, [pc, #352]	; (8006bbc <tcp_slowtmr+0x288>)
 8006a5a:	5cd3      	ldrb	r3, [r2, r3]
 8006a5c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a64:	7c7a      	ldrb	r2, [r7, #17]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d907      	bls.n	8006a7a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a70:	3301      	adds	r3, #1
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a80:	7c7a      	ldrb	r2, [r7, #17]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	f200 80d2 	bhi.w	8006c2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006a88:	2301      	movs	r3, #1
 8006a8a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d108      	bne.n	8006aa8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a98:	f004 fc2a 	bl	800b2f0 <tcp_zero_window_probe>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d014      	beq.n	8006acc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	623b      	str	r3, [r7, #32]
 8006aa6:	e011      	b.n	8006acc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ab2:	f003 faef 	bl	800a094 <tcp_split_unsent_seg>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d107      	bne.n	8006acc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006abe:	f003 fd6f 	bl	800a5a0 <tcp_output>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80ac 	beq.w	8006c2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006ae2:	2b06      	cmp	r3, #6
 8006ae4:	f200 80a2 	bhi.w	8006c2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006aee:	3301      	adds	r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006af8:	e098      	b.n	8006c2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	db0f      	blt.n	8006b24 <tcp_slowtmr+0x1f0>
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006b0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d008      	beq.n	8006b24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	b21a      	sxth	r2, r3
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006b30:	429a      	cmp	r2, r3
 8006b32:	db7b      	blt.n	8006c2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b36:	f004 f825 	bl	800ab84 <tcp_rexmit_rto_prepare>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <tcp_slowtmr+0x21c>
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d171      	bne.n	8006c2c <tcp_slowtmr+0x2f8>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d06d      	beq.n	8006c2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	7d1b      	ldrb	r3, [r3, #20]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d03a      	beq.n	8006bce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b5e:	2b0c      	cmp	r3, #12
 8006b60:	bf28      	it	cs
 8006b62:	230c      	movcs	r3, #12
 8006b64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006b6c:	10db      	asrs	r3, r3, #3
 8006b6e:	b21b      	sxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006b78:	4413      	add	r3, r2
 8006b7a:	7efa      	ldrb	r2, [r7, #27]
 8006b7c:	4910      	ldr	r1, [pc, #64]	; (8006bc0 <tcp_slowtmr+0x28c>)
 8006b7e:	5c8a      	ldrb	r2, [r1, r2]
 8006b80:	4093      	lsls	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	dc1a      	bgt.n	8006bc4 <tcp_slowtmr+0x290>
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	b21a      	sxth	r2, r3
 8006b92:	e019      	b.n	8006bc8 <tcp_slowtmr+0x294>
 8006b94:	24003138 	.word	0x24003138
 8006b98:	2400314e 	.word	0x2400314e
 8006b9c:	24003144 	.word	0x24003144
 8006ba0:	0800fc84 	.word	0x0800fc84
 8006ba4:	0800ffc8 	.word	0x0800ffc8
 8006ba8:	0800fcc8 	.word	0x0800fcc8
 8006bac:	0800fff4 	.word	0x0800fff4
 8006bb0:	08010020 	.word	0x08010020
 8006bb4:	08010050 	.word	0x08010050
 8006bb8:	08010084 	.word	0x08010084
 8006bbc:	08011c54 	.word	0x08011c54
 8006bc0:	08011c44 	.word	0x08011c44
 8006bc4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006be0:	4293      	cmp	r3, r2
 8006be2:	bf28      	it	cs
 8006be4:	4613      	movcs	r3, r2
 8006be6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006be8:	8a7b      	ldrh	r3, [r7, #18]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d206      	bcs.n	8006c14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c28:	f004 f81c 	bl	800ac64 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	7d1b      	ldrb	r3, [r3, #20]
 8006c30:	2b06      	cmp	r3, #6
 8006c32:	d111      	bne.n	8006c58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	8b5b      	ldrh	r3, [r3, #26]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c40:	4b9c      	ldr	r3, [pc, #624]	; (8006eb4 <tcp_slowtmr+0x580>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b28      	cmp	r3, #40	; 0x28
 8006c4c:	d904      	bls.n	8006c58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006c4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c52:	3301      	adds	r3, #1
 8006c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	7a5b      	ldrb	r3, [r3, #9]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d04a      	beq.n	8006cfa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d003      	beq.n	8006c74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006c70:	2b07      	cmp	r3, #7
 8006c72:	d142      	bne.n	8006cfa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c74:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <tcp_slowtmr+0x580>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006c84:	4b8c      	ldr	r3, [pc, #560]	; (8006eb8 <tcp_slowtmr+0x584>)
 8006c86:	440b      	add	r3, r1
 8006c88:	498c      	ldr	r1, [pc, #560]	; (8006ebc <tcp_slowtmr+0x588>)
 8006c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d90a      	bls.n	8006caa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006ca8:	e027      	b.n	8006cfa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006caa:	4b82      	ldr	r3, [pc, #520]	; (8006eb4 <tcp_slowtmr+0x580>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	4b7f      	ldr	r3, [pc, #508]	; (8006ec0 <tcp_slowtmr+0x58c>)
 8006cc4:	fb00 f303 	mul.w	r3, r0, r3
 8006cc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006cca:	497c      	ldr	r1, [pc, #496]	; (8006ebc <tcp_slowtmr+0x588>)
 8006ccc:	fba1 1303 	umull	r1, r3, r1, r3
 8006cd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d911      	bls.n	8006cfa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8006cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cd8:	f004 faca 	bl	800b270 <tcp_keepalive>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006ce2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d107      	bne.n	8006cfa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d011      	beq.n	8006d26 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006d02:	4b6c      	ldr	r3, [pc, #432]	; (8006eb4 <tcp_slowtmr+0x580>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006d12:	4619      	mov	r1, r3
 8006d14:	460b      	mov	r3, r1
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	440b      	add	r3, r1
 8006d1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d302      	bcc.n	8006d26 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d22:	f000 fddd 	bl	80078e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	7d1b      	ldrb	r3, [r3, #20]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d10b      	bne.n	8006d46 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d2e:	4b61      	ldr	r3, [pc, #388]	; (8006eb4 <tcp_slowtmr+0x580>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b28      	cmp	r3, #40	; 0x28
 8006d3a:	d904      	bls.n	8006d46 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d40:	3301      	adds	r3, #1
 8006d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	7d1b      	ldrb	r3, [r3, #20]
 8006d4a:	2b09      	cmp	r3, #9
 8006d4c:	d10b      	bne.n	8006d66 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006d4e:	4b59      	ldr	r3, [pc, #356]	; (8006eb4 <tcp_slowtmr+0x580>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2bf0      	cmp	r3, #240	; 0xf0
 8006d5a:	d904      	bls.n	8006d66 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d60:	3301      	adds	r3, #1
 8006d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d060      	beq.n	8006e30 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d74:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d78:	f000 fbfe 	bl	8007578 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d010      	beq.n	8006da4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006d82:	4b50      	ldr	r3, [pc, #320]	; (8006ec4 <tcp_slowtmr+0x590>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d106      	bne.n	8006d9a <tcp_slowtmr+0x466>
 8006d8c:	4b4e      	ldr	r3, [pc, #312]	; (8006ec8 <tcp_slowtmr+0x594>)
 8006d8e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006d92:	494e      	ldr	r1, [pc, #312]	; (8006ecc <tcp_slowtmr+0x598>)
 8006d94:	484e      	ldr	r0, [pc, #312]	; (8006ed0 <tcp_slowtmr+0x59c>)
 8006d96:	f007 f9b3 	bl	800e100 <iprintf>
        prev->next = pcb->next;
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	60da      	str	r2, [r3, #12]
 8006da2:	e00f      	b.n	8006dc4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006da4:	4b47      	ldr	r3, [pc, #284]	; (8006ec4 <tcp_slowtmr+0x590>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d006      	beq.n	8006dbc <tcp_slowtmr+0x488>
 8006dae:	4b46      	ldr	r3, [pc, #280]	; (8006ec8 <tcp_slowtmr+0x594>)
 8006db0:	f240 5271 	movw	r2, #1393	; 0x571
 8006db4:	4947      	ldr	r1, [pc, #284]	; (8006ed4 <tcp_slowtmr+0x5a0>)
 8006db6:	4846      	ldr	r0, [pc, #280]	; (8006ed0 <tcp_slowtmr+0x59c>)
 8006db8:	f007 f9a2 	bl	800e100 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	4a40      	ldr	r2, [pc, #256]	; (8006ec4 <tcp_slowtmr+0x590>)
 8006dc2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d013      	beq.n	8006df4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006dd4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	3304      	adds	r3, #4
 8006dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ddc:	8ad2      	ldrh	r2, [r2, #22]
 8006dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de0:	8b09      	ldrh	r1, [r1, #24]
 8006de2:	9102      	str	r1, [sp, #8]
 8006de4:	9201      	str	r2, [sp, #4]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	462b      	mov	r3, r5
 8006dea:	4622      	mov	r2, r4
 8006dec:	4601      	mov	r1, r0
 8006dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006df0:	f004 f98a 	bl	800b108 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	7d1b      	ldrb	r3, [r3, #20]
 8006dfe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006e0a:	6838      	ldr	r0, [r7, #0]
 8006e0c:	f7ff f9f4 	bl	80061f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006e10:	4b31      	ldr	r3, [pc, #196]	; (8006ed8 <tcp_slowtmr+0x5a4>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <tcp_slowtmr+0x4f2>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f06f 010c 	mvn.w	r1, #12
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006e26:	4b2c      	ldr	r3, [pc, #176]	; (8006ed8 <tcp_slowtmr+0x5a4>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d037      	beq.n	8006e9e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8006e2e:	e592      	b.n	8006956 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	7f1b      	ldrb	r3, [r3, #28]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	7f1a      	ldrb	r2, [r3, #28]
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	7f5b      	ldrb	r3, [r3, #29]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d325      	bcc.n	8006e9e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	2200      	movs	r2, #0
 8006e56:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006e58:	4b1f      	ldr	r3, [pc, #124]	; (8006ed8 <tcp_slowtmr+0x5a4>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00b      	beq.n	8006e80 <tcp_slowtmr+0x54c>
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e70:	6912      	ldr	r2, [r2, #16]
 8006e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006e7e:	e002      	b.n	8006e86 <tcp_slowtmr+0x552>
 8006e80:	2300      	movs	r3, #0
 8006e82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <tcp_slowtmr+0x5a4>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d000      	beq.n	8006e90 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8006e8e:	e562      	b.n	8006956 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006e90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8006e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9a:	f003 fb81 	bl	800a5a0 <tcp_output>
  while (pcb != NULL) {
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f47f ad5e 	bne.w	8006962 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <tcp_slowtmr+0x5a8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006eb0:	e069      	b.n	8006f86 <tcp_slowtmr+0x652>
 8006eb2:	bf00      	nop
 8006eb4:	24003138 	.word	0x24003138
 8006eb8:	000a4cb8 	.word	0x000a4cb8
 8006ebc:	10624dd3 	.word	0x10624dd3
 8006ec0:	000124f8 	.word	0x000124f8
 8006ec4:	24003144 	.word	0x24003144
 8006ec8:	0800fc84 	.word	0x0800fc84
 8006ecc:	080100bc 	.word	0x080100bc
 8006ed0:	0800fcc8 	.word	0x0800fcc8
 8006ed4:	080100e8 	.word	0x080100e8
 8006ed8:	2400314c 	.word	0x2400314c
 8006edc:	24003148 	.word	0x24003148
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	7d1b      	ldrb	r3, [r3, #20]
 8006ee4:	2b0a      	cmp	r3, #10
 8006ee6:	d006      	beq.n	8006ef6 <tcp_slowtmr+0x5c2>
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	; (8006f98 <tcp_slowtmr+0x664>)
 8006eea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006eee:	492b      	ldr	r1, [pc, #172]	; (8006f9c <tcp_slowtmr+0x668>)
 8006ef0:	482b      	ldr	r0, [pc, #172]	; (8006fa0 <tcp_slowtmr+0x66c>)
 8006ef2:	f007 f905 	bl	800e100 <iprintf>
    pcb_remove = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <tcp_slowtmr+0x670>)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2bf0      	cmp	r3, #240	; 0xf0
 8006f08:	d904      	bls.n	8006f14 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02f      	beq.n	8006f7c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f1e:	f000 fb2b 	bl	8007578 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d010      	beq.n	8006f4a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006f28:	4b1f      	ldr	r3, [pc, #124]	; (8006fa8 <tcp_slowtmr+0x674>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d106      	bne.n	8006f40 <tcp_slowtmr+0x60c>
 8006f32:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <tcp_slowtmr+0x664>)
 8006f34:	f240 52af 	movw	r2, #1455	; 0x5af
 8006f38:	491c      	ldr	r1, [pc, #112]	; (8006fac <tcp_slowtmr+0x678>)
 8006f3a:	4819      	ldr	r0, [pc, #100]	; (8006fa0 <tcp_slowtmr+0x66c>)
 8006f3c:	f007 f8e0 	bl	800e100 <iprintf>
        prev->next = pcb->next;
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	60da      	str	r2, [r3, #12]
 8006f48:	e00f      	b.n	8006f6a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006f4a:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <tcp_slowtmr+0x674>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d006      	beq.n	8006f62 <tcp_slowtmr+0x62e>
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <tcp_slowtmr+0x664>)
 8006f56:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006f5a:	4915      	ldr	r1, [pc, #84]	; (8006fb0 <tcp_slowtmr+0x67c>)
 8006f5c:	4810      	ldr	r0, [pc, #64]	; (8006fa0 <tcp_slowtmr+0x66c>)
 8006f5e:	f007 f8cf 	bl	800e100 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	4a10      	ldr	r2, [pc, #64]	; (8006fa8 <tcp_slowtmr+0x674>)
 8006f68:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006f74:	69f8      	ldr	r0, [r7, #28]
 8006f76:	f7ff f93f 	bl	80061f8 <tcp_free>
 8006f7a:	e004      	b.n	8006f86 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1a9      	bne.n	8006ee0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	3730      	adds	r7, #48	; 0x30
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bdb0      	pop	{r4, r5, r7, pc}
 8006f96:	bf00      	nop
 8006f98:	0800fc84 	.word	0x0800fc84
 8006f9c:	08010114 	.word	0x08010114
 8006fa0:	0800fcc8 	.word	0x0800fcc8
 8006fa4:	24003138 	.word	0x24003138
 8006fa8:	24003148 	.word	0x24003148
 8006fac:	08010144 	.word	0x08010144
 8006fb0:	0801016c 	.word	0x0801016c

08006fb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006fba:	4b2d      	ldr	r3, [pc, #180]	; (8007070 <tcp_fasttmr+0xbc>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <tcp_fasttmr+0xbc>)
 8006fc4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006fc6:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <tcp_fasttmr+0xc0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006fcc:	e048      	b.n	8007060 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7f9a      	ldrb	r2, [r3, #30]
 8006fd2:	4b27      	ldr	r3, [pc, #156]	; (8007070 <tcp_fasttmr+0xbc>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d03f      	beq.n	800705a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006fda:	4b25      	ldr	r3, [pc, #148]	; (8007070 <tcp_fasttmr+0xbc>)
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8b5b      	ldrh	r3, [r3, #26]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d010      	beq.n	8007010 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8b5b      	ldrh	r3, [r3, #26]
 8006ff2:	f043 0302 	orr.w	r3, r3, #2
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f003 facf 	bl	800a5a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8b5b      	ldrh	r3, [r3, #26]
 8007006:	f023 0303 	bic.w	r3, r3, #3
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8b5b      	ldrh	r3, [r3, #26]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8b5b      	ldrh	r3, [r3, #26]
 8007020:	f023 0308 	bic.w	r3, r3, #8
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fa78 	bl	8006520 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <tcp_fasttmr+0xc4>)
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f819 	bl	800707c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <tcp_fasttmr+0xc4>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d000      	beq.n	8007054 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007052:	e7b8      	b.n	8006fc6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	607b      	str	r3, [r7, #4]
 8007058:	e002      	b.n	8007060 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1b3      	bne.n	8006fce <tcp_fasttmr+0x1a>
    }
  }
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	2400314e 	.word	0x2400314e
 8007074:	24003144 	.word	0x24003144
 8007078:	2400314c 	.word	0x2400314c

0800707c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800707c:	b590      	push	{r4, r7, lr}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <tcp_process_refused_data+0x22>
 800708a:	4b37      	ldr	r3, [pc, #220]	; (8007168 <tcp_process_refused_data+0xec>)
 800708c:	f240 6209 	movw	r2, #1545	; 0x609
 8007090:	4936      	ldr	r1, [pc, #216]	; (800716c <tcp_process_refused_data+0xf0>)
 8007092:	4837      	ldr	r0, [pc, #220]	; (8007170 <tcp_process_refused_data+0xf4>)
 8007094:	f007 f834 	bl	800e100 <iprintf>
 8007098:	f06f 030f 	mvn.w	r3, #15
 800709c:	e060      	b.n	8007160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070a2:	7b5b      	ldrb	r3, [r3, #13]
 80070a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <tcp_process_refused_data+0x58>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6918      	ldr	r0, [r3, #16]
 80070c6:	2300      	movs	r3, #0
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	47a0      	blx	r4
 80070ce:	4603      	mov	r3, r0
 80070d0:	73fb      	strb	r3, [r7, #15]
 80070d2:	e007      	b.n	80070e4 <tcp_process_refused_data+0x68>
 80070d4:	2300      	movs	r3, #0
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	2000      	movs	r0, #0
 80070dc:	f000 f8a4 	bl	8007228 <tcp_recv_null>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80070e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d12a      	bne.n	8007142 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d033      	beq.n	800715e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80070fe:	d005      	beq.n	800710c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007104:	3301      	adds	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <tcp_process_refused_data+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6918      	ldr	r0, [r3, #16]
 8007120:	2300      	movs	r3, #0
 8007122:	2200      	movs	r2, #0
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	47a0      	blx	r4
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
 800712c:	e001      	b.n	8007132 <tcp_process_refused_data+0xb6>
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007136:	f113 0f0d 	cmn.w	r3, #13
 800713a:	d110      	bne.n	800715e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800713c:	f06f 030c 	mvn.w	r3, #12
 8007140:	e00e      	b.n	8007160 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	f113 0f0d 	cmn.w	r3, #13
 800714a:	d102      	bne.n	8007152 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800714c:	f06f 030c 	mvn.w	r3, #12
 8007150:	e006      	b.n	8007160 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007158:	f06f 0304 	mvn.w	r3, #4
 800715c:	e000      	b.n	8007160 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	0800fc84 	.word	0x0800fc84
 800716c:	08010194 	.word	0x08010194
 8007170:	0800fcc8 	.word	0x0800fcc8

08007174 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800717c:	e007      	b.n	800718e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f80a 	bl	800719e <tcp_seg_free>
    seg = next;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f4      	bne.n	800717e <tcp_segs_free+0xa>
  }
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00c      	beq.n	80071c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fd7d 	bl	8005cb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	2003      	movs	r0, #3
 80071c2:	f7fd ff03 	bl	8004fcc <memp_free>
  }
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <tcp_seg_copy+0x1c>
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <tcp_seg_copy+0x4c>)
 80071e0:	f240 6282 	movw	r2, #1666	; 0x682
 80071e4:	490e      	ldr	r1, [pc, #56]	; (8007220 <tcp_seg_copy+0x50>)
 80071e6:	480f      	ldr	r0, [pc, #60]	; (8007224 <tcp_seg_copy+0x54>)
 80071e8:	f006 ff8a 	bl	800e100 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80071ec:	2003      	movs	r0, #3
 80071ee:	f7fd fe7d 	bl	8004eec <memp_malloc>
 80071f2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <tcp_seg_copy+0x2e>
    return NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e00a      	b.n	8007214 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80071fe:	2210      	movs	r2, #16
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f006 ff66 	bl	800e0d4 <memcpy>
  pbuf_ref(cseg->p);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fdf3 	bl	8005df8 <pbuf_ref>
  return cseg;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	0800fc84 	.word	0x0800fc84
 8007220:	080101d8 	.word	0x080101d8
 8007224:	0800fcc8 	.word	0x0800fcc8

08007228 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <tcp_recv_null+0x28>
 800723c:	4b12      	ldr	r3, [pc, #72]	; (8007288 <tcp_recv_null+0x60>)
 800723e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007242:	4912      	ldr	r1, [pc, #72]	; (800728c <tcp_recv_null+0x64>)
 8007244:	4812      	ldr	r0, [pc, #72]	; (8007290 <tcp_recv_null+0x68>)
 8007246:	f006 ff5b 	bl	800e100 <iprintf>
 800724a:	f06f 030f 	mvn.w	r3, #15
 800724e:	e016      	b.n	800727e <tcp_recv_null+0x56>

  if (p != NULL) {
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	891b      	ldrh	r3, [r3, #8]
 800725a:	4619      	mov	r1, r3
 800725c:	68b8      	ldr	r0, [r7, #8]
 800725e:	f7ff fb19 	bl	8006894 <tcp_recved>
    pbuf_free(p);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe fd28 	bl	8005cb8 <pbuf_free>
 8007268:	e008      	b.n	800727c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800726a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d104      	bne.n	800727c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007272:	68b8      	ldr	r0, [r7, #8]
 8007274:	f7ff f9be 	bl	80065f4 <tcp_close>
 8007278:	4603      	mov	r3, r0
 800727a:	e000      	b.n	800727e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	0800fc84 	.word	0x0800fc84
 800728c:	080101f4 	.word	0x080101f4
 8007290:	0800fcc8 	.word	0x0800fcc8

08007294 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800729e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	db01      	blt.n	80072aa <tcp_kill_prio+0x16>
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	e000      	b.n	80072ac <tcp_kill_prio+0x18>
 80072aa:	237f      	movs	r3, #127	; 0x7f
 80072ac:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d034      	beq.n	800731e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072c2:	4b19      	ldr	r3, [pc, #100]	; (8007328 <tcp_kill_prio+0x94>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e01f      	b.n	800730a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	7d5b      	ldrb	r3, [r3, #21]
 80072ce:	7afa      	ldrb	r2, [r7, #11]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d80c      	bhi.n	80072ee <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80072d8:	7afa      	ldrb	r2, [r7, #11]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d112      	bne.n	8007304 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <tcp_kill_prio+0x98>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d80a      	bhi.n	8007304 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <tcp_kill_prio+0x98>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	7d5b      	ldrb	r3, [r3, #21]
 8007302:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1dc      	bne.n	80072ca <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007316:	6938      	ldr	r0, [r7, #16]
 8007318:	f7ff fa56 	bl	80067c8 <tcp_abort>
 800731c:	e000      	b.n	8007320 <tcp_kill_prio+0x8c>
    return;
 800731e:	bf00      	nop
  }
}
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	24003144 	.word	0x24003144
 800732c:	24003138 	.word	0x24003138

08007330 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	2b08      	cmp	r3, #8
 800733e:	d009      	beq.n	8007354 <tcp_kill_state+0x24>
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	2b09      	cmp	r3, #9
 8007344:	d006      	beq.n	8007354 <tcp_kill_state+0x24>
 8007346:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <tcp_kill_state+0x80>)
 8007348:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800734c:	4919      	ldr	r1, [pc, #100]	; (80073b4 <tcp_kill_state+0x84>)
 800734e:	481a      	ldr	r0, [pc, #104]	; (80073b8 <tcp_kill_state+0x88>)
 8007350:	f006 fed6 	bl	800e100 <iprintf>

  inactivity = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800735c:	4b17      	ldr	r3, [pc, #92]	; (80073bc <tcp_kill_state+0x8c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e017      	b.n	8007394 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	7d1b      	ldrb	r3, [r3, #20]
 8007368:	79fa      	ldrb	r2, [r7, #7]
 800736a:	429a      	cmp	r2, r3
 800736c:	d10f      	bne.n	800738e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800736e:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <tcp_kill_state+0x90>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	d807      	bhi.n	800738e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800737e:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <tcp_kill_state+0x90>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e4      	bne.n	8007364 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80073a0:	2100      	movs	r1, #0
 80073a2:	6938      	ldr	r0, [r7, #16]
 80073a4:	f7ff f952 	bl	800664c <tcp_abandon>
  }
}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	0800fc84 	.word	0x0800fc84
 80073b4:	08010210 	.word	0x08010210
 80073b8:	0800fcc8 	.word	0x0800fcc8
 80073bc:	24003144 	.word	0x24003144
 80073c0:	24003138 	.word	0x24003138

080073c4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073d2:	4b12      	ldr	r3, [pc, #72]	; (800741c <tcp_kill_timewait+0x58>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e012      	b.n	8007400 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073da:	4b11      	ldr	r3, [pc, #68]	; (8007420 <tcp_kill_timewait+0x5c>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d807      	bhi.n	80073fa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <tcp_kill_timewait+0x5c>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e9      	bne.n	80073da <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800740c:	68b8      	ldr	r0, [r7, #8]
 800740e:	f7ff f9db 	bl	80067c8 <tcp_abort>
  }
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	24003148 	.word	0x24003148
 8007420:	24003138 	.word	0x24003138

08007424 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800742a:	4b10      	ldr	r3, [pc, #64]	; (800746c <tcp_handle_closepend+0x48>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007430:	e014      	b.n	800745c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8b5b      	ldrh	r3, [r3, #26]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d009      	beq.n	8007458 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8b5b      	ldrh	r3, [r3, #26]
 8007448:	f023 0308 	bic.w	r3, r3, #8
 800744c:	b29a      	uxth	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff f864 	bl	8006520 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e7      	bne.n	8007432 <tcp_handle_closepend+0xe>
  }
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	24003144 	.word	0x24003144

08007470 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800747a:	2001      	movs	r0, #1
 800747c:	f7fd fd36 	bl	8004eec <memp_malloc>
 8007480:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d126      	bne.n	80074d6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007488:	f7ff ffcc 	bl	8007424 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800748c:	f7ff ff9a 	bl	80073c4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007490:	2001      	movs	r0, #1
 8007492:	f7fd fd2b 	bl	8004eec <memp_malloc>
 8007496:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d11b      	bne.n	80074d6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800749e:	2009      	movs	r0, #9
 80074a0:	f7ff ff46 	bl	8007330 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074a4:	2001      	movs	r0, #1
 80074a6:	f7fd fd21 	bl	8004eec <memp_malloc>
 80074aa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d111      	bne.n	80074d6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80074b2:	2008      	movs	r0, #8
 80074b4:	f7ff ff3c 	bl	8007330 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074b8:	2001      	movs	r0, #1
 80074ba:	f7fd fd17 	bl	8004eec <memp_malloc>
 80074be:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d107      	bne.n	80074d6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fee3 	bl	8007294 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80074ce:	2001      	movs	r0, #1
 80074d0:	f7fd fd0c 	bl	8004eec <memp_malloc>
 80074d4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d03f      	beq.n	800755c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80074dc:	229c      	movs	r2, #156	; 0x9c
 80074de:	2100      	movs	r1, #0
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f006 fe05 	bl	800e0f0 <memset>
    pcb->prio = prio;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	79fa      	ldrb	r2, [r7, #7]
 80074ea:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80074f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80074fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007512:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2206      	movs	r2, #6
 8007518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2206      	movs	r2, #6
 8007520:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007528:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <tcp_alloc+0xf8>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <tcp_alloc+0xfc>)
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007548:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4a08      	ldr	r2, [pc, #32]	; (8007570 <tcp_alloc+0x100>)
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a07      	ldr	r2, [pc, #28]	; (8007574 <tcp_alloc+0x104>)
 8007558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800755c:	68fb      	ldr	r3, [r7, #12]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	24003138 	.word	0x24003138
 800756c:	2400314e 	.word	0x2400314e
 8007570:	08007229 	.word	0x08007229
 8007574:	006ddd00 	.word	0x006ddd00

08007578 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <tcp_pcb_purge+0x1e>
 8007586:	4b21      	ldr	r3, [pc, #132]	; (800760c <tcp_pcb_purge+0x94>)
 8007588:	f640 0251 	movw	r2, #2129	; 0x851
 800758c:	4920      	ldr	r1, [pc, #128]	; (8007610 <tcp_pcb_purge+0x98>)
 800758e:	4821      	ldr	r0, [pc, #132]	; (8007614 <tcp_pcb_purge+0x9c>)
 8007590:	f006 fdb6 	bl	800e100 <iprintf>
 8007594:	e037      	b.n	8007606 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	7d1b      	ldrb	r3, [r3, #20]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d033      	beq.n	8007606 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80075a2:	2b0a      	cmp	r3, #10
 80075a4:	d02f      	beq.n	8007606 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d02b      	beq.n	8007606 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fb7c 	bl	8005cb8 <pbuf_free>
      pcb->refused_data = NULL;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f986 	bl	80078e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fdc7 	bl	8007174 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fdc2 	bl	8007174 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	0800fc84 	.word	0x0800fc84
 8007610:	080102d0 	.word	0x080102d0
 8007614:	0800fcc8 	.word	0x0800fcc8

08007618 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <tcp_pcb_remove+0x1e>
 8007628:	4b3e      	ldr	r3, [pc, #248]	; (8007724 <tcp_pcb_remove+0x10c>)
 800762a:	f640 0283 	movw	r2, #2179	; 0x883
 800762e:	493e      	ldr	r1, [pc, #248]	; (8007728 <tcp_pcb_remove+0x110>)
 8007630:	483e      	ldr	r0, [pc, #248]	; (800772c <tcp_pcb_remove+0x114>)
 8007632:	f006 fd65 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <tcp_pcb_remove+0x32>
 800763c:	4b39      	ldr	r3, [pc, #228]	; (8007724 <tcp_pcb_remove+0x10c>)
 800763e:	f640 0284 	movw	r2, #2180	; 0x884
 8007642:	493b      	ldr	r1, [pc, #236]	; (8007730 <tcp_pcb_remove+0x118>)
 8007644:	4839      	ldr	r0, [pc, #228]	; (800772c <tcp_pcb_remove+0x114>)
 8007646:	f006 fd5b 	bl	800e100 <iprintf>

  TCP_RMV(pcblist, pcb);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d105      	bne.n	8007660 <tcp_pcb_remove+0x48>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e013      	b.n	8007688 <tcp_pcb_remove+0x70>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	e00c      	b.n	8007682 <tcp_pcb_remove+0x6a>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d104      	bne.n	800767c <tcp_pcb_remove+0x64>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	e005      	b.n	8007688 <tcp_pcb_remove+0x70>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ef      	bne.n	8007668 <tcp_pcb_remove+0x50>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800768e:	6838      	ldr	r0, [r7, #0]
 8007690:	f7ff ff72 	bl	8007578 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	7d1b      	ldrb	r3, [r3, #20]
 8007698:	2b0a      	cmp	r3, #10
 800769a:	d013      	beq.n	80076c4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d00f      	beq.n	80076c4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	8b5b      	ldrh	r3, [r3, #26]
 80076a8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d009      	beq.n	80076c4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	8b5b      	ldrh	r3, [r3, #26]
 80076b4:	f043 0302 	orr.w	r3, r3, #2
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80076be:	6838      	ldr	r0, [r7, #0]
 80076c0:	f002 ff6e 	bl	800a5a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	7d1b      	ldrb	r3, [r3, #20]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d020      	beq.n	800770e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <tcp_pcb_remove+0xca>
 80076d4:	4b13      	ldr	r3, [pc, #76]	; (8007724 <tcp_pcb_remove+0x10c>)
 80076d6:	f640 0293 	movw	r2, #2195	; 0x893
 80076da:	4916      	ldr	r1, [pc, #88]	; (8007734 <tcp_pcb_remove+0x11c>)
 80076dc:	4813      	ldr	r0, [pc, #76]	; (800772c <tcp_pcb_remove+0x114>)
 80076de:	f006 fd0f 	bl	800e100 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d006      	beq.n	80076f8 <tcp_pcb_remove+0xe0>
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <tcp_pcb_remove+0x10c>)
 80076ec:	f640 0294 	movw	r2, #2196	; 0x894
 80076f0:	4911      	ldr	r1, [pc, #68]	; (8007738 <tcp_pcb_remove+0x120>)
 80076f2:	480e      	ldr	r0, [pc, #56]	; (800772c <tcp_pcb_remove+0x114>)
 80076f4:	f006 fd04 	bl	800e100 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d006      	beq.n	800770e <tcp_pcb_remove+0xf6>
 8007700:	4b08      	ldr	r3, [pc, #32]	; (8007724 <tcp_pcb_remove+0x10c>)
 8007702:	f640 0296 	movw	r2, #2198	; 0x896
 8007706:	490d      	ldr	r1, [pc, #52]	; (800773c <tcp_pcb_remove+0x124>)
 8007708:	4808      	ldr	r0, [pc, #32]	; (800772c <tcp_pcb_remove+0x114>)
 800770a:	f006 fcf9 	bl	800e100 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2200      	movs	r2, #0
 8007718:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	0800fc84 	.word	0x0800fc84
 8007728:	080102ec 	.word	0x080102ec
 800772c:	0800fcc8 	.word	0x0800fcc8
 8007730:	08010308 	.word	0x08010308
 8007734:	08010328 	.word	0x08010328
 8007738:	08010340 	.word	0x08010340
 800773c:	0801035c 	.word	0x0801035c

08007740 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <tcp_next_iss+0x1c>
 800774e:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <tcp_next_iss+0x38>)
 8007750:	f640 02af 	movw	r2, #2223	; 0x8af
 8007754:	4909      	ldr	r1, [pc, #36]	; (800777c <tcp_next_iss+0x3c>)
 8007756:	480a      	ldr	r0, [pc, #40]	; (8007780 <tcp_next_iss+0x40>)
 8007758:	f006 fcd2 	bl	800e100 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <tcp_next_iss+0x44>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <tcp_next_iss+0x48>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4413      	add	r3, r2
 8007766:	4a07      	ldr	r2, [pc, #28]	; (8007784 <tcp_next_iss+0x44>)
 8007768:	6013      	str	r3, [r2, #0]
  return iss;
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <tcp_next_iss+0x44>)
 800776c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	0800fc84 	.word	0x0800fc84
 800777c:	08010374 	.word	0x08010374
 8007780:	0800fcc8 	.word	0x0800fcc8
 8007784:	24000028 	.word	0x24000028
 8007788:	24003138 	.word	0x24003138

0800778c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <tcp_eff_send_mss_netif+0x22>
 80077a0:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <tcp_eff_send_mss_netif+0x68>)
 80077a2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80077a6:	4914      	ldr	r1, [pc, #80]	; (80077f8 <tcp_eff_send_mss_netif+0x6c>)
 80077a8:	4814      	ldr	r0, [pc, #80]	; (80077fc <tcp_eff_send_mss_netif+0x70>)
 80077aa:	f006 fca9 	bl	800e100 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80077b4:	89fb      	ldrh	r3, [r7, #14]
 80077b6:	e019      	b.n	80077ec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80077be:	8afb      	ldrh	r3, [r7, #22]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d012      	beq.n	80077ea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80077c4:	2328      	movs	r3, #40	; 0x28
 80077c6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80077c8:	8afa      	ldrh	r2, [r7, #22]
 80077ca:	8abb      	ldrh	r3, [r7, #20]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d904      	bls.n	80077da <tcp_eff_send_mss_netif+0x4e>
 80077d0:	8afa      	ldrh	r2, [r7, #22]
 80077d2:	8abb      	ldrh	r3, [r7, #20]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	e000      	b.n	80077dc <tcp_eff_send_mss_netif+0x50>
 80077da:	2300      	movs	r3, #0
 80077dc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80077de:	8a7a      	ldrh	r2, [r7, #18]
 80077e0:	89fb      	ldrh	r3, [r7, #14]
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bf28      	it	cs
 80077e6:	4613      	movcs	r3, r2
 80077e8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80077ea:	89fb      	ldrh	r3, [r7, #14]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	0800fc84 	.word	0x0800fc84
 80077f8:	08010390 	.word	0x08010390
 80077fc:	0800fcc8 	.word	0x0800fcc8

08007800 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d119      	bne.n	8007848 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007814:	4b10      	ldr	r3, [pc, #64]	; (8007858 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007816:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800781a:	4910      	ldr	r1, [pc, #64]	; (800785c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800781c:	4810      	ldr	r0, [pc, #64]	; (8007860 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800781e:	f006 fc6f 	bl	800e100 <iprintf>

  while (pcb != NULL) {
 8007822:	e011      	b.n	8007848 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d108      	bne.n	8007842 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7fe ffc6 	bl	80067c8 <tcp_abort>
      pcb = next;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e002      	b.n	8007848 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1ea      	bne.n	8007824 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	0800fc84 	.word	0x0800fc84
 800785c:	080103b8 	.word	0x080103b8
 8007860:	0800fcc8 	.word	0x0800fcc8

08007864 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d02a      	beq.n	80078ca <tcp_netif_ip_addr_changed+0x66>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d026      	beq.n	80078ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800787c:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <tcp_netif_ip_addr_changed+0x70>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff ffbc 	bl	8007800 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007888:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <tcp_netif_ip_addr_changed+0x74>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ffb6 	bl	8007800 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d017      	beq.n	80078ca <tcp_netif_ip_addr_changed+0x66>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d013      	beq.n	80078ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <tcp_netif_ip_addr_changed+0x78>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e00c      	b.n	80078c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d103      	bne.n	80078be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1ef      	bne.n	80078aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80078ca:	bf00      	nop
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	24003144 	.word	0x24003144
 80078d8:	2400313c 	.word	0x2400313c
 80078dc:	24003140 	.word	0x24003140

080078e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d007      	beq.n	8007900 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fc3d 	bl	8007174 <tcp_segs_free>
    pcb->ooseq = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b08d      	sub	sp, #52	; 0x34
 800790c:	af04      	add	r7, sp, #16
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <tcp_input+0x1c>
 8007918:	4b9b      	ldr	r3, [pc, #620]	; (8007b88 <tcp_input+0x280>)
 800791a:	2283      	movs	r2, #131	; 0x83
 800791c:	499b      	ldr	r1, [pc, #620]	; (8007b8c <tcp_input+0x284>)
 800791e:	489c      	ldr	r0, [pc, #624]	; (8007b90 <tcp_input+0x288>)
 8007920:	f006 fbee 	bl	800e100 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4a9a      	ldr	r2, [pc, #616]	; (8007b94 <tcp_input+0x28c>)
 800792a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	895b      	ldrh	r3, [r3, #10]
 8007930:	2b13      	cmp	r3, #19
 8007932:	f240 83d1 	bls.w	80080d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007936:	4b98      	ldr	r3, [pc, #608]	; (8007b98 <tcp_input+0x290>)
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	4a97      	ldr	r2, [pc, #604]	; (8007b98 <tcp_input+0x290>)
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f005 fc3d 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	f040 83c7 	bne.w	80080dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800794e:	4b92      	ldr	r3, [pc, #584]	; (8007b98 <tcp_input+0x290>)
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007956:	2be0      	cmp	r3, #224	; 0xe0
 8007958:	f000 83c0 	beq.w	80080dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800795c:	4b8d      	ldr	r3, [pc, #564]	; (8007b94 <tcp_input+0x28c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	899b      	ldrh	r3, [r3, #12]
 8007962:	b29b      	uxth	r3, r3
 8007964:	4618      	mov	r0, r3
 8007966:	f7fc fd91 	bl	800448c <lwip_htons>
 800796a:	4603      	mov	r3, r0
 800796c:	0b1b      	lsrs	r3, r3, #12
 800796e:	b29b      	uxth	r3, r3
 8007970:	b2db      	uxtb	r3, r3
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007976:	7cbb      	ldrb	r3, [r7, #18]
 8007978:	2b13      	cmp	r3, #19
 800797a:	f240 83b1 	bls.w	80080e0 <tcp_input+0x7d8>
 800797e:	7cbb      	ldrb	r3, [r7, #18]
 8007980:	b29a      	uxth	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	891b      	ldrh	r3, [r3, #8]
 8007986:	429a      	cmp	r2, r3
 8007988:	f200 83aa 	bhi.w	80080e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800798c:	7cbb      	ldrb	r3, [r7, #18]
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b14      	subs	r3, #20
 8007992:	b29a      	uxth	r2, r3
 8007994:	4b81      	ldr	r3, [pc, #516]	; (8007b9c <tcp_input+0x294>)
 8007996:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007998:	4b81      	ldr	r3, [pc, #516]	; (8007ba0 <tcp_input+0x298>)
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	895a      	ldrh	r2, [r3, #10]
 80079a2:	7cbb      	ldrb	r3, [r7, #18]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d309      	bcc.n	80079be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80079aa:	4b7c      	ldr	r3, [pc, #496]	; (8007b9c <tcp_input+0x294>)
 80079ac:	881a      	ldrh	r2, [r3, #0]
 80079ae:	4b7d      	ldr	r3, [pc, #500]	; (8007ba4 <tcp_input+0x29c>)
 80079b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80079b2:	7cbb      	ldrb	r3, [r7, #18]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fe f8f8 	bl	8005bac <pbuf_remove_header>
 80079bc:	e04e      	b.n	8007a5c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d105      	bne.n	80079d2 <tcp_input+0xca>
 80079c6:	4b70      	ldr	r3, [pc, #448]	; (8007b88 <tcp_input+0x280>)
 80079c8:	22c2      	movs	r2, #194	; 0xc2
 80079ca:	4977      	ldr	r1, [pc, #476]	; (8007ba8 <tcp_input+0x2a0>)
 80079cc:	4870      	ldr	r0, [pc, #448]	; (8007b90 <tcp_input+0x288>)
 80079ce:	f006 fb97 	bl	800e100 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80079d2:	2114      	movs	r1, #20
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fe f8e9 	bl	8005bac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	895a      	ldrh	r2, [r3, #10]
 80079de:	4b71      	ldr	r3, [pc, #452]	; (8007ba4 <tcp_input+0x29c>)
 80079e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80079e2:	4b6e      	ldr	r3, [pc, #440]	; (8007b9c <tcp_input+0x294>)
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	4b6f      	ldr	r3, [pc, #444]	; (8007ba4 <tcp_input+0x29c>)
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80079ee:	4b6d      	ldr	r3, [pc, #436]	; (8007ba4 <tcp_input+0x29c>)
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fe f8d9 	bl	8005bac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	895b      	ldrh	r3, [r3, #10]
 8007a00:	8a3a      	ldrh	r2, [r7, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	f200 836e 	bhi.w	80080e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	4a64      	ldr	r2, [pc, #400]	; (8007ba0 <tcp_input+0x298>)
 8007a10:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	8a3a      	ldrh	r2, [r7, #16]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe f8c6 	bl	8005bac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	891a      	ldrh	r2, [r3, #8]
 8007a24:	8a3b      	ldrh	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	895b      	ldrh	r3, [r3, #10]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <tcp_input+0x13a>
 8007a36:	4b54      	ldr	r3, [pc, #336]	; (8007b88 <tcp_input+0x280>)
 8007a38:	22df      	movs	r2, #223	; 0xdf
 8007a3a:	495c      	ldr	r1, [pc, #368]	; (8007bac <tcp_input+0x2a4>)
 8007a3c:	4854      	ldr	r0, [pc, #336]	; (8007b90 <tcp_input+0x288>)
 8007a3e:	f006 fb5f 	bl	800e100 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	891a      	ldrh	r2, [r3, #8]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	891b      	ldrh	r3, [r3, #8]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d005      	beq.n	8007a5c <tcp_input+0x154>
 8007a50:	4b4d      	ldr	r3, [pc, #308]	; (8007b88 <tcp_input+0x280>)
 8007a52:	22e0      	movs	r2, #224	; 0xe0
 8007a54:	4956      	ldr	r1, [pc, #344]	; (8007bb0 <tcp_input+0x2a8>)
 8007a56:	484e      	ldr	r0, [pc, #312]	; (8007b90 <tcp_input+0x288>)
 8007a58:	f006 fb52 	bl	800e100 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007a5c:	4b4d      	ldr	r3, [pc, #308]	; (8007b94 <tcp_input+0x28c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	4a4b      	ldr	r2, [pc, #300]	; (8007b94 <tcp_input+0x28c>)
 8007a66:	6814      	ldr	r4, [r2, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fc fd0f 	bl	800448c <lwip_htons>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007a72:	4b48      	ldr	r3, [pc, #288]	; (8007b94 <tcp_input+0x28c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	885b      	ldrh	r3, [r3, #2]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	4a46      	ldr	r2, [pc, #280]	; (8007b94 <tcp_input+0x28c>)
 8007a7c:	6814      	ldr	r4, [r2, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fc fd04 	bl	800448c <lwip_htons>
 8007a84:	4603      	mov	r3, r0
 8007a86:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a88:	4b42      	ldr	r3, [pc, #264]	; (8007b94 <tcp_input+0x28c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	4a41      	ldr	r2, [pc, #260]	; (8007b94 <tcp_input+0x28c>)
 8007a90:	6814      	ldr	r4, [r2, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fc fd0f 	bl	80044b6 <lwip_htonl>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	4a45      	ldr	r2, [pc, #276]	; (8007bb4 <tcp_input+0x2ac>)
 8007aa0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007aa2:	4b3c      	ldr	r3, [pc, #240]	; (8007b94 <tcp_input+0x28c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	4a3a      	ldr	r2, [pc, #232]	; (8007b94 <tcp_input+0x28c>)
 8007aaa:	6814      	ldr	r4, [r2, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fc fd02 	bl	80044b6 <lwip_htonl>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	60a3      	str	r3, [r4, #8]
 8007ab6:	68a3      	ldr	r3, [r4, #8]
 8007ab8:	4a3f      	ldr	r2, [pc, #252]	; (8007bb8 <tcp_input+0x2b0>)
 8007aba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007abc:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <tcp_input+0x28c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	89db      	ldrh	r3, [r3, #14]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	4a33      	ldr	r2, [pc, #204]	; (8007b94 <tcp_input+0x28c>)
 8007ac6:	6814      	ldr	r4, [r2, #0]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fc fcdf 	bl	800448c <lwip_htons>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007ad2:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <tcp_input+0x28c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	899b      	ldrh	r3, [r3, #12]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fc fcd6 	bl	800448c <lwip_htons>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b34      	ldr	r3, [pc, #208]	; (8007bbc <tcp_input+0x2b4>)
 8007aec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	891a      	ldrh	r2, [r3, #8]
 8007af2:	4b33      	ldr	r3, [pc, #204]	; (8007bc0 <tcp_input+0x2b8>)
 8007af4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007af6:	4b31      	ldr	r3, [pc, #196]	; (8007bbc <tcp_input+0x2b4>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00c      	beq.n	8007b1c <tcp_input+0x214>
    tcplen++;
 8007b02:	4b2f      	ldr	r3, [pc, #188]	; (8007bc0 <tcp_input+0x2b8>)
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	4b2d      	ldr	r3, [pc, #180]	; (8007bc0 <tcp_input+0x2b8>)
 8007b0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	891a      	ldrh	r2, [r3, #8]
 8007b12:	4b2b      	ldr	r3, [pc, #172]	; (8007bc0 <tcp_input+0x2b8>)
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	f200 82e6 	bhi.w	80080e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <tcp_input+0x2bc>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e09d      	b.n	8007c64 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	7d1b      	ldrb	r3, [r3, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <tcp_input+0x234>
 8007b30:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <tcp_input+0x280>)
 8007b32:	22fb      	movs	r2, #251	; 0xfb
 8007b34:	4924      	ldr	r1, [pc, #144]	; (8007bc8 <tcp_input+0x2c0>)
 8007b36:	4816      	ldr	r0, [pc, #88]	; (8007b90 <tcp_input+0x288>)
 8007b38:	f006 fae2 	bl	800e100 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	7d1b      	ldrb	r3, [r3, #20]
 8007b40:	2b0a      	cmp	r3, #10
 8007b42:	d105      	bne.n	8007b50 <tcp_input+0x248>
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <tcp_input+0x280>)
 8007b46:	22fc      	movs	r2, #252	; 0xfc
 8007b48:	4920      	ldr	r1, [pc, #128]	; (8007bcc <tcp_input+0x2c4>)
 8007b4a:	4811      	ldr	r0, [pc, #68]	; (8007b90 <tcp_input+0x288>)
 8007b4c:	f006 fad8 	bl	800e100 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	7d1b      	ldrb	r3, [r3, #20]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d105      	bne.n	8007b64 <tcp_input+0x25c>
 8007b58:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <tcp_input+0x280>)
 8007b5a:	22fd      	movs	r2, #253	; 0xfd
 8007b5c:	491c      	ldr	r1, [pc, #112]	; (8007bd0 <tcp_input+0x2c8>)
 8007b5e:	480c      	ldr	r0, [pc, #48]	; (8007b90 <tcp_input+0x288>)
 8007b60:	f006 face 	bl	800e100 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	7a1b      	ldrb	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d033      	beq.n	8007bd4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	7a1a      	ldrb	r2, [r3, #8]
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <tcp_input+0x290>)
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d029      	beq.n	8007bd4 <tcp_input+0x2cc>
      prev = pcb;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	61bb      	str	r3, [r7, #24]
      continue;
 8007b84:	e06b      	b.n	8007c5e <tcp_input+0x356>
 8007b86:	bf00      	nop
 8007b88:	080103ec 	.word	0x080103ec
 8007b8c:	08010420 	.word	0x08010420
 8007b90:	08010438 	.word	0x08010438
 8007b94:	24003160 	.word	0x24003160
 8007b98:	2400021c 	.word	0x2400021c
 8007b9c:	24003164 	.word	0x24003164
 8007ba0:	24003168 	.word	0x24003168
 8007ba4:	24003166 	.word	0x24003166
 8007ba8:	08010460 	.word	0x08010460
 8007bac:	08010470 	.word	0x08010470
 8007bb0:	0801047c 	.word	0x0801047c
 8007bb4:	24003170 	.word	0x24003170
 8007bb8:	24003174 	.word	0x24003174
 8007bbc:	2400317c 	.word	0x2400317c
 8007bc0:	2400317a 	.word	0x2400317a
 8007bc4:	24003144 	.word	0x24003144
 8007bc8:	0801049c 	.word	0x0801049c
 8007bcc:	080104c4 	.word	0x080104c4
 8007bd0:	080104f0 	.word	0x080104f0
    }

    if (pcb->remote_port == tcphdr->src &&
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	8b1a      	ldrh	r2, [r3, #24]
 8007bd8:	4b72      	ldr	r3, [pc, #456]	; (8007da4 <tcp_input+0x49c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d13a      	bne.n	8007c5a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	8ada      	ldrh	r2, [r3, #22]
 8007be8:	4b6e      	ldr	r3, [pc, #440]	; (8007da4 <tcp_input+0x49c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	885b      	ldrh	r3, [r3, #2]
 8007bee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d132      	bne.n	8007c5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	4b6b      	ldr	r3, [pc, #428]	; (8007da8 <tcp_input+0x4a0>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d12c      	bne.n	8007c5a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <tcp_input+0x4a0>)
 8007c06:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d126      	bne.n	8007c5a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d106      	bne.n	8007c24 <tcp_input+0x31c>
 8007c16:	4b65      	ldr	r3, [pc, #404]	; (8007dac <tcp_input+0x4a4>)
 8007c18:	f240 120d 	movw	r2, #269	; 0x10d
 8007c1c:	4964      	ldr	r1, [pc, #400]	; (8007db0 <tcp_input+0x4a8>)
 8007c1e:	4865      	ldr	r0, [pc, #404]	; (8007db4 <tcp_input+0x4ac>)
 8007c20:	f006 fa6e 	bl	800e100 <iprintf>
      if (prev != NULL) {
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <tcp_input+0x338>
        prev->next = pcb->next;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007c32:	4b61      	ldr	r3, [pc, #388]	; (8007db8 <tcp_input+0x4b0>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007c3a:	4a5f      	ldr	r2, [pc, #380]	; (8007db8 <tcp_input+0x4b0>)
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d111      	bne.n	8007c6e <tcp_input+0x366>
 8007c4a:	4b58      	ldr	r3, [pc, #352]	; (8007dac <tcp_input+0x4a4>)
 8007c4c:	f240 1215 	movw	r2, #277	; 0x115
 8007c50:	495a      	ldr	r1, [pc, #360]	; (8007dbc <tcp_input+0x4b4>)
 8007c52:	4858      	ldr	r0, [pc, #352]	; (8007db4 <tcp_input+0x4ac>)
 8007c54:	f006 fa54 	bl	800e100 <iprintf>
      break;
 8007c58:	e009      	b.n	8007c6e <tcp_input+0x366>
    }
    prev = pcb;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f47f af5e 	bne.w	8007b28 <tcp_input+0x220>
 8007c6c:	e000      	b.n	8007c70 <tcp_input+0x368>
      break;
 8007c6e:	bf00      	nop
  }

  if (pcb == NULL) {
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 80aa 	bne.w	8007dcc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c78:	4b51      	ldr	r3, [pc, #324]	; (8007dc0 <tcp_input+0x4b8>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	e03f      	b.n	8007d00 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	2b0a      	cmp	r3, #10
 8007c86:	d006      	beq.n	8007c96 <tcp_input+0x38e>
 8007c88:	4b48      	ldr	r3, [pc, #288]	; (8007dac <tcp_input+0x4a4>)
 8007c8a:	f240 121f 	movw	r2, #287	; 0x11f
 8007c8e:	494d      	ldr	r1, [pc, #308]	; (8007dc4 <tcp_input+0x4bc>)
 8007c90:	4848      	ldr	r0, [pc, #288]	; (8007db4 <tcp_input+0x4ac>)
 8007c92:	f006 fa35 	bl	800e100 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	7a1b      	ldrb	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	7a1a      	ldrb	r2, [r3, #8]
 8007ca2:	4b41      	ldr	r3, [pc, #260]	; (8007da8 <tcp_input+0x4a0>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007caa:	3301      	adds	r3, #1
 8007cac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d122      	bne.n	8007cf8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	8b1a      	ldrh	r2, [r3, #24]
 8007cb6:	4b3b      	ldr	r3, [pc, #236]	; (8007da4 <tcp_input+0x49c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d11b      	bne.n	8007cfa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	8ada      	ldrh	r2, [r3, #22]
 8007cc6:	4b37      	ldr	r3, [pc, #220]	; (8007da4 <tcp_input+0x49c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d113      	bne.n	8007cfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	4b34      	ldr	r3, [pc, #208]	; (8007da8 <tcp_input+0x4a0>)
 8007cd8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d10d      	bne.n	8007cfa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <tcp_input+0x4a0>)
 8007ce4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d107      	bne.n	8007cfa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007cea:	69f8      	ldr	r0, [r7, #28]
 8007cec:	f000 fb56 	bl	800839c <tcp_timewait_input>
        }
        pbuf_free(p);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7fd ffe1 	bl	8005cb8 <pbuf_free>
        return;
 8007cf6:	e1fd      	b.n	80080f4 <tcp_input+0x7ec>
        continue;
 8007cf8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1bc      	bne.n	8007c80 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d0a:	4b2f      	ldr	r3, [pc, #188]	; (8007dc8 <tcp_input+0x4c0>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	e02a      	b.n	8007d68 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	7a1b      	ldrb	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00c      	beq.n	8007d34 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	7a1a      	ldrb	r2, [r3, #8]
 8007d1e:	4b22      	ldr	r3, [pc, #136]	; (8007da8 <tcp_input+0x4a0>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d26:	3301      	adds	r3, #1
 8007d28:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d002      	beq.n	8007d34 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	61bb      	str	r3, [r7, #24]
        continue;
 8007d32:	e016      	b.n	8007d62 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	8ada      	ldrh	r2, [r3, #22]
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <tcp_input+0x49c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d10c      	bne.n	8007d5e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <tcp_input+0x4a0>)
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d00f      	beq.n	8007d70 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00d      	beq.n	8007d72 <tcp_input+0x46a>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1d1      	bne.n	8007d12 <tcp_input+0x40a>
 8007d6e:	e000      	b.n	8007d72 <tcp_input+0x46a>
            break;
 8007d70:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d029      	beq.n	8007dcc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007d86:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <tcp_input+0x4c0>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007d8e:	4a0e      	ldr	r2, [pc, #56]	; (8007dc8 <tcp_input+0x4c0>)
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007d94:	6978      	ldr	r0, [r7, #20]
 8007d96:	f000 fa03 	bl	80081a0 <tcp_listen_input>
      }
      pbuf_free(p);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fd ff8c 	bl	8005cb8 <pbuf_free>
      return;
 8007da0:	e1a8      	b.n	80080f4 <tcp_input+0x7ec>
 8007da2:	bf00      	nop
 8007da4:	24003160 	.word	0x24003160
 8007da8:	2400021c 	.word	0x2400021c
 8007dac:	080103ec 	.word	0x080103ec
 8007db0:	08010518 	.word	0x08010518
 8007db4:	08010438 	.word	0x08010438
 8007db8:	24003144 	.word	0x24003144
 8007dbc:	08010544 	.word	0x08010544
 8007dc0:	24003148 	.word	0x24003148
 8007dc4:	08010570 	.word	0x08010570
 8007dc8:	24003140 	.word	0x24003140
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8158 	beq.w	8008084 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007dd4:	4b95      	ldr	r3, [pc, #596]	; (800802c <tcp_input+0x724>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	891a      	ldrh	r2, [r3, #8]
 8007dde:	4b93      	ldr	r3, [pc, #588]	; (800802c <tcp_input+0x724>)
 8007de0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007de2:	4a92      	ldr	r2, [pc, #584]	; (800802c <tcp_input+0x724>)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007de8:	4b91      	ldr	r3, [pc, #580]	; (8008030 <tcp_input+0x728>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a8f      	ldr	r2, [pc, #572]	; (800802c <tcp_input+0x724>)
 8007dee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007df0:	4b90      	ldr	r3, [pc, #576]	; (8008034 <tcp_input+0x72c>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007df6:	4b90      	ldr	r3, [pc, #576]	; (8008038 <tcp_input+0x730>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007dfc:	4b8f      	ldr	r3, [pc, #572]	; (800803c <tcp_input+0x734>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007e02:	4b8f      	ldr	r3, [pc, #572]	; (8008040 <tcp_input+0x738>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d006      	beq.n	8007e1c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	7b5b      	ldrb	r3, [r3, #13]
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d017      	beq.n	8007e54 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007e24:	69f8      	ldr	r0, [r7, #28]
 8007e26:	f7ff f929 	bl	800707c <tcp_process_refused_data>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f113 0f0d 	cmn.w	r3, #13
 8007e30:	d007      	beq.n	8007e42 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007e3a:	4b82      	ldr	r3, [pc, #520]	; (8008044 <tcp_input+0x73c>)
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f040 80e3 	bne.w	8008012 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007e4c:	69f8      	ldr	r0, [r7, #28]
 8007e4e:	f003 f9ad 	bl	800b1ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007e52:	e0de      	b.n	8008012 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007e54:	4a7c      	ldr	r2, [pc, #496]	; (8008048 <tcp_input+0x740>)
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007e5a:	69f8      	ldr	r0, [r7, #28]
 8007e5c:	f000 fb18 	bl	8008490 <tcp_process>
 8007e60:	4603      	mov	r3, r0
 8007e62:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007e64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e68:	f113 0f0d 	cmn.w	r3, #13
 8007e6c:	f000 80d3 	beq.w	8008016 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007e70:	4b71      	ldr	r3, [pc, #452]	; (8008038 <tcp_input+0x730>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d015      	beq.n	8007ea8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d008      	beq.n	8007e98 <tcp_input+0x590>
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	6912      	ldr	r2, [r2, #16]
 8007e90:	f06f 010d 	mvn.w	r1, #13
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007e98:	69f9      	ldr	r1, [r7, #28]
 8007e9a:	486c      	ldr	r0, [pc, #432]	; (800804c <tcp_input+0x744>)
 8007e9c:	f7ff fbbc 	bl	8007618 <tcp_pcb_remove>
        tcp_free(pcb);
 8007ea0:	69f8      	ldr	r0, [r7, #28]
 8007ea2:	f7fe f9a9 	bl	80061f8 <tcp_free>
 8007ea6:	e0da      	b.n	800805e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007eac:	4b63      	ldr	r3, [pc, #396]	; (800803c <tcp_input+0x734>)
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01d      	beq.n	8007ef0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007eb4:	4b61      	ldr	r3, [pc, #388]	; (800803c <tcp_input+0x734>)
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <tcp_input+0x5d2>
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	6910      	ldr	r0, [r2, #16]
 8007ece:	89fa      	ldrh	r2, [r7, #14]
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	4798      	blx	r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	74fb      	strb	r3, [r7, #19]
 8007ed8:	e001      	b.n	8007ede <tcp_input+0x5d6>
 8007eda:	2300      	movs	r3, #0
 8007edc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007ede:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ee2:	f113 0f0d 	cmn.w	r3, #13
 8007ee6:	f000 8098 	beq.w	800801a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007eea:	4b54      	ldr	r3, [pc, #336]	; (800803c <tcp_input+0x734>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007ef0:	69f8      	ldr	r0, [r7, #28]
 8007ef2:	f000 f915 	bl	8008120 <tcp_input_delayed_close>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f040 8090 	bne.w	800801e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007efe:	4b4d      	ldr	r3, [pc, #308]	; (8008034 <tcp_input+0x72c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d041      	beq.n	8007f8a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <tcp_input+0x614>
 8007f0e:	4b50      	ldr	r3, [pc, #320]	; (8008050 <tcp_input+0x748>)
 8007f10:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007f14:	494f      	ldr	r1, [pc, #316]	; (8008054 <tcp_input+0x74c>)
 8007f16:	4850      	ldr	r0, [pc, #320]	; (8008058 <tcp_input+0x750>)
 8007f18:	f006 f8f2 	bl	800e100 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	8b5b      	ldrh	r3, [r3, #26]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d008      	beq.n	8007f3a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007f28:	4b42      	ldr	r3, [pc, #264]	; (8008034 <tcp_input+0x72c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fd fec3 	bl	8005cb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007f32:	69f8      	ldr	r0, [r7, #28]
 8007f34:	f7fe fc48 	bl	80067c8 <tcp_abort>
            goto aborted;
 8007f38:	e091      	b.n	800805e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00c      	beq.n	8007f5e <tcp_input+0x656>
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	6918      	ldr	r0, [r3, #16]
 8007f4e:	4b39      	ldr	r3, [pc, #228]	; (8008034 <tcp_input+0x72c>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	69f9      	ldr	r1, [r7, #28]
 8007f56:	47a0      	blx	r4
 8007f58:	4603      	mov	r3, r0
 8007f5a:	74fb      	strb	r3, [r7, #19]
 8007f5c:	e008      	b.n	8007f70 <tcp_input+0x668>
 8007f5e:	4b35      	ldr	r3, [pc, #212]	; (8008034 <tcp_input+0x72c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	2300      	movs	r3, #0
 8007f64:	69f9      	ldr	r1, [r7, #28]
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7ff f95e 	bl	8007228 <tcp_recv_null>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007f70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f74:	f113 0f0d 	cmn.w	r3, #13
 8007f78:	d053      	beq.n	8008022 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007f82:	4b2c      	ldr	r3, [pc, #176]	; (8008034 <tcp_input+0x72c>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007f8a:	4b2b      	ldr	r3, [pc, #172]	; (8008038 <tcp_input+0x730>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d030      	beq.n	8007ff8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa2:	7b5a      	ldrb	r2, [r3, #13]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa8:	f042 0220 	orr.w	r2, r2, #32
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	735a      	strb	r2, [r3, #13]
 8007fb0:	e022      	b.n	8007ff8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007fba:	d005      	beq.n	8007fc8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00b      	beq.n	8007fea <tcp_input+0x6e2>
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	6918      	ldr	r0, [r3, #16]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	2200      	movs	r2, #0
 8007fe0:	69f9      	ldr	r1, [r7, #28]
 8007fe2:	47a0      	blx	r4
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	74fb      	strb	r3, [r7, #19]
 8007fe8:	e001      	b.n	8007fee <tcp_input+0x6e6>
 8007fea:	2300      	movs	r3, #0
 8007fec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007fee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ff2:	f113 0f0d 	cmn.w	r3, #13
 8007ff6:	d016      	beq.n	8008026 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007ff8:	4b13      	ldr	r3, [pc, #76]	; (8008048 <tcp_input+0x740>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007ffe:	69f8      	ldr	r0, [r7, #28]
 8008000:	f000 f88e 	bl	8008120 <tcp_input_delayed_close>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d128      	bne.n	800805c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800800a:	69f8      	ldr	r0, [r7, #28]
 800800c:	f002 fac8 	bl	800a5a0 <tcp_output>
 8008010:	e025      	b.n	800805e <tcp_input+0x756>
        goto aborted;
 8008012:	bf00      	nop
 8008014:	e023      	b.n	800805e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008016:	bf00      	nop
 8008018:	e021      	b.n	800805e <tcp_input+0x756>
              goto aborted;
 800801a:	bf00      	nop
 800801c:	e01f      	b.n	800805e <tcp_input+0x756>
          goto aborted;
 800801e:	bf00      	nop
 8008020:	e01d      	b.n	800805e <tcp_input+0x756>
            goto aborted;
 8008022:	bf00      	nop
 8008024:	e01b      	b.n	800805e <tcp_input+0x756>
              goto aborted;
 8008026:	bf00      	nop
 8008028:	e019      	b.n	800805e <tcp_input+0x756>
 800802a:	bf00      	nop
 800802c:	24003150 	.word	0x24003150
 8008030:	24003160 	.word	0x24003160
 8008034:	24003180 	.word	0x24003180
 8008038:	2400317d 	.word	0x2400317d
 800803c:	24003178 	.word	0x24003178
 8008040:	2400317c 	.word	0x2400317c
 8008044:	2400317a 	.word	0x2400317a
 8008048:	24003184 	.word	0x24003184
 800804c:	24003144 	.word	0x24003144
 8008050:	080103ec 	.word	0x080103ec
 8008054:	080105a0 	.word	0x080105a0
 8008058:	08010438 	.word	0x08010438
          goto aborted;
 800805c:	bf00      	nop
    tcp_input_pcb = NULL;
 800805e:	4b27      	ldr	r3, [pc, #156]	; (80080fc <tcp_input+0x7f4>)
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008064:	4b26      	ldr	r3, [pc, #152]	; (8008100 <tcp_input+0x7f8>)
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800806a:	4b26      	ldr	r3, [pc, #152]	; (8008104 <tcp_input+0x7fc>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d03f      	beq.n	80080f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <tcp_input+0x7fc>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4618      	mov	r0, r3
 8008078:	f7fd fe1e 	bl	8005cb8 <pbuf_free>
      inseg.p = NULL;
 800807c:	4b21      	ldr	r3, [pc, #132]	; (8008104 <tcp_input+0x7fc>)
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008082:	e036      	b.n	80080f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008084:	4b20      	ldr	r3, [pc, #128]	; (8008108 <tcp_input+0x800>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	899b      	ldrh	r3, [r3, #12]
 800808a:	b29b      	uxth	r3, r3
 800808c:	4618      	mov	r0, r3
 800808e:	f7fc f9fd 	bl	800448c <lwip_htons>
 8008092:	4603      	mov	r3, r0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	2b00      	cmp	r3, #0
 800809c:	d118      	bne.n	80080d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800809e:	4b1b      	ldr	r3, [pc, #108]	; (800810c <tcp_input+0x804>)
 80080a0:	6819      	ldr	r1, [r3, #0]
 80080a2:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <tcp_input+0x808>)
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <tcp_input+0x80c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080ae:	4b16      	ldr	r3, [pc, #88]	; (8008108 <tcp_input+0x800>)
 80080b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080b2:	885b      	ldrh	r3, [r3, #2]
 80080b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080b6:	4a14      	ldr	r2, [pc, #80]	; (8008108 <tcp_input+0x800>)
 80080b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080ba:	8812      	ldrh	r2, [r2, #0]
 80080bc:	b292      	uxth	r2, r2
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <tcp_input+0x810>)
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4b15      	ldr	r3, [pc, #84]	; (800811c <tcp_input+0x814>)
 80080c8:	4602      	mov	r2, r0
 80080ca:	2000      	movs	r0, #0
 80080cc:	f003 f81c 	bl	800b108 <tcp_rst>
    pbuf_free(p);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7fd fdf1 	bl	8005cb8 <pbuf_free>
  return;
 80080d6:	e00c      	b.n	80080f2 <tcp_input+0x7ea>
    goto dropped;
 80080d8:	bf00      	nop
 80080da:	e006      	b.n	80080ea <tcp_input+0x7e2>
    goto dropped;
 80080dc:	bf00      	nop
 80080de:	e004      	b.n	80080ea <tcp_input+0x7e2>
    goto dropped;
 80080e0:	bf00      	nop
 80080e2:	e002      	b.n	80080ea <tcp_input+0x7e2>
      goto dropped;
 80080e4:	bf00      	nop
 80080e6:	e000      	b.n	80080ea <tcp_input+0x7e2>
      goto dropped;
 80080e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fd fde4 	bl	8005cb8 <pbuf_free>
 80080f0:	e000      	b.n	80080f4 <tcp_input+0x7ec>
  return;
 80080f2:	bf00      	nop
}
 80080f4:	3724      	adds	r7, #36	; 0x24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd90      	pop	{r4, r7, pc}
 80080fa:	bf00      	nop
 80080fc:	24003184 	.word	0x24003184
 8008100:	24003180 	.word	0x24003180
 8008104:	24003150 	.word	0x24003150
 8008108:	24003160 	.word	0x24003160
 800810c:	24003174 	.word	0x24003174
 8008110:	2400317a 	.word	0x2400317a
 8008114:	24003170 	.word	0x24003170
 8008118:	2400022c 	.word	0x2400022c
 800811c:	24000230 	.word	0x24000230

08008120 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <tcp_input_delayed_close+0x1c>
 800812e:	4b17      	ldr	r3, [pc, #92]	; (800818c <tcp_input_delayed_close+0x6c>)
 8008130:	f240 225a 	movw	r2, #602	; 0x25a
 8008134:	4916      	ldr	r1, [pc, #88]	; (8008190 <tcp_input_delayed_close+0x70>)
 8008136:	4817      	ldr	r0, [pc, #92]	; (8008194 <tcp_input_delayed_close+0x74>)
 8008138:	f005 ffe2 	bl	800e100 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800813c:	4b16      	ldr	r3, [pc, #88]	; (8008198 <tcp_input_delayed_close+0x78>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01c      	beq.n	8008182 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8b5b      	ldrh	r3, [r3, #26]
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10d      	bne.n	8008170 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <tcp_input_delayed_close+0x50>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6912      	ldr	r2, [r2, #16]
 8008168:	f06f 010e 	mvn.w	r1, #14
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	480a      	ldr	r0, [pc, #40]	; (800819c <tcp_input_delayed_close+0x7c>)
 8008174:	f7ff fa50 	bl	8007618 <tcp_pcb_remove>
    tcp_free(pcb);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7fe f83d 	bl	80061f8 <tcp_free>
    return 1;
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	080103ec 	.word	0x080103ec
 8008190:	080105bc 	.word	0x080105bc
 8008194:	08010438 	.word	0x08010438
 8008198:	2400317d 	.word	0x2400317d
 800819c:	24003144 	.word	0x24003144

080081a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b08b      	sub	sp, #44	; 0x2c
 80081a4:	af04      	add	r7, sp, #16
 80081a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80081a8:	4b6f      	ldr	r3, [pc, #444]	; (8008368 <tcp_listen_input+0x1c8>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f040 80d2 	bne.w	800835a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <tcp_listen_input+0x2a>
 80081bc:	4b6b      	ldr	r3, [pc, #428]	; (800836c <tcp_listen_input+0x1cc>)
 80081be:	f240 2281 	movw	r2, #641	; 0x281
 80081c2:	496b      	ldr	r1, [pc, #428]	; (8008370 <tcp_listen_input+0x1d0>)
 80081c4:	486b      	ldr	r0, [pc, #428]	; (8008374 <tcp_listen_input+0x1d4>)
 80081c6:	f005 ff9b 	bl	800e100 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80081ca:	4b67      	ldr	r3, [pc, #412]	; (8008368 <tcp_listen_input+0x1c8>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	f003 0310 	and.w	r3, r3, #16
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d019      	beq.n	800820a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081d6:	4b68      	ldr	r3, [pc, #416]	; (8008378 <tcp_listen_input+0x1d8>)
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	4b68      	ldr	r3, [pc, #416]	; (800837c <tcp_listen_input+0x1dc>)
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	4b67      	ldr	r3, [pc, #412]	; (8008380 <tcp_listen_input+0x1e0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081e6:	4b67      	ldr	r3, [pc, #412]	; (8008384 <tcp_listen_input+0x1e4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081ee:	4a65      	ldr	r2, [pc, #404]	; (8008384 <tcp_listen_input+0x1e4>)
 80081f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081f2:	8812      	ldrh	r2, [r2, #0]
 80081f4:	b292      	uxth	r2, r2
 80081f6:	9202      	str	r2, [sp, #8]
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	4b63      	ldr	r3, [pc, #396]	; (8008388 <tcp_listen_input+0x1e8>)
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	4b63      	ldr	r3, [pc, #396]	; (800838c <tcp_listen_input+0x1ec>)
 8008200:	4602      	mov	r2, r0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f002 ff80 	bl	800b108 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008208:	e0a9      	b.n	800835e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800820a:	4b57      	ldr	r3, [pc, #348]	; (8008368 <tcp_listen_input+0x1c8>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 80a3 	beq.w	800835e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7d5b      	ldrb	r3, [r3, #21]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff f927 	bl	8007470 <tcp_alloc>
 8008222:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d111      	bne.n	800824e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <tcp_listen_input+0xa8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	6910      	ldr	r0, [r2, #16]
 800823a:	f04f 32ff 	mov.w	r2, #4294967295
 800823e:	2100      	movs	r1, #0
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]
      return;
 8008246:	e08b      	b.n	8008360 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008248:	23f0      	movs	r3, #240	; 0xf0
 800824a:	73bb      	strb	r3, [r7, #14]
      return;
 800824c:	e088      	b.n	8008360 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800824e:	4b50      	ldr	r3, [pc, #320]	; (8008390 <tcp_listen_input+0x1f0>)
 8008250:	695a      	ldr	r2, [r3, #20]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008256:	4b4e      	ldr	r3, [pc, #312]	; (8008390 <tcp_listen_input+0x1f0>)
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	8ada      	ldrh	r2, [r3, #22]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008266:	4b47      	ldr	r3, [pc, #284]	; (8008384 <tcp_listen_input+0x1e4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29a      	uxth	r2, r3
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2203      	movs	r2, #3
 8008276:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008278:	4b41      	ldr	r3, [pc, #260]	; (8008380 <tcp_listen_input+0x1e0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800828a:	6978      	ldr	r0, [r7, #20]
 800828c:	f7ff fa58 	bl	8007740 <tcp_next_iss>
 8008290:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80082aa:	4b35      	ldr	r3, [pc, #212]	; (8008380 <tcp_listen_input+0x1e0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7a5b      	ldrb	r3, [r3, #9]
 80082c6:	f003 030c 	and.w	r3, r3, #12
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7a1a      	ldrb	r2, [r3, #8]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80082d8:	4b2e      	ldr	r3, [pc, #184]	; (8008394 <tcp_listen_input+0x1f4>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	60da      	str	r2, [r3, #12]
 80082e0:	4a2c      	ldr	r2, [pc, #176]	; (8008394 <tcp_listen_input+0x1f4>)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	f003 f8d1 	bl	800b48c <tcp_timer_needed>
 80082ea:	4b2b      	ldr	r3, [pc, #172]	; (8008398 <tcp_listen_input+0x1f8>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80082f0:	6978      	ldr	r0, [r7, #20]
 80082f2:	f001 fd8f 	bl	8009e14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80082f6:	4b23      	ldr	r3, [pc, #140]	; (8008384 <tcp_listen_input+0x1e4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	89db      	ldrh	r3, [r3, #14]
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f004 fcbb 	bl	800cc94 <ip4_route>
 800831e:	4601      	mov	r1, r0
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	3304      	adds	r3, #4
 8008324:	461a      	mov	r2, r3
 8008326:	4620      	mov	r0, r4
 8008328:	f7ff fa30 	bl	800778c <tcp_eff_send_mss_netif>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008334:	2112      	movs	r1, #18
 8008336:	6978      	ldr	r0, [r7, #20]
 8008338:	f002 f844 	bl	800a3c4 <tcp_enqueue_flags>
 800833c:	4603      	mov	r3, r0
 800833e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008348:	2100      	movs	r1, #0
 800834a:	6978      	ldr	r0, [r7, #20]
 800834c:	f7fe f97e 	bl	800664c <tcp_abandon>
      return;
 8008350:	e006      	b.n	8008360 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008352:	6978      	ldr	r0, [r7, #20]
 8008354:	f002 f924 	bl	800a5a0 <tcp_output>
  return;
 8008358:	e001      	b.n	800835e <tcp_listen_input+0x1be>
    return;
 800835a:	bf00      	nop
 800835c:	e000      	b.n	8008360 <tcp_listen_input+0x1c0>
  return;
 800835e:	bf00      	nop
}
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	bd90      	pop	{r4, r7, pc}
 8008366:	bf00      	nop
 8008368:	2400317c 	.word	0x2400317c
 800836c:	080103ec 	.word	0x080103ec
 8008370:	080105e4 	.word	0x080105e4
 8008374:	08010438 	.word	0x08010438
 8008378:	24003174 	.word	0x24003174
 800837c:	2400317a 	.word	0x2400317a
 8008380:	24003170 	.word	0x24003170
 8008384:	24003160 	.word	0x24003160
 8008388:	2400022c 	.word	0x2400022c
 800838c:	24000230 	.word	0x24000230
 8008390:	2400021c 	.word	0x2400021c
 8008394:	24003144 	.word	0x24003144
 8008398:	2400314c 	.word	0x2400314c

0800839c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af04      	add	r7, sp, #16
 80083a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80083a4:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <tcp_timewait_input+0xc8>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d153      	bne.n	8008458 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <tcp_timewait_input+0x28>
 80083b6:	4b2c      	ldr	r3, [pc, #176]	; (8008468 <tcp_timewait_input+0xcc>)
 80083b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80083bc:	492b      	ldr	r1, [pc, #172]	; (800846c <tcp_timewait_input+0xd0>)
 80083be:	482c      	ldr	r0, [pc, #176]	; (8008470 <tcp_timewait_input+0xd4>)
 80083c0:	f005 fe9e 	bl	800e100 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80083c4:	4b27      	ldr	r3, [pc, #156]	; (8008464 <tcp_timewait_input+0xc8>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d02a      	beq.n	8008426 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80083d0:	4b28      	ldr	r3, [pc, #160]	; (8008474 <tcp_timewait_input+0xd8>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	db2d      	blt.n	800843a <tcp_timewait_input+0x9e>
 80083de:	4b25      	ldr	r3, [pc, #148]	; (8008474 <tcp_timewait_input+0xd8>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80083ea:	440b      	add	r3, r1
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	dc23      	bgt.n	800843a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083f2:	4b21      	ldr	r3, [pc, #132]	; (8008478 <tcp_timewait_input+0xdc>)
 80083f4:	6819      	ldr	r1, [r3, #0]
 80083f6:	4b21      	ldr	r3, [pc, #132]	; (800847c <tcp_timewait_input+0xe0>)
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <tcp_timewait_input+0xd8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008402:	4b1f      	ldr	r3, [pc, #124]	; (8008480 <tcp_timewait_input+0xe4>)
 8008404:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008406:	885b      	ldrh	r3, [r3, #2]
 8008408:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800840a:	4a1d      	ldr	r2, [pc, #116]	; (8008480 <tcp_timewait_input+0xe4>)
 800840c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800840e:	8812      	ldrh	r2, [r2, #0]
 8008410:	b292      	uxth	r2, r2
 8008412:	9202      	str	r2, [sp, #8]
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <tcp_timewait_input+0xe8>)
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <tcp_timewait_input+0xec>)
 800841c:	4602      	mov	r2, r0
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f002 fe72 	bl	800b108 <tcp_rst>
      return;
 8008424:	e01b      	b.n	800845e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008426:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <tcp_timewait_input+0xc8>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008432:	4b16      	ldr	r3, [pc, #88]	; (800848c <tcp_timewait_input+0xf0>)
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800843a:	4b10      	ldr	r3, [pc, #64]	; (800847c <tcp_timewait_input+0xe0>)
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00c      	beq.n	800845c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8b5b      	ldrh	r3, [r3, #26]
 8008446:	f043 0302 	orr.w	r3, r3, #2
 800844a:	b29a      	uxth	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f002 f8a5 	bl	800a5a0 <tcp_output>
  }
  return;
 8008456:	e001      	b.n	800845c <tcp_timewait_input+0xc0>
    return;
 8008458:	bf00      	nop
 800845a:	e000      	b.n	800845e <tcp_timewait_input+0xc2>
  return;
 800845c:	bf00      	nop
}
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	2400317c 	.word	0x2400317c
 8008468:	080103ec 	.word	0x080103ec
 800846c:	08010604 	.word	0x08010604
 8008470:	08010438 	.word	0x08010438
 8008474:	24003170 	.word	0x24003170
 8008478:	24003174 	.word	0x24003174
 800847c:	2400317a 	.word	0x2400317a
 8008480:	24003160 	.word	0x24003160
 8008484:	2400022c 	.word	0x2400022c
 8008488:	24000230 	.word	0x24000230
 800848c:	24003138 	.word	0x24003138

08008490 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b08d      	sub	sp, #52	; 0x34
 8008494:	af04      	add	r7, sp, #16
 8008496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d106      	bne.n	80084b4 <tcp_process+0x24>
 80084a6:	4b9d      	ldr	r3, [pc, #628]	; (800871c <tcp_process+0x28c>)
 80084a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80084ac:	499c      	ldr	r1, [pc, #624]	; (8008720 <tcp_process+0x290>)
 80084ae:	489d      	ldr	r0, [pc, #628]	; (8008724 <tcp_process+0x294>)
 80084b0:	f005 fe26 	bl	800e100 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80084b4:	4b9c      	ldr	r3, [pc, #624]	; (8008728 <tcp_process+0x298>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d04e      	beq.n	800855e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7d1b      	ldrb	r3, [r3, #20]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d108      	bne.n	80084da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084cc:	4b97      	ldr	r3, [pc, #604]	; (800872c <tcp_process+0x29c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d123      	bne.n	800851c <tcp_process+0x8c>
        acceptable = 1;
 80084d4:	2301      	movs	r3, #1
 80084d6:	76fb      	strb	r3, [r7, #27]
 80084d8:	e020      	b.n	800851c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084de:	4b94      	ldr	r3, [pc, #592]	; (8008730 <tcp_process+0x2a0>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d102      	bne.n	80084ec <tcp_process+0x5c>
        acceptable = 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	76fb      	strb	r3, [r7, #27]
 80084ea:	e017      	b.n	800851c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80084ec:	4b90      	ldr	r3, [pc, #576]	; (8008730 <tcp_process+0x2a0>)
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	db10      	blt.n	800851c <tcp_process+0x8c>
 80084fa:	4b8d      	ldr	r3, [pc, #564]	; (8008730 <tcp_process+0x2a0>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008506:	440b      	add	r3, r1
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	dc06      	bgt.n	800851c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	8b5b      	ldrh	r3, [r3, #26]
 8008512:	f043 0302 	orr.w	r3, r3, #2
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800851c:	7efb      	ldrb	r3, [r7, #27]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01b      	beq.n	800855a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7d1b      	ldrb	r3, [r3, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <tcp_process+0xa8>
 800852a:	4b7c      	ldr	r3, [pc, #496]	; (800871c <tcp_process+0x28c>)
 800852c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008530:	4980      	ldr	r1, [pc, #512]	; (8008734 <tcp_process+0x2a4>)
 8008532:	487c      	ldr	r0, [pc, #496]	; (8008724 <tcp_process+0x294>)
 8008534:	f005 fde4 	bl	800e100 <iprintf>
      recv_flags |= TF_RESET;
 8008538:	4b7f      	ldr	r3, [pc, #508]	; (8008738 <tcp_process+0x2a8>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f043 0308 	orr.w	r3, r3, #8
 8008540:	b2da      	uxtb	r2, r3
 8008542:	4b7d      	ldr	r3, [pc, #500]	; (8008738 <tcp_process+0x2a8>)
 8008544:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8b5b      	ldrh	r3, [r3, #26]
 800854a:	f023 0301 	bic.w	r3, r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008554:	f06f 030d 	mvn.w	r3, #13
 8008558:	e37a      	b.n	8008c50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	e378      	b.n	8008c50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800855e:	4b72      	ldr	r3, [pc, #456]	; (8008728 <tcp_process+0x298>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <tcp_process+0xfc>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7d1b      	ldrb	r3, [r3, #20]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d00c      	beq.n	800858c <tcp_process+0xfc>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	7d1b      	ldrb	r3, [r3, #20]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d008      	beq.n	800858c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	8b5b      	ldrh	r3, [r3, #26]
 800857e:	f043 0302 	orr.w	r3, r3, #2
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	e361      	b.n	8008c50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8b5b      	ldrh	r3, [r3, #26]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008598:	4b68      	ldr	r3, [pc, #416]	; (800873c <tcp_process+0x2ac>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fc2f 	bl	8009e14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7d1b      	ldrb	r3, [r3, #20]
 80085ba:	3b02      	subs	r3, #2
 80085bc:	2b07      	cmp	r3, #7
 80085be:	f200 8337 	bhi.w	8008c30 <tcp_process+0x7a0>
 80085c2:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <tcp_process+0x138>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	08008819 	.word	0x08008819
 80085d0:	08008991 	.word	0x08008991
 80085d4:	080089bb 	.word	0x080089bb
 80085d8:	08008adf 	.word	0x08008adf
 80085dc:	08008991 	.word	0x08008991
 80085e0:	08008b6b 	.word	0x08008b6b
 80085e4:	08008bfb 	.word	0x08008bfb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80085e8:	4b4f      	ldr	r3, [pc, #316]	; (8008728 <tcp_process+0x298>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 0310 	and.w	r3, r3, #16
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 80e4 	beq.w	80087be <tcp_process+0x32e>
 80085f6:	4b4c      	ldr	r3, [pc, #304]	; (8008728 <tcp_process+0x298>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80dd 	beq.w	80087be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	4b48      	ldr	r3, [pc, #288]	; (800872c <tcp_process+0x29c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	f040 80d5 	bne.w	80087be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008614:	4b46      	ldr	r3, [pc, #280]	; (8008730 <tcp_process+0x2a0>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008626:	4b41      	ldr	r3, [pc, #260]	; (800872c <tcp_process+0x29c>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800862e:	4b44      	ldr	r3, [pc, #272]	; (8008740 <tcp_process+0x2b0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	89db      	ldrh	r3, [r3, #14]
 8008634:	b29a      	uxth	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008648:	4b39      	ldr	r3, [pc, #228]	; (8008730 <tcp_process+0x2a0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	1e5a      	subs	r2, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2204      	movs	r2, #4
 8008656:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	4618      	mov	r0, r3
 8008662:	f004 fb17 	bl	800cc94 <ip4_route>
 8008666:	4601      	mov	r1, r0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3304      	adds	r3, #4
 800866c:	461a      	mov	r2, r3
 800866e:	4620      	mov	r0, r4
 8008670:	f7ff f88c 	bl	800778c <tcp_eff_send_mss_netif>
 8008674:	4603      	mov	r3, r0
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008680:	009a      	lsls	r2, r3, #2
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	f241 111c 	movw	r1, #4380	; 0x111c
 800868c:	428b      	cmp	r3, r1
 800868e:	bf38      	it	cc
 8008690:	460b      	movcc	r3, r1
 8008692:	429a      	cmp	r2, r3
 8008694:	d204      	bcs.n	80086a0 <tcp_process+0x210>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	b29b      	uxth	r3, r3
 800869e:	e00d      	b.n	80086bc <tcp_process+0x22c>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d904      	bls.n	80086b8 <tcp_process+0x228>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	e001      	b.n	80086bc <tcp_process+0x22c>
 80086b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d106      	bne.n	80086da <tcp_process+0x24a>
 80086cc:	4b13      	ldr	r3, [pc, #76]	; (800871c <tcp_process+0x28c>)
 80086ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80086d2:	491c      	ldr	r1, [pc, #112]	; (8008744 <tcp_process+0x2b4>)
 80086d4:	4813      	ldr	r0, [pc, #76]	; (8008724 <tcp_process+0x294>)
 80086d6:	f005 fd13 	bl	800e100 <iprintf>
        --pcb->snd_queuelen;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d12a      	bne.n	800874c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <tcp_process+0x280>
 8008702:	4b06      	ldr	r3, [pc, #24]	; (800871c <tcp_process+0x28c>)
 8008704:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008708:	490f      	ldr	r1, [pc, #60]	; (8008748 <tcp_process+0x2b8>)
 800870a:	4806      	ldr	r0, [pc, #24]	; (8008724 <tcp_process+0x294>)
 800870c:	f005 fcf8 	bl	800e100 <iprintf>
          pcb->unsent = rseg->next;
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	66da      	str	r2, [r3, #108]	; 0x6c
 8008718:	e01c      	b.n	8008754 <tcp_process+0x2c4>
 800871a:	bf00      	nop
 800871c:	080103ec 	.word	0x080103ec
 8008720:	08010624 	.word	0x08010624
 8008724:	08010438 	.word	0x08010438
 8008728:	2400317c 	.word	0x2400317c
 800872c:	24003174 	.word	0x24003174
 8008730:	24003170 	.word	0x24003170
 8008734:	08010640 	.word	0x08010640
 8008738:	2400317d 	.word	0x2400317d
 800873c:	24003138 	.word	0x24003138
 8008740:	24003160 	.word	0x24003160
 8008744:	08010660 	.word	0x08010660
 8008748:	08010678 	.word	0x08010678
        } else {
          pcb->unacked = rseg->next;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008754:	69f8      	ldr	r0, [r7, #28]
 8008756:	f7fe fd22 	bl	800719e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	2b00      	cmp	r3, #0
 8008760:	d104      	bne.n	800876c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008768:	861a      	strh	r2, [r3, #48]	; 0x30
 800876a:	e006      	b.n	800877a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <tcp_process+0x30a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6910      	ldr	r0, [r2, #16]
 800878e:	2200      	movs	r2, #0
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4798      	blx	r3
 8008794:	4603      	mov	r3, r0
 8008796:	76bb      	strb	r3, [r7, #26]
 8008798:	e001      	b.n	800879e <tcp_process+0x30e>
 800879a:	2300      	movs	r3, #0
 800879c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800879e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80087a2:	f113 0f0d 	cmn.w	r3, #13
 80087a6:	d102      	bne.n	80087ae <tcp_process+0x31e>
          return ERR_ABRT;
 80087a8:	f06f 030c 	mvn.w	r3, #12
 80087ac:	e250      	b.n	8008c50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8b5b      	ldrh	r3, [r3, #26]
 80087b2:	f043 0302 	orr.w	r3, r3, #2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80087bc:	e23a      	b.n	8008c34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80087be:	4b98      	ldr	r3, [pc, #608]	; (8008a20 <tcp_process+0x590>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	f003 0310 	and.w	r3, r3, #16
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 8234 	beq.w	8008c34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087cc:	4b95      	ldr	r3, [pc, #596]	; (8008a24 <tcp_process+0x594>)
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	4b95      	ldr	r3, [pc, #596]	; (8008a28 <tcp_process+0x598>)
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b95      	ldr	r3, [pc, #596]	; (8008a2c <tcp_process+0x59c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087dc:	4b94      	ldr	r3, [pc, #592]	; (8008a30 <tcp_process+0x5a0>)
 80087de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087e4:	4a92      	ldr	r2, [pc, #584]	; (8008a30 <tcp_process+0x5a0>)
 80087e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087e8:	8812      	ldrh	r2, [r2, #0]
 80087ea:	b292      	uxth	r2, r2
 80087ec:	9202      	str	r2, [sp, #8]
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	4b90      	ldr	r3, [pc, #576]	; (8008a34 <tcp_process+0x5a4>)
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4b90      	ldr	r3, [pc, #576]	; (8008a38 <tcp_process+0x5a8>)
 80087f6:	4602      	mov	r2, r0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f002 fc85 	bl	800b108 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008804:	2b05      	cmp	r3, #5
 8008806:	f200 8215 	bhi.w	8008c34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f002 fa4f 	bl	800acb4 <tcp_rexmit_rto>
      break;
 8008816:	e20d      	b.n	8008c34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008818:	4b81      	ldr	r3, [pc, #516]	; (8008a20 <tcp_process+0x590>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 80a1 	beq.w	8008968 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008826:	4b7f      	ldr	r3, [pc, #508]	; (8008a24 <tcp_process+0x594>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	db7e      	blt.n	8008934 <tcp_process+0x4a4>
 8008836:	4b7b      	ldr	r3, [pc, #492]	; (8008a24 <tcp_process+0x594>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	dc77      	bgt.n	8008934 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2204      	movs	r2, #4
 8008848:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008852:	23fa      	movs	r3, #250	; 0xfa
 8008854:	76bb      	strb	r3, [r7, #26]
 8008856:	e01d      	b.n	8008894 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d106      	bne.n	8008870 <tcp_process+0x3e0>
 8008862:	4b76      	ldr	r3, [pc, #472]	; (8008a3c <tcp_process+0x5ac>)
 8008864:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008868:	4975      	ldr	r1, [pc, #468]	; (8008a40 <tcp_process+0x5b0>)
 800886a:	4876      	ldr	r0, [pc, #472]	; (8008a44 <tcp_process+0x5b4>)
 800886c:	f005 fc48 	bl	800e100 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <tcp_process+0x400>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6910      	ldr	r0, [r2, #16]
 8008884:	2200      	movs	r2, #0
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4798      	blx	r3
 800888a:	4603      	mov	r3, r0
 800888c:	76bb      	strb	r3, [r7, #26]
 800888e:	e001      	b.n	8008894 <tcp_process+0x404>
 8008890:	23f0      	movs	r3, #240	; 0xf0
 8008892:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008894:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800889c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80088a0:	f113 0f0d 	cmn.w	r3, #13
 80088a4:	d002      	beq.n	80088ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fd ff8e 	bl	80067c8 <tcp_abort>
            }
            return ERR_ABRT;
 80088ac:	f06f 030c 	mvn.w	r3, #12
 80088b0:	e1ce      	b.n	8008c50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fae0 	bl	8008e78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80088b8:	4b63      	ldr	r3, [pc, #396]	; (8008a48 <tcp_process+0x5b8>)
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <tcp_process+0x43c>
            recv_acked--;
 80088c0:	4b61      	ldr	r3, [pc, #388]	; (8008a48 <tcp_process+0x5b8>)
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	4b5f      	ldr	r3, [pc, #380]	; (8008a48 <tcp_process+0x5b8>)
 80088ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088d0:	009a      	lsls	r2, r3, #2
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf38      	it	cc
 80088e0:	460b      	movcc	r3, r1
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d204      	bcs.n	80088f0 <tcp_process+0x460>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	e00d      	b.n	800890c <tcp_process+0x47c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d904      	bls.n	8008908 <tcp_process+0x478>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	b29b      	uxth	r3, r3
 8008906:	e001      	b.n	800890c <tcp_process+0x47c>
 8008908:	f241 131c 	movw	r3, #4380	; 0x111c
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008912:	4b4e      	ldr	r3, [pc, #312]	; (8008a4c <tcp_process+0x5bc>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d037      	beq.n	800898e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8b5b      	ldrh	r3, [r3, #26]
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2207      	movs	r2, #7
 8008930:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008932:	e02c      	b.n	800898e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008934:	4b3b      	ldr	r3, [pc, #236]	; (8008a24 <tcp_process+0x594>)
 8008936:	6819      	ldr	r1, [r3, #0]
 8008938:	4b3b      	ldr	r3, [pc, #236]	; (8008a28 <tcp_process+0x598>)
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	4b3b      	ldr	r3, [pc, #236]	; (8008a2c <tcp_process+0x59c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008944:	4b3a      	ldr	r3, [pc, #232]	; (8008a30 <tcp_process+0x5a0>)
 8008946:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800894c:	4a38      	ldr	r2, [pc, #224]	; (8008a30 <tcp_process+0x5a0>)
 800894e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008950:	8812      	ldrh	r2, [r2, #0]
 8008952:	b292      	uxth	r2, r2
 8008954:	9202      	str	r2, [sp, #8]
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	4b36      	ldr	r3, [pc, #216]	; (8008a34 <tcp_process+0x5a4>)
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <tcp_process+0x5a8>)
 800895e:	4602      	mov	r2, r0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f002 fbd1 	bl	800b108 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008966:	e167      	b.n	8008c38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008968:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <tcp_process+0x590>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8161 	beq.w	8008c38 <tcp_process+0x7a8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	1e5a      	subs	r2, r3, #1
 800897c:	4b2b      	ldr	r3, [pc, #172]	; (8008a2c <tcp_process+0x59c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	429a      	cmp	r2, r3
 8008982:	f040 8159 	bne.w	8008c38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f002 f9b6 	bl	800acf8 <tcp_rexmit>
      break;
 800898c:	e154      	b.n	8008c38 <tcp_process+0x7a8>
 800898e:	e153      	b.n	8008c38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fa71 	bl	8008e78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008996:	4b2d      	ldr	r3, [pc, #180]	; (8008a4c <tcp_process+0x5bc>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	f003 0320 	and.w	r3, r3, #32
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 814c 	beq.w	8008c3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8b5b      	ldrh	r3, [r3, #26]
 80089a8:	f043 0302 	orr.w	r3, r3, #2
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2207      	movs	r2, #7
 80089b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80089b8:	e140      	b.n	8008c3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa5c 	bl	8008e78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80089c0:	4b22      	ldr	r3, [pc, #136]	; (8008a4c <tcp_process+0x5bc>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d071      	beq.n	8008ab0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80089cc:	4b14      	ldr	r3, [pc, #80]	; (8008a20 <tcp_process+0x590>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d060      	beq.n	8008a9a <tcp_process+0x60a>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <tcp_process+0x594>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d15a      	bne.n	8008a9a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d156      	bne.n	8008a9a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	8b5b      	ldrh	r3, [r3, #26]
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fe fdbc 	bl	8007578 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008a00:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <tcp_process+0x5c0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d105      	bne.n	8008a16 <tcp_process+0x586>
 8008a0a:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <tcp_process+0x5c0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4a0f      	ldr	r2, [pc, #60]	; (8008a50 <tcp_process+0x5c0>)
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	e02e      	b.n	8008a74 <tcp_process+0x5e4>
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <tcp_process+0x5c0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	e027      	b.n	8008a6e <tcp_process+0x5de>
 8008a1e:	bf00      	nop
 8008a20:	2400317c 	.word	0x2400317c
 8008a24:	24003174 	.word	0x24003174
 8008a28:	2400317a 	.word	0x2400317a
 8008a2c:	24003170 	.word	0x24003170
 8008a30:	24003160 	.word	0x24003160
 8008a34:	2400022c 	.word	0x2400022c
 8008a38:	24000230 	.word	0x24000230
 8008a3c:	080103ec 	.word	0x080103ec
 8008a40:	0801068c 	.word	0x0801068c
 8008a44:	08010438 	.word	0x08010438
 8008a48:	24003178 	.word	0x24003178
 8008a4c:	2400317d 	.word	0x2400317d
 8008a50:	24003144 	.word	0x24003144
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d104      	bne.n	8008a68 <tcp_process+0x5d8>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	e005      	b.n	8008a74 <tcp_process+0x5e4>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1ef      	bne.n	8008a54 <tcp_process+0x5c4>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	60da      	str	r2, [r3, #12]
 8008a7a:	4b77      	ldr	r3, [pc, #476]	; (8008c58 <tcp_process+0x7c8>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	220a      	movs	r2, #10
 8008a84:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008a86:	4b75      	ldr	r3, [pc, #468]	; (8008c5c <tcp_process+0x7cc>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60da      	str	r2, [r3, #12]
 8008a8e:	4a73      	ldr	r2, [pc, #460]	; (8008c5c <tcp_process+0x7cc>)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6013      	str	r3, [r2, #0]
 8008a94:	f002 fcfa 	bl	800b48c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008a98:	e0d2      	b.n	8008c40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8b5b      	ldrh	r3, [r3, #26]
 8008a9e:	f043 0302 	orr.w	r3, r3, #2
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2208      	movs	r2, #8
 8008aac:	751a      	strb	r2, [r3, #20]
      break;
 8008aae:	e0c7      	b.n	8008c40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ab0:	4b6b      	ldr	r3, [pc, #428]	; (8008c60 <tcp_process+0x7d0>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f003 0310 	and.w	r3, r3, #16
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 80c1 	beq.w	8008c40 <tcp_process+0x7b0>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ac2:	4b68      	ldr	r3, [pc, #416]	; (8008c64 <tcp_process+0x7d4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	f040 80ba 	bne.w	8008c40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f040 80b5 	bne.w	8008c40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2206      	movs	r2, #6
 8008ada:	751a      	strb	r2, [r3, #20]
      break;
 8008adc:	e0b0      	b.n	8008c40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f9ca 	bl	8008e78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008ae4:	4b60      	ldr	r3, [pc, #384]	; (8008c68 <tcp_process+0x7d8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80a9 	beq.w	8008c44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8b5b      	ldrh	r3, [r3, #26]
 8008af6:	f043 0302 	orr.w	r3, r3, #2
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fe fd39 	bl	8007578 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008b06:	4b59      	ldr	r3, [pc, #356]	; (8008c6c <tcp_process+0x7dc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d105      	bne.n	8008b1c <tcp_process+0x68c>
 8008b10:	4b56      	ldr	r3, [pc, #344]	; (8008c6c <tcp_process+0x7dc>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	4a55      	ldr	r2, [pc, #340]	; (8008c6c <tcp_process+0x7dc>)
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e013      	b.n	8008b44 <tcp_process+0x6b4>
 8008b1c:	4b53      	ldr	r3, [pc, #332]	; (8008c6c <tcp_process+0x7dc>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	e00c      	b.n	8008b3e <tcp_process+0x6ae>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d104      	bne.n	8008b38 <tcp_process+0x6a8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	60da      	str	r2, [r3, #12]
 8008b36:	e005      	b.n	8008b44 <tcp_process+0x6b4>
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1ef      	bne.n	8008b24 <tcp_process+0x694>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	4b43      	ldr	r3, [pc, #268]	; (8008c58 <tcp_process+0x7c8>)
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	220a      	movs	r2, #10
 8008b54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008b56:	4b41      	ldr	r3, [pc, #260]	; (8008c5c <tcp_process+0x7cc>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60da      	str	r2, [r3, #12]
 8008b5e:	4a3f      	ldr	r2, [pc, #252]	; (8008c5c <tcp_process+0x7cc>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	f002 fc92 	bl	800b48c <tcp_timer_needed>
      }
      break;
 8008b68:	e06c      	b.n	8008c44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f984 	bl	8008e78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008b70:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <tcp_process+0x7d0>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d065      	beq.n	8008c48 <tcp_process+0x7b8>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b80:	4b38      	ldr	r3, [pc, #224]	; (8008c64 <tcp_process+0x7d4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d15f      	bne.n	8008c48 <tcp_process+0x7b8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d15b      	bne.n	8008c48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7fe fcf1 	bl	8007578 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008b96:	4b35      	ldr	r3, [pc, #212]	; (8008c6c <tcp_process+0x7dc>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d105      	bne.n	8008bac <tcp_process+0x71c>
 8008ba0:	4b32      	ldr	r3, [pc, #200]	; (8008c6c <tcp_process+0x7dc>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	4a31      	ldr	r2, [pc, #196]	; (8008c6c <tcp_process+0x7dc>)
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e013      	b.n	8008bd4 <tcp_process+0x744>
 8008bac:	4b2f      	ldr	r3, [pc, #188]	; (8008c6c <tcp_process+0x7dc>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e00c      	b.n	8008bce <tcp_process+0x73e>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d104      	bne.n	8008bc8 <tcp_process+0x738>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	e005      	b.n	8008bd4 <tcp_process+0x744>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1ef      	bne.n	8008bb4 <tcp_process+0x724>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	60da      	str	r2, [r3, #12]
 8008bda:	4b1f      	ldr	r3, [pc, #124]	; (8008c58 <tcp_process+0x7c8>)
 8008bdc:	2201      	movs	r2, #1
 8008bde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	220a      	movs	r2, #10
 8008be4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008be6:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <tcp_process+0x7cc>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	4a1b      	ldr	r2, [pc, #108]	; (8008c5c <tcp_process+0x7cc>)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	f002 fc4a 	bl	800b48c <tcp_timer_needed>
      }
      break;
 8008bf8:	e026      	b.n	8008c48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f93c 	bl	8008e78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008c00:	4b17      	ldr	r3, [pc, #92]	; (8008c60 <tcp_process+0x7d0>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	f003 0310 	and.w	r3, r3, #16
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01f      	beq.n	8008c4c <tcp_process+0x7bc>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c10:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <tcp_process+0x7d4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d119      	bne.n	8008c4c <tcp_process+0x7bc>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d115      	bne.n	8008c4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <tcp_process+0x7d8>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f043 0310 	orr.w	r3, r3, #16
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <tcp_process+0x7d8>)
 8008c2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008c2e:	e00d      	b.n	8008c4c <tcp_process+0x7bc>
    default:
      break;
 8008c30:	bf00      	nop
 8008c32:	e00c      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c34:	bf00      	nop
 8008c36:	e00a      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e008      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c3c:	bf00      	nop
 8008c3e:	e006      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c40:	bf00      	nop
 8008c42:	e004      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c44:	bf00      	nop
 8008c46:	e002      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <tcp_process+0x7be>
      break;
 8008c4c:	bf00      	nop
  }
  return ERR_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3724      	adds	r7, #36	; 0x24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd90      	pop	{r4, r7, pc}
 8008c58:	2400314c 	.word	0x2400314c
 8008c5c:	24003148 	.word	0x24003148
 8008c60:	2400317c 	.word	0x2400317c
 8008c64:	24003174 	.word	0x24003174
 8008c68:	2400317d 	.word	0x2400317d
 8008c6c:	24003144 	.word	0x24003144

08008c70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008c70:	b590      	push	{r4, r7, lr}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <tcp_oos_insert_segment+0x1e>
 8008c80:	4b3b      	ldr	r3, [pc, #236]	; (8008d70 <tcp_oos_insert_segment+0x100>)
 8008c82:	f240 421f 	movw	r2, #1055	; 0x41f
 8008c86:	493b      	ldr	r1, [pc, #236]	; (8008d74 <tcp_oos_insert_segment+0x104>)
 8008c88:	483b      	ldr	r0, [pc, #236]	; (8008d78 <tcp_oos_insert_segment+0x108>)
 8008c8a:	f005 fa39 	bl	800e100 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	899b      	ldrh	r3, [r3, #12]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fb fbf8 	bl	800448c <lwip_htons>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d028      	beq.n	8008cfa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008ca8:	6838      	ldr	r0, [r7, #0]
 8008caa:	f7fe fa63 	bl	8007174 <tcp_segs_free>
    next = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	e056      	b.n	8008d62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	899b      	ldrh	r3, [r3, #12]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fb fbe5 	bl	800448c <lwip_htons>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00d      	beq.n	8008cea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	899b      	ldrh	r3, [r3, #12]
 8008cd4:	b29c      	uxth	r4, r3
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	f7fb fbd8 	bl	800448c <lwip_htons>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	4322      	orrs	r2, r4
 8008ce6:	b292      	uxth	r2, r2
 8008ce8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7fe fa52 	bl	800719e <tcp_seg_free>
    while (next &&
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00e      	beq.n	8008d1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	891b      	ldrh	r3, [r3, #8]
 8008d04:	461a      	mov	r2, r3
 8008d06:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <tcp_oos_insert_segment+0x10c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	441a      	add	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	8909      	ldrh	r1, [r1, #8]
 8008d16:	440b      	add	r3, r1
 8008d18:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	daca      	bge.n	8008cb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01e      	beq.n	8008d62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	891b      	ldrh	r3, [r3, #8]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <tcp_oos_insert_segment+0x10c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	441a      	add	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dd12      	ble.n	8008d62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <tcp_oos_insert_segment+0x10c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	891b      	ldrh	r3, [r3, #8]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	f7fc fe25 	bl	80059ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	601a      	str	r2, [r3, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd90      	pop	{r4, r7, pc}
 8008d70:	080103ec 	.word	0x080103ec
 8008d74:	080106ac 	.word	0x080106ac
 8008d78:	08010438 	.word	0x08010438
 8008d7c:	24003170 	.word	0x24003170

08008d80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008d8e:	e03e      	b.n	8008e0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fd f812 	bl	8005dc8 <pbuf_clen>
 8008da4:	4603      	mov	r3, r0
 8008da6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008dae:	8a7a      	ldrh	r2, [r7, #18]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d906      	bls.n	8008dc2 <tcp_free_acked_segments+0x42>
 8008db4:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <tcp_free_acked_segments+0xe0>)
 8008db6:	f240 4257 	movw	r2, #1111	; 0x457
 8008dba:	492a      	ldr	r1, [pc, #168]	; (8008e64 <tcp_free_acked_segments+0xe4>)
 8008dbc:	482a      	ldr	r0, [pc, #168]	; (8008e68 <tcp_free_acked_segments+0xe8>)
 8008dbe:	f005 f99f 	bl	800e100 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008dc8:	8a7b      	ldrh	r3, [r7, #18]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	891a      	ldrh	r2, [r3, #8]
 8008dd8:	4b24      	ldr	r3, [pc, #144]	; (8008e6c <tcp_free_acked_segments+0xec>)
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	4413      	add	r3, r2
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	4b22      	ldr	r3, [pc, #136]	; (8008e6c <tcp_free_acked_segments+0xec>)
 8008de2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008de4:	6978      	ldr	r0, [r7, #20]
 8008de6:	f7fe f9da 	bl	800719e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00c      	beq.n	8008e0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d109      	bne.n	8008e0e <tcp_free_acked_segments+0x8e>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d106      	bne.n	8008e0e <tcp_free_acked_segments+0x8e>
 8008e00:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <tcp_free_acked_segments+0xe0>)
 8008e02:	f240 4261 	movw	r2, #1121	; 0x461
 8008e06:	491a      	ldr	r1, [pc, #104]	; (8008e70 <tcp_free_acked_segments+0xf0>)
 8008e08:	4817      	ldr	r0, [pc, #92]	; (8008e68 <tcp_free_acked_segments+0xe8>)
 8008e0a:	f005 f979 	bl	800e100 <iprintf>
  while (seg_list != NULL &&
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d020      	beq.n	8008e56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fb fb4b 	bl	80044b6 <lwip_htonl>
 8008e20:	4604      	mov	r4, r0
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	891b      	ldrh	r3, [r3, #8]
 8008e26:	461d      	mov	r5, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fb fb2b 	bl	800448c <lwip_htons>
 8008e36:	4603      	mov	r3, r0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <tcp_free_acked_segments+0xc6>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <tcp_free_acked_segments+0xc8>
 8008e46:	2300      	movs	r3, #0
 8008e48:	442b      	add	r3, r5
 8008e4a:	18e2      	adds	r2, r4, r3
 8008e4c:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <tcp_free_acked_segments+0xf4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dd9c      	ble.n	8008d90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008e56:	68bb      	ldr	r3, [r7, #8]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e60:	080103ec 	.word	0x080103ec
 8008e64:	080106d4 	.word	0x080106d4
 8008e68:	08010438 	.word	0x08010438
 8008e6c:	24003178 	.word	0x24003178
 8008e70:	080106fc 	.word	0x080106fc
 8008e74:	24003174 	.word	0x24003174

08008e78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008e78:	b5b0      	push	{r4, r5, r7, lr}
 8008e7a:	b094      	sub	sp, #80	; 0x50
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <tcp_receive+0x20>
 8008e8a:	4b91      	ldr	r3, [pc, #580]	; (80090d0 <tcp_receive+0x258>)
 8008e8c:	f240 427b 	movw	r2, #1147	; 0x47b
 8008e90:	4990      	ldr	r1, [pc, #576]	; (80090d4 <tcp_receive+0x25c>)
 8008e92:	4891      	ldr	r0, [pc, #580]	; (80090d8 <tcp_receive+0x260>)
 8008e94:	f005 f934 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7d1b      	ldrb	r3, [r3, #20]
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d806      	bhi.n	8008eae <tcp_receive+0x36>
 8008ea0:	4b8b      	ldr	r3, [pc, #556]	; (80090d0 <tcp_receive+0x258>)
 8008ea2:	f240 427c 	movw	r2, #1148	; 0x47c
 8008ea6:	498d      	ldr	r1, [pc, #564]	; (80090dc <tcp_receive+0x264>)
 8008ea8:	488b      	ldr	r0, [pc, #556]	; (80090d8 <tcp_receive+0x260>)
 8008eaa:	f005 f929 	bl	800e100 <iprintf>

  if (flags & TCP_ACK) {
 8008eae:	4b8c      	ldr	r3, [pc, #560]	; (80090e0 <tcp_receive+0x268>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f003 0310 	and.w	r3, r3, #16
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 8264 	beq.w	8009384 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec8:	4413      	add	r3, r2
 8008eca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ed0:	4b84      	ldr	r3, [pc, #528]	; (80090e4 <tcp_receive+0x26c>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	db1b      	blt.n	8008f12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ede:	4b81      	ldr	r3, [pc, #516]	; (80090e4 <tcp_receive+0x26c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d106      	bne.n	8008ef4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008eea:	4b7f      	ldr	r3, [pc, #508]	; (80090e8 <tcp_receive+0x270>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	db0e      	blt.n	8008f12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ef8:	4b7b      	ldr	r3, [pc, #492]	; (80090e8 <tcp_receive+0x270>)
 8008efa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d125      	bne.n	8008f4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008f00:	4b7a      	ldr	r3, [pc, #488]	; (80090ec <tcp_receive+0x274>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	89db      	ldrh	r3, [r3, #14]
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d91c      	bls.n	8008f4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008f12:	4b76      	ldr	r3, [pc, #472]	; (80090ec <tcp_receive+0x274>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	89db      	ldrh	r3, [r3, #14]
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d205      	bcs.n	8008f3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008f3c:	4b69      	ldr	r3, [pc, #420]	; (80090e4 <tcp_receive+0x26c>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008f44:	4b68      	ldr	r3, [pc, #416]	; (80090e8 <tcp_receive+0x270>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008f4c:	4b66      	ldr	r3, [pc, #408]	; (80090e8 <tcp_receive+0x270>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc58      	bgt.n	800900c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008f5a:	4b65      	ldr	r3, [pc, #404]	; (80090f0 <tcp_receive+0x278>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d14b      	bne.n	8008ffa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008f6c:	4413      	add	r3, r2
 8008f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d142      	bne.n	8008ffa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db3d      	blt.n	8008ffa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f82:	4b59      	ldr	r3, [pc, #356]	; (80090e8 <tcp_receive+0x270>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d137      	bne.n	8008ffa <tcp_receive+0x182>
              found_dupack = 1;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f94:	2bff      	cmp	r3, #255	; 0xff
 8008f96:	d007      	beq.n	8008fa8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d91b      	bls.n	8008fea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fbc:	4413      	add	r3, r2
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d30a      	bcc.n	8008fe0 <tcp_receive+0x168>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fd4:	4413      	add	r3, r2
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008fde:	e004      	b.n	8008fea <tcp_receive+0x172>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d902      	bls.n	8008ffa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 feeb 	bl	800add0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f040 8161 	bne.w	80092c4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800900a:	e15b      	b.n	80092c4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800900c:	4b36      	ldr	r3, [pc, #216]	; (80090e8 <tcp_receive+0x270>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	f2c0 814e 	blt.w	80092ba <tcp_receive+0x442>
 800901e:	4b32      	ldr	r3, [pc, #200]	; (80090e8 <tcp_receive+0x270>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	f300 8146 	bgt.w	80092ba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8b5b      	ldrh	r3, [r3, #26]
 8009032:	f003 0304 	and.w	r3, r3, #4
 8009036:	2b00      	cmp	r3, #0
 8009038:	d010      	beq.n	800905c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8b5b      	ldrh	r3, [r3, #26]
 800903e:	f023 0304 	bic.w	r3, r3, #4
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800906a:	10db      	asrs	r3, r3, #3
 800906c:	b21b      	sxth	r3, r3
 800906e:	b29a      	uxth	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009076:	b29b      	uxth	r3, r3
 8009078:	4413      	add	r3, r2
 800907a:	b29b      	uxth	r3, r3
 800907c:	b21a      	sxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009084:	4b18      	ldr	r3, [pc, #96]	; (80090e8 <tcp_receive+0x270>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908e:	b29b      	uxth	r3, r3
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800909c:	4b12      	ldr	r3, [pc, #72]	; (80090e8 <tcp_receive+0x270>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7d1b      	ldrb	r3, [r3, #20]
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	f240 8097 	bls.w	80091dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d245      	bcs.n	800914a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	8b5b      	ldrh	r3, [r3, #26]
 80090c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d014      	beq.n	80090f4 <tcp_receive+0x27c>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e013      	b.n	80090f6 <tcp_receive+0x27e>
 80090ce:	bf00      	nop
 80090d0:	080103ec 	.word	0x080103ec
 80090d4:	0801071c 	.word	0x0801071c
 80090d8:	08010438 	.word	0x08010438
 80090dc:	08010738 	.word	0x08010738
 80090e0:	2400317c 	.word	0x2400317c
 80090e4:	24003170 	.word	0x24003170
 80090e8:	24003174 	.word	0x24003174
 80090ec:	24003160 	.word	0x24003160
 80090f0:	2400317a 	.word	0x2400317a
 80090f4:	2302      	movs	r3, #2
 80090f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80090fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009104:	fb12 f303 	smulbb	r3, r2, r3
 8009108:	b29b      	uxth	r3, r3
 800910a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800910c:	4293      	cmp	r3, r2
 800910e:	bf28      	it	cs
 8009110:	4613      	movcs	r3, r2
 8009112:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800911a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800911c:	4413      	add	r3, r2
 800911e:	b29a      	uxth	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009126:	429a      	cmp	r2, r3
 8009128:	d309      	bcc.n	800913e <tcp_receive+0x2c6>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009132:	4413      	add	r3, r2
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800913c:	e04e      	b.n	80091dc <tcp_receive+0x364>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009144:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009148:	e048      	b.n	80091dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009150:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009152:	4413      	add	r3, r2
 8009154:	b29a      	uxth	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800915c:	429a      	cmp	r2, r3
 800915e:	d309      	bcc.n	8009174 <tcp_receive+0x2fc>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009166:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009168:	4413      	add	r3, r2
 800916a:	b29a      	uxth	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009172:	e004      	b.n	800917e <tcp_receive+0x306>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800917a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800918a:	429a      	cmp	r2, r3
 800918c:	d326      	bcc.n	80091dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	b29a      	uxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091ae:	4413      	add	r3, r2
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d30a      	bcc.n	80091d2 <tcp_receive+0x35a>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091c6:	4413      	add	r3, r2
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80091d0:	e004      	b.n	80091dc <tcp_receive+0x364>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e4:	4a98      	ldr	r2, [pc, #608]	; (8009448 <tcp_receive+0x5d0>)
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fdca 	bl	8008d80 <tcp_free_acked_segments>
 80091ec:	4602      	mov	r2, r0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	4a94      	ldr	r2, [pc, #592]	; (800944c <tcp_receive+0x5d4>)
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff fdbf 	bl	8008d80 <tcp_free_acked_segments>
 8009202:	4602      	mov	r2, r0
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	2b00      	cmp	r3, #0
 800920e:	d104      	bne.n	800921a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009216:	861a      	strh	r2, [r3, #48]	; 0x30
 8009218:	e002      	b.n	8009220 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800923c:	4b84      	ldr	r3, [pc, #528]	; (8009450 <tcp_receive+0x5d8>)
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	4413      	add	r3, r2
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8b5b      	ldrh	r3, [r3, #26]
 800924e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009252:	2b00      	cmp	r3, #0
 8009254:	d035      	beq.n	80092c2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925a:	2b00      	cmp	r3, #0
 800925c:	d118      	bne.n	8009290 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00c      	beq.n	8009280 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	4618      	mov	r0, r3
 8009274:	f7fb f91f 	bl	80044b6 <lwip_htonl>
 8009278:	4603      	mov	r3, r0
 800927a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800927c:	2b00      	cmp	r3, #0
 800927e:	dc20      	bgt.n	80092c2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	8b5b      	ldrh	r3, [r3, #26]
 8009284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800928e:	e018      	b.n	80092c2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4618      	mov	r0, r3
 800929e:	f7fb f90a 	bl	80044b6 <lwip_htonl>
 80092a2:	4603      	mov	r3, r0
 80092a4:	1ae3      	subs	r3, r4, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	dc0b      	bgt.n	80092c2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	8b5b      	ldrh	r3, [r3, #26]
 80092ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80092b8:	e003      	b.n	80092c2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 ff76 	bl	800b1ac <tcp_send_empty_ack>
 80092c0:	e000      	b.n	80092c4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80092c2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d05b      	beq.n	8009384 <tcp_receive+0x50c>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d0:	4b60      	ldr	r3, [pc, #384]	; (8009454 <tcp_receive+0x5dc>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	da54      	bge.n	8009384 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80092da:	4b5f      	ldr	r3, [pc, #380]	; (8009458 <tcp_receive+0x5e0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80092ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80092f8:	10db      	asrs	r3, r3, #3
 80092fa:	b21b      	sxth	r3, r3
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	b29b      	uxth	r3, r3
 8009302:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800930c:	b29a      	uxth	r2, r3
 800930e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009312:	4413      	add	r3, r2
 8009314:	b29b      	uxth	r3, r3
 8009316:	b21a      	sxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800931c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009320:	2b00      	cmp	r3, #0
 8009322:	da05      	bge.n	8009330 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009328:	425b      	negs	r3, r3
 800932a:	b29b      	uxth	r3, r3
 800932c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009330:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800933a:	109b      	asrs	r3, r3, #2
 800933c:	b21b      	sxth	r3, r3
 800933e:	b29b      	uxth	r3, r3
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800934e:	b29a      	uxth	r2, r3
 8009350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009354:	4413      	add	r3, r2
 8009356:	b29b      	uxth	r3, r3
 8009358:	b21a      	sxth	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009364:	10db      	asrs	r3, r3, #3
 8009366:	b21b      	sxth	r3, r3
 8009368:	b29a      	uxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009370:	b29b      	uxth	r3, r3
 8009372:	4413      	add	r3, r2
 8009374:	b29b      	uxth	r3, r3
 8009376:	b21a      	sxth	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009384:	4b35      	ldr	r3, [pc, #212]	; (800945c <tcp_receive+0x5e4>)
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 84e2 	beq.w	8009d52 <tcp_receive+0xeda>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	7d1b      	ldrb	r3, [r3, #20]
 8009392:	2b06      	cmp	r3, #6
 8009394:	f200 84dd 	bhi.w	8009d52 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800939c:	4b30      	ldr	r3, [pc, #192]	; (8009460 <tcp_receive+0x5e8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	3b01      	subs	r3, #1
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f2c0 808f 	blt.w	80094c8 <tcp_receive+0x650>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ae:	4b2b      	ldr	r3, [pc, #172]	; (800945c <tcp_receive+0x5e4>)
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	4619      	mov	r1, r3
 80093b4:	4b2a      	ldr	r3, [pc, #168]	; (8009460 <tcp_receive+0x5e8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	440b      	add	r3, r1
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	3301      	adds	r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f300 8082 	bgt.w	80094c8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80093c4:	4b27      	ldr	r3, [pc, #156]	; (8009464 <tcp_receive+0x5ec>)
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ce:	4b24      	ldr	r3, [pc, #144]	; (8009460 <tcp_receive+0x5e8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80093d6:	4b23      	ldr	r3, [pc, #140]	; (8009464 <tcp_receive+0x5ec>)
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <tcp_receive+0x574>
 80093de:	4b22      	ldr	r3, [pc, #136]	; (8009468 <tcp_receive+0x5f0>)
 80093e0:	f240 5294 	movw	r2, #1428	; 0x594
 80093e4:	4921      	ldr	r1, [pc, #132]	; (800946c <tcp_receive+0x5f4>)
 80093e6:	4822      	ldr	r0, [pc, #136]	; (8009470 <tcp_receive+0x5f8>)
 80093e8:	f004 fe8a 	bl	800e100 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d906      	bls.n	8009404 <tcp_receive+0x58c>
 80093f6:	4b1c      	ldr	r3, [pc, #112]	; (8009468 <tcp_receive+0x5f0>)
 80093f8:	f240 5295 	movw	r2, #1429	; 0x595
 80093fc:	491d      	ldr	r1, [pc, #116]	; (8009474 <tcp_receive+0x5fc>)
 80093fe:	481c      	ldr	r0, [pc, #112]	; (8009470 <tcp_receive+0x5f8>)
 8009400:	f004 fe7e 	bl	800e100 <iprintf>
      off = (u16_t)off32;
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800940a:	4b16      	ldr	r3, [pc, #88]	; (8009464 <tcp_receive+0x5ec>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	891b      	ldrh	r3, [r3, #8]
 8009410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009414:	429a      	cmp	r2, r3
 8009416:	d906      	bls.n	8009426 <tcp_receive+0x5ae>
 8009418:	4b13      	ldr	r3, [pc, #76]	; (8009468 <tcp_receive+0x5f0>)
 800941a:	f240 5297 	movw	r2, #1431	; 0x597
 800941e:	4916      	ldr	r1, [pc, #88]	; (8009478 <tcp_receive+0x600>)
 8009420:	4813      	ldr	r0, [pc, #76]	; (8009470 <tcp_receive+0x5f8>)
 8009422:	f004 fe6d 	bl	800e100 <iprintf>
      inseg.len -= off;
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <tcp_receive+0x5ec>)
 8009428:	891a      	ldrh	r2, [r3, #8]
 800942a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	b29a      	uxth	r2, r3
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <tcp_receive+0x5ec>)
 8009434:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009436:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <tcp_receive+0x5ec>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	891a      	ldrh	r2, [r3, #8]
 800943c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009444:	e02a      	b.n	800949c <tcp_receive+0x624>
 8009446:	bf00      	nop
 8009448:	08010754 	.word	0x08010754
 800944c:	0801075c 	.word	0x0801075c
 8009450:	24003178 	.word	0x24003178
 8009454:	24003174 	.word	0x24003174
 8009458:	24003138 	.word	0x24003138
 800945c:	2400317a 	.word	0x2400317a
 8009460:	24003170 	.word	0x24003170
 8009464:	24003150 	.word	0x24003150
 8009468:	080103ec 	.word	0x080103ec
 800946c:	08010764 	.word	0x08010764
 8009470:	08010438 	.word	0x08010438
 8009474:	08010774 	.word	0x08010774
 8009478:	08010784 	.word	0x08010784
        off -= p->len;
 800947c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947e:	895b      	ldrh	r3, [r3, #10]
 8009480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800948a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800948c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800948e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009492:	2200      	movs	r2, #0
 8009494:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800949c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949e:	895b      	ldrh	r3, [r3, #10]
 80094a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d8e9      	bhi.n	800947c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80094a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80094ac:	4619      	mov	r1, r3
 80094ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80094b0:	f7fc fb7c 	bl	8005bac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	4a91      	ldr	r2, [pc, #580]	; (8009700 <tcp_receive+0x888>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	4b91      	ldr	r3, [pc, #580]	; (8009704 <tcp_receive+0x88c>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	4a8f      	ldr	r2, [pc, #572]	; (8009700 <tcp_receive+0x888>)
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80094c6:	e00d      	b.n	80094e4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80094c8:	4b8d      	ldr	r3, [pc, #564]	; (8009700 <tcp_receive+0x888>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	da06      	bge.n	80094e4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	8b5b      	ldrh	r3, [r3, #26]
 80094da:	f043 0302 	orr.w	r3, r3, #2
 80094de:	b29a      	uxth	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80094e4:	4b86      	ldr	r3, [pc, #536]	; (8009700 <tcp_receive+0x888>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f2c0 842a 	blt.w	8009d48 <tcp_receive+0xed0>
 80094f4:	4b82      	ldr	r3, [pc, #520]	; (8009700 <tcp_receive+0x888>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009500:	440b      	add	r3, r1
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	3301      	adds	r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	f300 841e 	bgt.w	8009d48 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009510:	4b7b      	ldr	r3, [pc, #492]	; (8009700 <tcp_receive+0x888>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	f040 829a 	bne.w	8009a4e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800951a:	4b7a      	ldr	r3, [pc, #488]	; (8009704 <tcp_receive+0x88c>)
 800951c:	891c      	ldrh	r4, [r3, #8]
 800951e:	4b79      	ldr	r3, [pc, #484]	; (8009704 <tcp_receive+0x88c>)
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	899b      	ldrh	r3, [r3, #12]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4618      	mov	r0, r3
 8009528:	f7fa ffb0 	bl	800448c <lwip_htons>
 800952c:	4603      	mov	r3, r0
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 0303 	and.w	r3, r3, #3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <tcp_receive+0x6c4>
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <tcp_receive+0x6c6>
 800953c:	2300      	movs	r3, #0
 800953e:	4423      	add	r3, r4
 8009540:	b29a      	uxth	r2, r3
 8009542:	4b71      	ldr	r3, [pc, #452]	; (8009708 <tcp_receive+0x890>)
 8009544:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800954a:	4b6f      	ldr	r3, [pc, #444]	; (8009708 <tcp_receive+0x890>)
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d275      	bcs.n	800963e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009552:	4b6c      	ldr	r3, [pc, #432]	; (8009704 <tcp_receive+0x88c>)
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	899b      	ldrh	r3, [r3, #12]
 8009558:	b29b      	uxth	r3, r3
 800955a:	4618      	mov	r0, r3
 800955c:	f7fa ff96 	bl	800448c <lwip_htons>
 8009560:	4603      	mov	r3, r0
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01f      	beq.n	80095ac <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800956c:	4b65      	ldr	r3, [pc, #404]	; (8009704 <tcp_receive+0x88c>)
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	899b      	ldrh	r3, [r3, #12]
 8009572:	b29b      	uxth	r3, r3
 8009574:	b21b      	sxth	r3, r3
 8009576:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800957a:	b21c      	sxth	r4, r3
 800957c:	4b61      	ldr	r3, [pc, #388]	; (8009704 <tcp_receive+0x88c>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	899b      	ldrh	r3, [r3, #12]
 8009582:	b29b      	uxth	r3, r3
 8009584:	4618      	mov	r0, r3
 8009586:	f7fa ff81 	bl	800448c <lwip_htons>
 800958a:	4603      	mov	r3, r0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009594:	b29b      	uxth	r3, r3
 8009596:	4618      	mov	r0, r3
 8009598:	f7fa ff78 	bl	800448c <lwip_htons>
 800959c:	4603      	mov	r3, r0
 800959e:	b21b      	sxth	r3, r3
 80095a0:	4323      	orrs	r3, r4
 80095a2:	b21a      	sxth	r2, r3
 80095a4:	4b57      	ldr	r3, [pc, #348]	; (8009704 <tcp_receive+0x88c>)
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	b292      	uxth	r2, r2
 80095aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095b0:	4b54      	ldr	r3, [pc, #336]	; (8009704 <tcp_receive+0x88c>)
 80095b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80095b4:	4b53      	ldr	r3, [pc, #332]	; (8009704 <tcp_receive+0x88c>)
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	899b      	ldrh	r3, [r3, #12]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fa ff65 	bl	800448c <lwip_htons>
 80095c2:	4603      	mov	r3, r0
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <tcp_receive+0x762>
            inseg.len -= 1;
 80095ce:	4b4d      	ldr	r3, [pc, #308]	; (8009704 <tcp_receive+0x88c>)
 80095d0:	891b      	ldrh	r3, [r3, #8]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	4b4b      	ldr	r3, [pc, #300]	; (8009704 <tcp_receive+0x88c>)
 80095d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80095da:	4b4a      	ldr	r3, [pc, #296]	; (8009704 <tcp_receive+0x88c>)
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	4a49      	ldr	r2, [pc, #292]	; (8009704 <tcp_receive+0x88c>)
 80095e0:	8912      	ldrh	r2, [r2, #8]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fc f9e1 	bl	80059ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80095ea:	4b46      	ldr	r3, [pc, #280]	; (8009704 <tcp_receive+0x88c>)
 80095ec:	891c      	ldrh	r4, [r3, #8]
 80095ee:	4b45      	ldr	r3, [pc, #276]	; (8009704 <tcp_receive+0x88c>)
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	899b      	ldrh	r3, [r3, #12]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fa ff48 	bl	800448c <lwip_htons>
 80095fc:	4603      	mov	r3, r0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <tcp_receive+0x794>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <tcp_receive+0x796>
 800960c:	2300      	movs	r3, #0
 800960e:	4423      	add	r3, r4
 8009610:	b29a      	uxth	r2, r3
 8009612:	4b3d      	ldr	r3, [pc, #244]	; (8009708 <tcp_receive+0x890>)
 8009614:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009616:	4b3c      	ldr	r3, [pc, #240]	; (8009708 <tcp_receive+0x890>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	4b38      	ldr	r3, [pc, #224]	; (8009700 <tcp_receive+0x888>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800962a:	440b      	add	r3, r1
 800962c:	429a      	cmp	r2, r3
 800962e:	d006      	beq.n	800963e <tcp_receive+0x7c6>
 8009630:	4b36      	ldr	r3, [pc, #216]	; (800970c <tcp_receive+0x894>)
 8009632:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009636:	4936      	ldr	r1, [pc, #216]	; (8009710 <tcp_receive+0x898>)
 8009638:	4836      	ldr	r0, [pc, #216]	; (8009714 <tcp_receive+0x89c>)
 800963a:	f004 fd61 	bl	800e100 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 80e7 	beq.w	8009816 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009648:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <tcp_receive+0x88c>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	899b      	ldrh	r3, [r3, #12]
 800964e:	b29b      	uxth	r3, r3
 8009650:	4618      	mov	r0, r3
 8009652:	f7fa ff1b 	bl	800448c <lwip_htons>
 8009656:	4603      	mov	r3, r0
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d010      	beq.n	8009684 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009662:	e00a      	b.n	800967a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009668:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7fd fd92 	bl	800719e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1f0      	bne.n	8009664 <tcp_receive+0x7ec>
 8009682:	e0c8      	b.n	8009816 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009688:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800968a:	e052      	b.n	8009732 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800968c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	899b      	ldrh	r3, [r3, #12]
 8009692:	b29b      	uxth	r3, r3
 8009694:	4618      	mov	r0, r3
 8009696:	f7fa fef9 	bl	800448c <lwip_htons>
 800969a:	4603      	mov	r3, r0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d03d      	beq.n	8009722 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80096a6:	4b17      	ldr	r3, [pc, #92]	; (8009704 <tcp_receive+0x88c>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	899b      	ldrh	r3, [r3, #12]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fa feec 	bl	800448c <lwip_htons>
 80096b4:	4603      	mov	r3, r0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d130      	bne.n	8009722 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80096c0:	4b10      	ldr	r3, [pc, #64]	; (8009704 <tcp_receive+0x88c>)
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	899b      	ldrh	r3, [r3, #12]
 80096c6:	b29c      	uxth	r4, r3
 80096c8:	2001      	movs	r0, #1
 80096ca:	f7fa fedf 	bl	800448c <lwip_htons>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <tcp_receive+0x88c>)
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	4322      	orrs	r2, r4
 80096d8:	b292      	uxth	r2, r2
 80096da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80096dc:	4b09      	ldr	r3, [pc, #36]	; (8009704 <tcp_receive+0x88c>)
 80096de:	891c      	ldrh	r4, [r3, #8]
 80096e0:	4b08      	ldr	r3, [pc, #32]	; (8009704 <tcp_receive+0x88c>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fa fecf 	bl	800448c <lwip_htons>
 80096ee:	4603      	mov	r3, r0
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00e      	beq.n	8009718 <tcp_receive+0x8a0>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e00d      	b.n	800971a <tcp_receive+0x8a2>
 80096fe:	bf00      	nop
 8009700:	24003170 	.word	0x24003170
 8009704:	24003150 	.word	0x24003150
 8009708:	2400317a 	.word	0x2400317a
 800970c:	080103ec 	.word	0x080103ec
 8009710:	08010794 	.word	0x08010794
 8009714:	08010438 	.word	0x08010438
 8009718:	2300      	movs	r3, #0
 800971a:	4423      	add	r3, r4
 800971c:	b29a      	uxth	r2, r3
 800971e:	4b98      	ldr	r3, [pc, #608]	; (8009980 <tcp_receive+0xb08>)
 8009720:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009724:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800972c:	6938      	ldr	r0, [r7, #16]
 800972e:	f7fd fd36 	bl	800719e <tcp_seg_free>
            while (next &&
 8009732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00e      	beq.n	8009756 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009738:	4b91      	ldr	r3, [pc, #580]	; (8009980 <tcp_receive+0xb08>)
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	4b91      	ldr	r3, [pc, #580]	; (8009984 <tcp_receive+0xb0c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	441a      	add	r2, r3
 8009744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800974c:	8909      	ldrh	r1, [r1, #8]
 800974e:	440b      	add	r3, r1
 8009750:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009752:	2b00      	cmp	r3, #0
 8009754:	da9a      	bge.n	800968c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d059      	beq.n	8009810 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800975c:	4b88      	ldr	r3, [pc, #544]	; (8009980 <tcp_receive+0xb08>)
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	4b88      	ldr	r3, [pc, #544]	; (8009984 <tcp_receive+0xb0c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	441a      	add	r2, r3
 8009768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009770:	2b00      	cmp	r3, #0
 8009772:	dd4d      	ble.n	8009810 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	b29a      	uxth	r2, r3
 800977c:	4b81      	ldr	r3, [pc, #516]	; (8009984 <tcp_receive+0xb0c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	b29a      	uxth	r2, r3
 8009786:	4b80      	ldr	r3, [pc, #512]	; (8009988 <tcp_receive+0xb10>)
 8009788:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800978a:	4b7f      	ldr	r3, [pc, #508]	; (8009988 <tcp_receive+0xb10>)
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	b29b      	uxth	r3, r3
 8009792:	4618      	mov	r0, r3
 8009794:	f7fa fe7a 	bl	800448c <lwip_htons>
 8009798:	4603      	mov	r3, r0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <tcp_receive+0x938>
                inseg.len -= 1;
 80097a4:	4b78      	ldr	r3, [pc, #480]	; (8009988 <tcp_receive+0xb10>)
 80097a6:	891b      	ldrh	r3, [r3, #8]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	4b76      	ldr	r3, [pc, #472]	; (8009988 <tcp_receive+0xb10>)
 80097ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80097b0:	4b75      	ldr	r3, [pc, #468]	; (8009988 <tcp_receive+0xb10>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	4a74      	ldr	r2, [pc, #464]	; (8009988 <tcp_receive+0xb10>)
 80097b6:	8912      	ldrh	r2, [r2, #8]
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fc f8f6 	bl	80059ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80097c0:	4b71      	ldr	r3, [pc, #452]	; (8009988 <tcp_receive+0xb10>)
 80097c2:	891c      	ldrh	r4, [r3, #8]
 80097c4:	4b70      	ldr	r3, [pc, #448]	; (8009988 <tcp_receive+0xb10>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	899b      	ldrh	r3, [r3, #12]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fa fe5d 	bl	800448c <lwip_htons>
 80097d2:	4603      	mov	r3, r0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <tcp_receive+0x96a>
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <tcp_receive+0x96c>
 80097e2:	2300      	movs	r3, #0
 80097e4:	4423      	add	r3, r4
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	4b65      	ldr	r3, [pc, #404]	; (8009980 <tcp_receive+0xb08>)
 80097ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80097ec:	4b64      	ldr	r3, [pc, #400]	; (8009980 <tcp_receive+0xb08>)
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	461a      	mov	r2, r3
 80097f2:	4b64      	ldr	r3, [pc, #400]	; (8009984 <tcp_receive+0xb0c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	441a      	add	r2, r3
 80097f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d006      	beq.n	8009810 <tcp_receive+0x998>
 8009802:	4b62      	ldr	r3, [pc, #392]	; (800998c <tcp_receive+0xb14>)
 8009804:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009808:	4961      	ldr	r1, [pc, #388]	; (8009990 <tcp_receive+0xb18>)
 800980a:	4862      	ldr	r0, [pc, #392]	; (8009994 <tcp_receive+0xb1c>)
 800980c:	f004 fc78 	bl	800e100 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009814:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009816:	4b5a      	ldr	r3, [pc, #360]	; (8009980 <tcp_receive+0xb08>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	4b59      	ldr	r3, [pc, #356]	; (8009984 <tcp_receive+0xb0c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	441a      	add	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800982a:	4b55      	ldr	r3, [pc, #340]	; (8009980 <tcp_receive+0xb08>)
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d206      	bcs.n	8009840 <tcp_receive+0x9c8>
 8009832:	4b56      	ldr	r3, [pc, #344]	; (800998c <tcp_receive+0xb14>)
 8009834:	f240 6207 	movw	r2, #1543	; 0x607
 8009838:	4957      	ldr	r1, [pc, #348]	; (8009998 <tcp_receive+0xb20>)
 800983a:	4856      	ldr	r0, [pc, #344]	; (8009994 <tcp_receive+0xb1c>)
 800983c:	f004 fc60 	bl	800e100 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009844:	4b4e      	ldr	r3, [pc, #312]	; (8009980 <tcp_receive+0xb08>)
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	b29a      	uxth	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7fc ffc5 	bl	80067e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009856:	4b4c      	ldr	r3, [pc, #304]	; (8009988 <tcp_receive+0xb10>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	891b      	ldrh	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009860:	4b49      	ldr	r3, [pc, #292]	; (8009988 <tcp_receive+0xb10>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	4a4d      	ldr	r2, [pc, #308]	; (800999c <tcp_receive+0xb24>)
 8009866:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009868:	4b47      	ldr	r3, [pc, #284]	; (8009988 <tcp_receive+0xb10>)
 800986a:	2200      	movs	r2, #0
 800986c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800986e:	4b46      	ldr	r3, [pc, #280]	; (8009988 <tcp_receive+0xb10>)
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	899b      	ldrh	r3, [r3, #12]
 8009874:	b29b      	uxth	r3, r3
 8009876:	4618      	mov	r0, r3
 8009878:	f7fa fe08 	bl	800448c <lwip_htons>
 800987c:	4603      	mov	r3, r0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80b8 	beq.w	80099fa <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800988a:	4b45      	ldr	r3, [pc, #276]	; (80099a0 <tcp_receive+0xb28>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f043 0320 	orr.w	r3, r3, #32
 8009892:	b2da      	uxtb	r2, r3
 8009894:	4b42      	ldr	r3, [pc, #264]	; (80099a0 <tcp_receive+0xb28>)
 8009896:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009898:	e0af      	b.n	80099fa <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800989e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	4a36      	ldr	r2, [pc, #216]	; (8009984 <tcp_receive+0xb0c>)
 80098aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	461c      	mov	r4, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	899b      	ldrh	r3, [r3, #12]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fa fde6 	bl	800448c <lwip_htons>
 80098c0:	4603      	mov	r3, r0
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <tcp_receive+0xa58>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <tcp_receive+0xa5a>
 80098d0:	2300      	movs	r3, #0
 80098d2:	191a      	adds	r2, r3, r4
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	441a      	add	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e2:	461c      	mov	r4, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	891b      	ldrh	r3, [r3, #8]
 80098e8:	461d      	mov	r5, r3
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	899b      	ldrh	r3, [r3, #12]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fa fdca 	bl	800448c <lwip_htons>
 80098f8:	4603      	mov	r3, r0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <tcp_receive+0xa90>
 8009904:	2301      	movs	r3, #1
 8009906:	e000      	b.n	800990a <tcp_receive+0xa92>
 8009908:	2300      	movs	r3, #0
 800990a:	442b      	add	r3, r5
 800990c:	429c      	cmp	r4, r3
 800990e:	d206      	bcs.n	800991e <tcp_receive+0xaa6>
 8009910:	4b1e      	ldr	r3, [pc, #120]	; (800998c <tcp_receive+0xb14>)
 8009912:	f240 622b 	movw	r2, #1579	; 0x62b
 8009916:	4923      	ldr	r1, [pc, #140]	; (80099a4 <tcp_receive+0xb2c>)
 8009918:	481e      	ldr	r0, [pc, #120]	; (8009994 <tcp_receive+0xb1c>)
 800991a:	f004 fbf1 	bl	800e100 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	891b      	ldrh	r3, [r3, #8]
 8009922:	461c      	mov	r4, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	899b      	ldrh	r3, [r3, #12]
 800992a:	b29b      	uxth	r3, r3
 800992c:	4618      	mov	r0, r3
 800992e:	f7fa fdad 	bl	800448c <lwip_htons>
 8009932:	4603      	mov	r3, r0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <tcp_receive+0xaca>
 800993e:	2301      	movs	r3, #1
 8009940:	e000      	b.n	8009944 <tcp_receive+0xacc>
 8009942:	2300      	movs	r3, #0
 8009944:	1919      	adds	r1, r3, r4
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800994a:	b28b      	uxth	r3, r1
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	b29a      	uxth	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7fc ff43 	bl	80067e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	891b      	ldrh	r3, [r3, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d028      	beq.n	80099b6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009964:	4b0d      	ldr	r3, [pc, #52]	; (800999c <tcp_receive+0xb24>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01d      	beq.n	80099a8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800996c:	4b0b      	ldr	r3, [pc, #44]	; (800999c <tcp_receive+0xb24>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fc fa60 	bl	8005e3c <pbuf_cat>
 800997c:	e018      	b.n	80099b0 <tcp_receive+0xb38>
 800997e:	bf00      	nop
 8009980:	2400317a 	.word	0x2400317a
 8009984:	24003170 	.word	0x24003170
 8009988:	24003150 	.word	0x24003150
 800998c:	080103ec 	.word	0x080103ec
 8009990:	080107cc 	.word	0x080107cc
 8009994:	08010438 	.word	0x08010438
 8009998:	08010808 	.word	0x08010808
 800999c:	24003180 	.word	0x24003180
 80099a0:	2400317d 	.word	0x2400317d
 80099a4:	08010828 	.word	0x08010828
            } else {
              recv_data = cseg->p;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4a70      	ldr	r2, [pc, #448]	; (8009b70 <tcp_receive+0xcf8>)
 80099ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2200      	movs	r2, #0
 80099b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	899b      	ldrh	r3, [r3, #12]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fa fd64 	bl	800448c <lwip_htons>
 80099c4:	4603      	mov	r3, r0
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00d      	beq.n	80099ec <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80099d0:	4b68      	ldr	r3, [pc, #416]	; (8009b74 <tcp_receive+0xcfc>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f043 0320 	orr.w	r3, r3, #32
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	4b66      	ldr	r3, [pc, #408]	; (8009b74 <tcp_receive+0xcfc>)
 80099dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7d1b      	ldrb	r3, [r3, #20]
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d102      	bne.n	80099ec <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2207      	movs	r2, #7
 80099ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80099f4:	68b8      	ldr	r0, [r7, #8]
 80099f6:	f7fd fbd2 	bl	800719e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d008      	beq.n	8009a14 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	f43f af43 	beq.w	800989a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	8b5b      	ldrh	r3, [r3, #26]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <tcp_receive+0xbc6>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	8b5b      	ldrh	r3, [r3, #26]
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	835a      	strh	r2, [r3, #26]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	8b5b      	ldrh	r3, [r3, #26]
 8009a32:	f043 0302 	orr.w	r3, r3, #2
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009a3c:	e188      	b.n	8009d50 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8b5b      	ldrh	r3, [r3, #26]
 8009a42:	f043 0301 	orr.w	r3, r3, #1
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009a4c:	e180      	b.n	8009d50 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009a56:	4848      	ldr	r0, [pc, #288]	; (8009b78 <tcp_receive+0xd00>)
 8009a58:	f7fd fbba 	bl	80071d0 <tcp_seg_copy>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	675a      	str	r2, [r3, #116]	; 0x74
 8009a62:	e16d      	b.n	8009d40 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a6e:	e157      	b.n	8009d20 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	4b41      	ldr	r3, [pc, #260]	; (8009b7c <tcp_receive+0xd04>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d11d      	bne.n	8009aba <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009a7e:	4b3e      	ldr	r3, [pc, #248]	; (8009b78 <tcp_receive+0xd00>)
 8009a80:	891a      	ldrh	r2, [r3, #8]
 8009a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a84:	891b      	ldrh	r3, [r3, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	f240 814f 	bls.w	8009d2a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a8c:	483a      	ldr	r0, [pc, #232]	; (8009b78 <tcp_receive+0xd00>)
 8009a8e:	f7fd fb9f 	bl	80071d0 <tcp_seg_copy>
 8009a92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 8149 	beq.w	8009d2e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <tcp_receive+0xc32>
                    prev->next = cseg;
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	e002      	b.n	8009ab0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ab2:	6978      	ldr	r0, [r7, #20]
 8009ab4:	f7ff f8dc 	bl	8008c70 <tcp_oos_insert_segment>
                }
                break;
 8009ab8:	e139      	b.n	8009d2e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d117      	bne.n	8009af0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009ac0:	4b2e      	ldr	r3, [pc, #184]	; (8009b7c <tcp_receive+0xd04>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da57      	bge.n	8009b80 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ad0:	4829      	ldr	r0, [pc, #164]	; (8009b78 <tcp_receive+0xd00>)
 8009ad2:	f7fd fb7d 	bl	80071d0 <tcp_seg_copy>
 8009ad6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 8129 	beq.w	8009d32 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ae8:	69b8      	ldr	r0, [r7, #24]
 8009aea:	f7ff f8c1 	bl	8008c70 <tcp_oos_insert_segment>
                  }
                  break;
 8009aee:	e120      	b.n	8009d32 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009af0:	4b22      	ldr	r3, [pc, #136]	; (8009b7c <tcp_receive+0xd04>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	db3e      	blt.n	8009b80 <tcp_receive+0xd08>
 8009b02:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <tcp_receive+0xd04>)
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	3301      	adds	r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc35      	bgt.n	8009b80 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009b14:	4818      	ldr	r0, [pc, #96]	; (8009b78 <tcp_receive+0xd00>)
 8009b16:	f7fd fb5b 	bl	80071d0 <tcp_seg_copy>
 8009b1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 8109 	beq.w	8009d36 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b2c:	8912      	ldrh	r2, [r2, #8]
 8009b2e:	441a      	add	r2, r3
 8009b30:	4b12      	ldr	r3, [pc, #72]	; (8009b7c <tcp_receive+0xd04>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd12      	ble.n	8009b60 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009b3a:	4b10      	ldr	r3, [pc, #64]	; (8009b7c <tcp_receive+0xd04>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b56:	891b      	ldrh	r3, [r3, #8]
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	f7fb ff26 	bl	80059ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b68:	69f8      	ldr	r0, [r7, #28]
 8009b6a:	f7ff f881 	bl	8008c70 <tcp_oos_insert_segment>
                  }
                  break;
 8009b6e:	e0e2      	b.n	8009d36 <tcp_receive+0xebe>
 8009b70:	24003180 	.word	0x24003180
 8009b74:	2400317d 	.word	0x2400317d
 8009b78:	24003150 	.word	0x24003150
 8009b7c:	24003170 	.word	0x24003170
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 80c6 	bne.w	8009d1a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009b8e:	4b80      	ldr	r3, [pc, #512]	; (8009d90 <tcp_receive+0xf18>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f340 80bd 	ble.w	8009d1a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	899b      	ldrh	r3, [r3, #12]
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fa fc6f 	bl	800448c <lwip_htons>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f040 80bf 	bne.w	8009d3a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009bbc:	4875      	ldr	r0, [pc, #468]	; (8009d94 <tcp_receive+0xf1c>)
 8009bbe:	f7fd fb07 	bl	80071d0 <tcp_seg_copy>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 80b6 	beq.w	8009d3e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bda:	8912      	ldrh	r2, [r2, #8]
 8009bdc:	441a      	add	r2, r3
 8009bde:	4b6c      	ldr	r3, [pc, #432]	; (8009d90 <tcp_receive+0xf18>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd12      	ble.n	8009c0e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009be8:	4b69      	ldr	r3, [pc, #420]	; (8009d90 <tcp_receive+0xf18>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	891b      	ldrh	r3, [r3, #8]
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fb fecf 	bl	80059ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009c0e:	4b62      	ldr	r3, [pc, #392]	; (8009d98 <tcp_receive+0xf20>)
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	4b5e      	ldr	r3, [pc, #376]	; (8009d90 <tcp_receive+0xf18>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	441a      	add	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c22:	440b      	add	r3, r1
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f340 8089 	ble.w	8009d3e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	899b      	ldrh	r3, [r3, #12]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fa fc28 	bl	800448c <lwip_htons>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d022      	beq.n	8009c8e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	899b      	ldrh	r3, [r3, #12]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	b21b      	sxth	r3, r3
 8009c54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c58:	b21c      	sxth	r4, r3
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	899b      	ldrh	r3, [r3, #12]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fa fc11 	bl	800448c <lwip_htons>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fa fc08 	bl	800448c <lwip_htons>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	b21b      	sxth	r3, r3
 8009c80:	4323      	orrs	r3, r4
 8009c82:	b21a      	sxth	r2, r3
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	b292      	uxth	r2, r2
 8009c8c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c98:	4413      	add	r3, r2
 8009c9a:	b299      	uxth	r1, r3
 8009c9c:	4b3c      	ldr	r3, [pc, #240]	; (8009d90 <tcp_receive+0xf18>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	1a8a      	subs	r2, r1, r2
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	891b      	ldrh	r3, [r3, #8]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f7fb fe76 	bl	80059ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	891c      	ldrh	r4, [r3, #8]
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	899b      	ldrh	r3, [r3, #12]
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fa fbdb 	bl	800448c <lwip_htons>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <tcp_receive+0xe6e>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <tcp_receive+0xe70>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	4423      	add	r3, r4
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <tcp_receive+0xf20>)
 8009cee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009cf0:	4b29      	ldr	r3, [pc, #164]	; (8009d98 <tcp_receive+0xf20>)
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4b26      	ldr	r3, [pc, #152]	; (8009d90 <tcp_receive+0xf18>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d04:	440b      	add	r3, r1
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d019      	beq.n	8009d3e <tcp_receive+0xec6>
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <tcp_receive+0xf24>)
 8009d0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009d10:	4923      	ldr	r1, [pc, #140]	; (8009da0 <tcp_receive+0xf28>)
 8009d12:	4824      	ldr	r0, [pc, #144]	; (8009da4 <tcp_receive+0xf2c>)
 8009d14:	f004 f9f4 	bl	800e100 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009d18:	e011      	b.n	8009d3e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f47f aea4 	bne.w	8009a70 <tcp_receive+0xbf8>
 8009d28:	e00a      	b.n	8009d40 <tcp_receive+0xec8>
                break;
 8009d2a:	bf00      	nop
 8009d2c:	e008      	b.n	8009d40 <tcp_receive+0xec8>
                break;
 8009d2e:	bf00      	nop
 8009d30:	e006      	b.n	8009d40 <tcp_receive+0xec8>
                  break;
 8009d32:	bf00      	nop
 8009d34:	e004      	b.n	8009d40 <tcp_receive+0xec8>
                  break;
 8009d36:	bf00      	nop
 8009d38:	e002      	b.n	8009d40 <tcp_receive+0xec8>
                  break;
 8009d3a:	bf00      	nop
 8009d3c:	e000      	b.n	8009d40 <tcp_receive+0xec8>
                break;
 8009d3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 fa33 	bl	800b1ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009d46:	e003      	b.n	8009d50 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fa2f 	bl	800b1ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009d4e:	e01a      	b.n	8009d86 <tcp_receive+0xf0e>
 8009d50:	e019      	b.n	8009d86 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009d52:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <tcp_receive+0xf18>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	db0a      	blt.n	8009d76 <tcp_receive+0xefe>
 8009d60:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <tcp_receive+0xf18>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d6c:	440b      	add	r3, r1
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	3301      	adds	r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	dd07      	ble.n	8009d86 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8b5b      	ldrh	r3, [r3, #26]
 8009d7a:	f043 0302 	orr.w	r3, r3, #2
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009d84:	e7ff      	b.n	8009d86 <tcp_receive+0xf0e>
 8009d86:	bf00      	nop
 8009d88:	3750      	adds	r7, #80	; 0x50
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	24003170 	.word	0x24003170
 8009d94:	24003150 	.word	0x24003150
 8009d98:	2400317a 	.word	0x2400317a
 8009d9c:	080103ec 	.word	0x080103ec
 8009da0:	08010794 	.word	0x08010794
 8009da4:	08010438 	.word	0x08010438

08009da8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009dae:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <tcp_get_next_optbyte+0x5c>)
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	b291      	uxth	r1, r2
 8009db6:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <tcp_get_next_optbyte+0x5c>)
 8009db8:	8011      	strh	r1, [r2, #0]
 8009dba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009dbc:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <tcp_get_next_optbyte+0x60>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <tcp_get_next_optbyte+0x26>
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <tcp_get_next_optbyte+0x64>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	88fa      	ldrh	r2, [r7, #6]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d208      	bcs.n	8009de0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009dce:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <tcp_get_next_optbyte+0x68>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3314      	adds	r3, #20
 8009dd4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	4413      	add	r3, r2
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	e00b      	b.n	8009df8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <tcp_get_next_optbyte+0x64>)
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009dee:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <tcp_get_next_optbyte+0x60>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	797b      	ldrb	r3, [r7, #5]
 8009df4:	4413      	add	r3, r2
 8009df6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	2400316c 	.word	0x2400316c
 8009e08:	24003168 	.word	0x24003168
 8009e0c:	24003166 	.word	0x24003166
 8009e10:	24003160 	.word	0x24003160

08009e14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <tcp_parseopt+0x1c>
 8009e22:	4b32      	ldr	r3, [pc, #200]	; (8009eec <tcp_parseopt+0xd8>)
 8009e24:	f240 727d 	movw	r2, #1917	; 0x77d
 8009e28:	4931      	ldr	r1, [pc, #196]	; (8009ef0 <tcp_parseopt+0xdc>)
 8009e2a:	4832      	ldr	r0, [pc, #200]	; (8009ef4 <tcp_parseopt+0xe0>)
 8009e2c:	f004 f968 	bl	800e100 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009e30:	4b31      	ldr	r3, [pc, #196]	; (8009ef8 <tcp_parseopt+0xe4>)
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d055      	beq.n	8009ee4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009e38:	4b30      	ldr	r3, [pc, #192]	; (8009efc <tcp_parseopt+0xe8>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	e045      	b.n	8009ecc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009e40:	f7ff ffb2 	bl	8009da8 <tcp_get_next_optbyte>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d006      	beq.n	8009e5c <tcp_parseopt+0x48>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	dc2b      	bgt.n	8009eaa <tcp_parseopt+0x96>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d041      	beq.n	8009eda <tcp_parseopt+0xc6>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d127      	bne.n	8009eaa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009e5a:	e037      	b.n	8009ecc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009e5c:	f7ff ffa4 	bl	8009da8 <tcp_get_next_optbyte>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d13b      	bne.n	8009ede <tcp_parseopt+0xca>
 8009e66:	4b25      	ldr	r3, [pc, #148]	; (8009efc <tcp_parseopt+0xe8>)
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	4a22      	ldr	r2, [pc, #136]	; (8009ef8 <tcp_parseopt+0xe4>)
 8009e6e:	8812      	ldrh	r2, [r2, #0]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	da34      	bge.n	8009ede <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009e74:	f7ff ff98 	bl	8009da8 <tcp_get_next_optbyte>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	021b      	lsls	r3, r3, #8
 8009e7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009e80:	f7ff ff92 	bl	8009da8 <tcp_get_next_optbyte>
 8009e84:	4603      	mov	r3, r0
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	89bb      	ldrh	r3, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009e8e:	89bb      	ldrh	r3, [r7, #12]
 8009e90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009e94:	d804      	bhi.n	8009ea0 <tcp_parseopt+0x8c>
 8009e96:	89bb      	ldrh	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <tcp_parseopt+0x8c>
 8009e9c:	89ba      	ldrh	r2, [r7, #12]
 8009e9e:	e001      	b.n	8009ea4 <tcp_parseopt+0x90>
 8009ea0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009ea8:	e010      	b.n	8009ecc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009eaa:	f7ff ff7d 	bl	8009da8 <tcp_get_next_optbyte>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009eb2:	7afb      	ldrb	r3, [r7, #11]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d914      	bls.n	8009ee2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <tcp_parseopt+0xe8>)
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	3b02      	subs	r3, #2
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <tcp_parseopt+0xe8>)
 8009eca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <tcp_parseopt+0xe8>)
 8009ece:	881a      	ldrh	r2, [r3, #0]
 8009ed0:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <tcp_parseopt+0xe4>)
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d3b3      	bcc.n	8009e40 <tcp_parseopt+0x2c>
 8009ed8:	e004      	b.n	8009ee4 <tcp_parseopt+0xd0>
          return;
 8009eda:	bf00      	nop
 8009edc:	e002      	b.n	8009ee4 <tcp_parseopt+0xd0>
            return;
 8009ede:	bf00      	nop
 8009ee0:	e000      	b.n	8009ee4 <tcp_parseopt+0xd0>
            return;
 8009ee2:	bf00      	nop
      }
    }
  }
}
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	080103ec 	.word	0x080103ec
 8009ef0:	08010850 	.word	0x08010850
 8009ef4:	08010438 	.word	0x08010438
 8009ef8:	24003164 	.word	0x24003164
 8009efc:	2400316c 	.word	0x2400316c

08009f00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009f00:	b480      	push	{r7}
 8009f02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <tcp_trigger_input_pcb_close+0x1c>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	f043 0310 	orr.w	r3, r3, #16
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	4b03      	ldr	r3, [pc, #12]	; (8009f1c <tcp_trigger_input_pcb_close+0x1c>)
 8009f10:	701a      	strb	r2, [r3, #0]
}
 8009f12:	bf00      	nop
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2400317d 	.word	0x2400317d

08009f20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00a      	beq.n	8009f48 <tcp_route+0x28>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	7a1b      	ldrb	r3, [r3, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d006      	beq.n	8009f48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	7a1b      	ldrb	r3, [r3, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fb fb5a 	bl	80055f8 <netif_get_by_index>
 8009f44:	4603      	mov	r3, r0
 8009f46:	e003      	b.n	8009f50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f002 fea3 	bl	800cc94 <ip4_route>
 8009f4e:	4603      	mov	r3, r0
  }
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009f58:	b590      	push	{r4, r7, lr}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d105      	bne.n	8009f7a <tcp_create_segment+0x22>
 8009f6e:	4b44      	ldr	r3, [pc, #272]	; (800a080 <tcp_create_segment+0x128>)
 8009f70:	22a3      	movs	r2, #163	; 0xa3
 8009f72:	4944      	ldr	r1, [pc, #272]	; (800a084 <tcp_create_segment+0x12c>)
 8009f74:	4844      	ldr	r0, [pc, #272]	; (800a088 <tcp_create_segment+0x130>)
 8009f76:	f004 f8c3 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <tcp_create_segment+0x34>
 8009f80:	4b3f      	ldr	r3, [pc, #252]	; (800a080 <tcp_create_segment+0x128>)
 8009f82:	22a4      	movs	r2, #164	; 0xa4
 8009f84:	4941      	ldr	r1, [pc, #260]	; (800a08c <tcp_create_segment+0x134>)
 8009f86:	4840      	ldr	r0, [pc, #256]	; (800a088 <tcp_create_segment+0x130>)
 8009f88:	f004 f8ba 	bl	800e100 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009f8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f9a:	2003      	movs	r0, #3
 8009f9c:	f7fa ffa6 	bl	8004eec <memp_malloc>
 8009fa0:	6138      	str	r0, [r7, #16]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f7fb fe85 	bl	8005cb8 <pbuf_free>
    return NULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e061      	b.n	800a076 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009fb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	891a      	ldrh	r2, [r3, #8]
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d205      	bcs.n	8009fde <tcp_create_segment+0x86>
 8009fd2:	4b2b      	ldr	r3, [pc, #172]	; (800a080 <tcp_create_segment+0x128>)
 8009fd4:	22b0      	movs	r2, #176	; 0xb0
 8009fd6:	492e      	ldr	r1, [pc, #184]	; (800a090 <tcp_create_segment+0x138>)
 8009fd8:	482b      	ldr	r0, [pc, #172]	; (800a088 <tcp_create_segment+0x130>)
 8009fda:	f004 f891 	bl	800e100 <iprintf>
  seg->len = p->tot_len - optlen;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	891a      	ldrh	r2, [r3, #8]
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009fee:	2114      	movs	r1, #20
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f7fb fdcb 	bl	8005b8c <pbuf_add_header>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d004      	beq.n	800a006 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009ffc:	6938      	ldr	r0, [r7, #16]
 8009ffe:	f7fd f8ce 	bl	800719e <tcp_seg_free>
    return NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	e037      	b.n	800a076 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8ada      	ldrh	r2, [r3, #22]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	68dc      	ldr	r4, [r3, #12]
 800a018:	4610      	mov	r0, r2
 800a01a:	f7fa fa37 	bl	800448c <lwip_htons>
 800a01e:	4603      	mov	r3, r0
 800a020:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	8b1a      	ldrh	r2, [r3, #24]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	68dc      	ldr	r4, [r3, #12]
 800a02a:	4610      	mov	r0, r2
 800a02c:	f7fa fa2e 	bl	800448c <lwip_htons>
 800a030:	4603      	mov	r3, r0
 800a032:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	68dc      	ldr	r4, [r3, #12]
 800a038:	6838      	ldr	r0, [r7, #0]
 800a03a:	f7fa fa3c 	bl	80044b6 <lwip_htonl>
 800a03e:	4603      	mov	r3, r0
 800a040:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	089b      	lsrs	r3, r3, #2
 800a046:	b2db      	uxtb	r3, r3
 800a048:	b29b      	uxth	r3, r3
 800a04a:	3305      	adds	r3, #5
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	031b      	lsls	r3, r3, #12
 800a050:	b29a      	uxth	r2, r3
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	b29b      	uxth	r3, r3
 800a056:	4313      	orrs	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	68dc      	ldr	r4, [r3, #12]
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fa fa14 	bl	800448c <lwip_htons>
 800a064:	4603      	mov	r3, r0
 800a066:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	749a      	strb	r2, [r3, #18]
 800a070:	2200      	movs	r2, #0
 800a072:	74da      	strb	r2, [r3, #19]
  return seg;
 800a074:	693b      	ldr	r3, [r7, #16]
}
 800a076:	4618      	mov	r0, r3
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd90      	pop	{r4, r7, pc}
 800a07e:	bf00      	nop
 800a080:	0801086c 	.word	0x0801086c
 800a084:	080108a0 	.word	0x080108a0
 800a088:	080108c0 	.word	0x080108c0
 800a08c:	080108e8 	.word	0x080108e8
 800a090:	0801090c 	.word	0x0801090c

0800a094 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a094:	b590      	push	{r4, r7, lr}
 800a096:	b08b      	sub	sp, #44	; 0x2c
 800a098:	af02      	add	r7, sp, #8
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <tcp_split_unsent_seg+0x2c>
 800a0b2:	4b95      	ldr	r3, [pc, #596]	; (800a308 <tcp_split_unsent_seg+0x274>)
 800a0b4:	f240 324b 	movw	r2, #843	; 0x34b
 800a0b8:	4994      	ldr	r1, [pc, #592]	; (800a30c <tcp_split_unsent_seg+0x278>)
 800a0ba:	4895      	ldr	r0, [pc, #596]	; (800a310 <tcp_split_unsent_seg+0x27c>)
 800a0bc:	f004 f820 	bl	800e100 <iprintf>

  useg = pcb->unsent;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d102      	bne.n	800a0d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d0:	e116      	b.n	800a300 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a0d2:	887b      	ldrh	r3, [r7, #2]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d109      	bne.n	800a0ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a0d8:	4b8b      	ldr	r3, [pc, #556]	; (800a308 <tcp_split_unsent_seg+0x274>)
 800a0da:	f240 3253 	movw	r2, #851	; 0x353
 800a0de:	498d      	ldr	r1, [pc, #564]	; (800a314 <tcp_split_unsent_seg+0x280>)
 800a0e0:	488b      	ldr	r0, [pc, #556]	; (800a310 <tcp_split_unsent_seg+0x27c>)
 800a0e2:	f004 f80d 	bl	800e100 <iprintf>
    return ERR_VAL;
 800a0e6:	f06f 0305 	mvn.w	r3, #5
 800a0ea:	e109      	b.n	800a300 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	891b      	ldrh	r3, [r3, #8]
 800a0f0:	887a      	ldrh	r2, [r7, #2]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d301      	bcc.n	800a0fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e102      	b.n	800a300 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0fe:	887a      	ldrh	r2, [r7, #2]
 800a100:	429a      	cmp	r2, r3
 800a102:	d906      	bls.n	800a112 <tcp_split_unsent_seg+0x7e>
 800a104:	4b80      	ldr	r3, [pc, #512]	; (800a308 <tcp_split_unsent_seg+0x274>)
 800a106:	f240 325b 	movw	r2, #859	; 0x35b
 800a10a:	4983      	ldr	r1, [pc, #524]	; (800a318 <tcp_split_unsent_seg+0x284>)
 800a10c:	4880      	ldr	r0, [pc, #512]	; (800a310 <tcp_split_unsent_seg+0x27c>)
 800a10e:	f003 fff7 	bl	800e100 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	891b      	ldrh	r3, [r3, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <tcp_split_unsent_seg+0x94>
 800a11a:	4b7b      	ldr	r3, [pc, #492]	; (800a308 <tcp_split_unsent_seg+0x274>)
 800a11c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a120:	497e      	ldr	r1, [pc, #504]	; (800a31c <tcp_split_unsent_seg+0x288>)
 800a122:	487b      	ldr	r0, [pc, #492]	; (800a310 <tcp_split_unsent_seg+0x27c>)
 800a124:	f003 ffec 	bl	800e100 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	7a9b      	ldrb	r3, [r3, #10]
 800a12c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	891a      	ldrh	r2, [r3, #8]
 800a13e:	887b      	ldrh	r3, [r7, #2]
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	b29a      	uxth	r2, r3
 800a148:	89bb      	ldrh	r3, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a152:	4619      	mov	r1, r3
 800a154:	2036      	movs	r0, #54	; 0x36
 800a156:	f7fb facb 	bl	80056f0 <pbuf_alloc>
 800a15a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 80b7 	beq.w	800a2d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	891a      	ldrh	r2, [r3, #8]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	891b      	ldrh	r3, [r3, #8]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	b29a      	uxth	r2, r3
 800a172:	887b      	ldrh	r3, [r7, #2]
 800a174:	4413      	add	r3, r2
 800a176:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	6858      	ldr	r0, [r3, #4]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	18d1      	adds	r1, r2, r3
 800a184:	897b      	ldrh	r3, [r7, #10]
 800a186:	89ba      	ldrh	r2, [r7, #12]
 800a188:	f7fb ff80 	bl	800608c <pbuf_copy_partial>
 800a18c:	4603      	mov	r3, r0
 800a18e:	461a      	mov	r2, r3
 800a190:	89bb      	ldrh	r3, [r7, #12]
 800a192:	4293      	cmp	r3, r2
 800a194:	f040 809f 	bne.w	800a2d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	899b      	ldrh	r3, [r3, #12]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fa f973 	bl	800448c <lwip_htons>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a1b4:	7efb      	ldrb	r3, [r7, #27]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a1be:	7efb      	ldrb	r3, [r7, #27]
 800a1c0:	f023 0308 	bic.w	r3, r3, #8
 800a1c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a1c6:	7ebb      	ldrb	r3, [r7, #26]
 800a1c8:	f043 0308 	orr.w	r3, r3, #8
 800a1cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a1ce:	7efb      	ldrb	r3, [r7, #27]
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d007      	beq.n	800a1e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a1d8:	7efb      	ldrb	r3, [r7, #27]
 800a1da:	f023 0301 	bic.w	r3, r3, #1
 800a1de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a1e0:	7ebb      	ldrb	r3, [r7, #26]
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fa f961 	bl	80044b6 <lwip_htonl>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	887b      	ldrh	r3, [r7, #2]
 800a1f8:	18d1      	adds	r1, r2, r3
 800a1fa:	7eba      	ldrb	r2, [r7, #26]
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	460b      	mov	r3, r1
 800a202:	6939      	ldr	r1, [r7, #16]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff fea7 	bl	8009f58 <tcp_create_segment>
 800a20a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d063      	beq.n	800a2da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7fb fdd6 	bl	8005dc8 <pbuf_clen>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	b29a      	uxth	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	6858      	ldr	r0, [r3, #4]
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	891a      	ldrh	r2, [r3, #8]
 800a23a:	89bb      	ldrh	r3, [r7, #12]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	b29b      	uxth	r3, r3
 800a240:	4619      	mov	r1, r3
 800a242:	f7fb fbb3 	bl	80059ac <pbuf_realloc>
  useg->len -= remainder;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	891a      	ldrh	r2, [r3, #8]
 800a24a:	89bb      	ldrh	r3, [r7, #12]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	b29a      	uxth	r2, r3
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	899b      	ldrh	r3, [r3, #12]
 800a25a:	b29c      	uxth	r4, r3
 800a25c:	7efb      	ldrb	r3, [r7, #27]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4618      	mov	r0, r3
 800a262:	f7fa f913 	bl	800448c <lwip_htons>
 800a266:	4603      	mov	r3, r0
 800a268:	461a      	mov	r2, r3
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	4322      	orrs	r2, r4
 800a270:	b292      	uxth	r2, r2
 800a272:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fb fda5 	bl	8005dc8 <pbuf_clen>
 800a27e:	4603      	mov	r3, r0
 800a280:	461a      	mov	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a288:	4413      	add	r3, r2
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	f7fb fd96 	bl	8005dc8 <pbuf_clen>
 800a29c:	4603      	mov	r3, r0
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a2a6:	4413      	add	r3, r2
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	69fa      	ldr	r2, [r7, #28]
 800a2bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e016      	b.n	800a300 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a2d2:	bf00      	nop
 800a2d4:	e002      	b.n	800a2dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a2d6:	bf00      	nop
 800a2d8:	e000      	b.n	800a2dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a2da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d006      	beq.n	800a2f0 <tcp_split_unsent_seg+0x25c>
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <tcp_split_unsent_seg+0x274>)
 800a2e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a2e8:	490d      	ldr	r1, [pc, #52]	; (800a320 <tcp_split_unsent_seg+0x28c>)
 800a2ea:	4809      	ldr	r0, [pc, #36]	; (800a310 <tcp_split_unsent_seg+0x27c>)
 800a2ec:	f003 ff08 	bl	800e100 <iprintf>
  if (p != NULL) {
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d002      	beq.n	800a2fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a2f6:	6938      	ldr	r0, [r7, #16]
 800a2f8:	f7fb fcde 	bl	8005cb8 <pbuf_free>
  }

  return ERR_MEM;
 800a2fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a300:	4618      	mov	r0, r3
 800a302:	3724      	adds	r7, #36	; 0x24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}
 800a308:	0801086c 	.word	0x0801086c
 800a30c:	08010c00 	.word	0x08010c00
 800a310:	080108c0 	.word	0x080108c0
 800a314:	08010c24 	.word	0x08010c24
 800a318:	08010c48 	.word	0x08010c48
 800a31c:	08010c58 	.word	0x08010c58
 800a320:	08010c68 	.word	0x08010c68

0800a324 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a324:	b590      	push	{r4, r7, lr}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <tcp_send_fin+0x1c>
 800a332:	4b21      	ldr	r3, [pc, #132]	; (800a3b8 <tcp_send_fin+0x94>)
 800a334:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a338:	4920      	ldr	r1, [pc, #128]	; (800a3bc <tcp_send_fin+0x98>)
 800a33a:	4821      	ldr	r0, [pc, #132]	; (800a3c0 <tcp_send_fin+0x9c>)
 800a33c:	f003 fee0 	bl	800e100 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d02e      	beq.n	800a3a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34c:	60fb      	str	r3, [r7, #12]
 800a34e:	e002      	b.n	800a356 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f8      	bne.n	800a350 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	899b      	ldrh	r3, [r3, #12]
 800a364:	b29b      	uxth	r3, r3
 800a366:	4618      	mov	r0, r3
 800a368:	f7fa f890 	bl	800448c <lwip_htons>
 800a36c:	4603      	mov	r3, r0
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	2b00      	cmp	r3, #0
 800a376:	d116      	bne.n	800a3a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	899b      	ldrh	r3, [r3, #12]
 800a37e:	b29c      	uxth	r4, r3
 800a380:	2001      	movs	r0, #1
 800a382:	f7fa f883 	bl	800448c <lwip_htons>
 800a386:	4603      	mov	r3, r0
 800a388:	461a      	mov	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	4322      	orrs	r2, r4
 800a390:	b292      	uxth	r2, r2
 800a392:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8b5b      	ldrh	r3, [r3, #26]
 800a398:	f043 0320 	orr.w	r3, r3, #32
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e004      	b.n	800a3b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f80b 	bl	800a3c4 <tcp_enqueue_flags>
 800a3ae:	4603      	mov	r3, r0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd90      	pop	{r4, r7, pc}
 800a3b8:	0801086c 	.word	0x0801086c
 800a3bc:	08010c74 	.word	0x08010c74
 800a3c0:	080108c0 	.word	0x080108c0

0800a3c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08a      	sub	sp, #40	; 0x28
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a3d8:	78fb      	ldrb	r3, [r7, #3]
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d106      	bne.n	800a3f0 <tcp_enqueue_flags+0x2c>
 800a3e2:	4b67      	ldr	r3, [pc, #412]	; (800a580 <tcp_enqueue_flags+0x1bc>)
 800a3e4:	f240 4211 	movw	r2, #1041	; 0x411
 800a3e8:	4966      	ldr	r1, [pc, #408]	; (800a584 <tcp_enqueue_flags+0x1c0>)
 800a3ea:	4867      	ldr	r0, [pc, #412]	; (800a588 <tcp_enqueue_flags+0x1c4>)
 800a3ec:	f003 fe88 	bl	800e100 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <tcp_enqueue_flags+0x40>
 800a3f6:	4b62      	ldr	r3, [pc, #392]	; (800a580 <tcp_enqueue_flags+0x1bc>)
 800a3f8:	f240 4213 	movw	r2, #1043	; 0x413
 800a3fc:	4963      	ldr	r1, [pc, #396]	; (800a58c <tcp_enqueue_flags+0x1c8>)
 800a3fe:	4862      	ldr	r0, [pc, #392]	; (800a588 <tcp_enqueue_flags+0x1c4>)
 800a400:	f003 fe7e 	bl	800e100 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a40e:	2301      	movs	r3, #1
 800a410:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a412:	7ffb      	ldrb	r3, [r7, #31]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	b29b      	uxth	r3, r3
 800a422:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a426:	4619      	mov	r1, r3
 800a428:	2036      	movs	r0, #54	; 0x36
 800a42a:	f7fb f961 	bl	80056f0 <pbuf_alloc>
 800a42e:	6138      	str	r0, [r7, #16]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	8b5b      	ldrh	r3, [r3, #26]
 800a43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a444:	f04f 33ff 	mov.w	r3, #4294967295
 800a448:	e095      	b.n	800a576 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	895a      	ldrh	r2, [r3, #10]
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	b29b      	uxth	r3, r3
 800a452:	429a      	cmp	r2, r3
 800a454:	d206      	bcs.n	800a464 <tcp_enqueue_flags+0xa0>
 800a456:	4b4a      	ldr	r3, [pc, #296]	; (800a580 <tcp_enqueue_flags+0x1bc>)
 800a458:	f240 4239 	movw	r2, #1081	; 0x439
 800a45c:	494c      	ldr	r1, [pc, #304]	; (800a590 <tcp_enqueue_flags+0x1cc>)
 800a45e:	484a      	ldr	r0, [pc, #296]	; (800a588 <tcp_enqueue_flags+0x1c4>)
 800a460:	f003 fe4e 	bl	800e100 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a468:	78fa      	ldrb	r2, [r7, #3]
 800a46a:	7ffb      	ldrb	r3, [r7, #31]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	460b      	mov	r3, r1
 800a470:	6939      	ldr	r1, [r7, #16]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff fd70 	bl	8009f58 <tcp_create_segment>
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d109      	bne.n	800a494 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	8b5b      	ldrh	r3, [r3, #26]
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
 800a492:	e070      	b.n	800a576 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0303 	and.w	r3, r3, #3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d006      	beq.n	800a4ae <tcp_enqueue_flags+0xea>
 800a4a0:	4b37      	ldr	r3, [pc, #220]	; (800a580 <tcp_enqueue_flags+0x1bc>)
 800a4a2:	f240 4242 	movw	r2, #1090	; 0x442
 800a4a6:	493b      	ldr	r1, [pc, #236]	; (800a594 <tcp_enqueue_flags+0x1d0>)
 800a4a8:	4837      	ldr	r0, [pc, #220]	; (800a588 <tcp_enqueue_flags+0x1c4>)
 800a4aa:	f003 fe29 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	891b      	ldrh	r3, [r3, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <tcp_enqueue_flags+0x100>
 800a4b6:	4b32      	ldr	r3, [pc, #200]	; (800a580 <tcp_enqueue_flags+0x1bc>)
 800a4b8:	f240 4243 	movw	r2, #1091	; 0x443
 800a4bc:	4936      	ldr	r1, [pc, #216]	; (800a598 <tcp_enqueue_flags+0x1d4>)
 800a4be:	4832      	ldr	r0, [pc, #200]	; (800a588 <tcp_enqueue_flags+0x1c4>)
 800a4c0:	f003 fe1e 	bl	800e100 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d103      	bne.n	800a4d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800a4d2:	e00d      	b.n	800a4f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4d8:	61bb      	str	r3, [r7, #24]
 800a4da:	e002      	b.n	800a4e2 <tcp_enqueue_flags+0x11e>
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	61bb      	str	r3, [r7, #24]
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1f8      	bne.n	800a4dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d104      	bne.n	800a50c <tcp_enqueue_flags+0x148>
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d004      	beq.n	800a516 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	8b5b      	ldrh	r3, [r3, #26]
 800a524:	f043 0320 	orr.w	r3, r3, #32
 800a528:	b29a      	uxth	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	4618      	mov	r0, r3
 800a534:	f7fb fc48 	bl	8005dc8 <pbuf_clen>
 800a538:	4603      	mov	r3, r0
 800a53a:	461a      	mov	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a542:	4413      	add	r3, r2
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00e      	beq.n	800a574 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <tcp_enqueue_flags+0x1b0>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d106      	bne.n	800a574 <tcp_enqueue_flags+0x1b0>
 800a566:	4b06      	ldr	r3, [pc, #24]	; (800a580 <tcp_enqueue_flags+0x1bc>)
 800a568:	f240 4265 	movw	r2, #1125	; 0x465
 800a56c:	490b      	ldr	r1, [pc, #44]	; (800a59c <tcp_enqueue_flags+0x1d8>)
 800a56e:	4806      	ldr	r0, [pc, #24]	; (800a588 <tcp_enqueue_flags+0x1c4>)
 800a570:	f003 fdc6 	bl	800e100 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	0801086c 	.word	0x0801086c
 800a584:	08010c90 	.word	0x08010c90
 800a588:	080108c0 	.word	0x080108c0
 800a58c:	08010ce8 	.word	0x08010ce8
 800a590:	08010d08 	.word	0x08010d08
 800a594:	08010d44 	.word	0x08010d44
 800a598:	08010d5c 	.word	0x08010d5c
 800a59c:	08010d88 	.word	0x08010d88

0800a5a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a5a0:	b5b0      	push	{r4, r5, r7, lr}
 800a5a2:	b08a      	sub	sp, #40	; 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <tcp_output+0x1c>
 800a5ae:	4b8a      	ldr	r3, [pc, #552]	; (800a7d8 <tcp_output+0x238>)
 800a5b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a5b4:	4989      	ldr	r1, [pc, #548]	; (800a7dc <tcp_output+0x23c>)
 800a5b6:	488a      	ldr	r0, [pc, #552]	; (800a7e0 <tcp_output+0x240>)
 800a5b8:	f003 fda2 	bl	800e100 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	7d1b      	ldrb	r3, [r3, #20]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d106      	bne.n	800a5d2 <tcp_output+0x32>
 800a5c4:	4b84      	ldr	r3, [pc, #528]	; (800a7d8 <tcp_output+0x238>)
 800a5c6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a5ca:	4986      	ldr	r1, [pc, #536]	; (800a7e4 <tcp_output+0x244>)
 800a5cc:	4884      	ldr	r0, [pc, #528]	; (800a7e0 <tcp_output+0x240>)
 800a5ce:	f003 fd97 	bl	800e100 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a5d2:	4b85      	ldr	r3, [pc, #532]	; (800a7e8 <tcp_output+0x248>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d101      	bne.n	800a5e0 <tcp_output+0x40>
    return ERR_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e1ce      	b.n	800a97e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bf28      	it	cs
 800a5f0:	4613      	movcs	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10b      	bne.n	800a61a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	8b5b      	ldrh	r3, [r3, #26]
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 81aa 	beq.w	800a964 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fdcb 	bl	800b1ac <tcp_send_empty_ack>
 800a616:	4603      	mov	r3, r0
 800a618:	e1b1      	b.n	800a97e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3304      	adds	r3, #4
 800a620:	461a      	mov	r2, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff fc7c 	bl	8009f20 <tcp_route>
 800a628:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <tcp_output+0x96>
    return ERR_RTE;
 800a630:	f06f 0303 	mvn.w	r3, #3
 800a634:	e1a3      	b.n	800a97e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <tcp_output+0xa4>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d111      	bne.n	800a668 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <tcp_output+0xb0>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	3304      	adds	r3, #4
 800a64e:	e000      	b.n	800a652 <tcp_output+0xb2>
 800a650:	2300      	movs	r3, #0
 800a652:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d102      	bne.n	800a660 <tcp_output+0xc0>
      return ERR_RTE;
 800a65a:	f06f 0303 	mvn.w	r3, #3
 800a65e:	e18e      	b.n	800a97e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7f9 ff21 	bl	80044b6 <lwip_htonl>
 800a674:	4602      	mov	r2, r0
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a67e:	8912      	ldrh	r2, [r2, #8]
 800a680:	4413      	add	r3, r2
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	429a      	cmp	r2, r3
 800a686:	d227      	bcs.n	800a6d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a68e:	461a      	mov	r2, r3
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	4293      	cmp	r3, r2
 800a694:	d114      	bne.n	800a6c0 <tcp_output+0x120>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d110      	bne.n	800a6c0 <tcp_output+0x120>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	8b5b      	ldrh	r3, [r3, #26]
 800a6c4:	f003 0302 	and.w	r3, r3, #2
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 814d 	beq.w	800a968 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fd6c 	bl	800b1ac <tcp_send_empty_ack>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	e152      	b.n	800a97e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 811c 	beq.w	800a926 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a6ee:	e002      	b.n	800a6f6 <tcp_output+0x156>
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	623b      	str	r3, [r7, #32]
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1f8      	bne.n	800a6f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a6fe:	e112      	b.n	800a926 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	899b      	ldrh	r3, [r3, #12]
 800a706:	b29b      	uxth	r3, r3
 800a708:	4618      	mov	r0, r3
 800a70a:	f7f9 febf 	bl	800448c <lwip_htons>
 800a70e:	4603      	mov	r3, r0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0304 	and.w	r3, r3, #4
 800a716:	2b00      	cmp	r3, #0
 800a718:	d006      	beq.n	800a728 <tcp_output+0x188>
 800a71a:	4b2f      	ldr	r3, [pc, #188]	; (800a7d8 <tcp_output+0x238>)
 800a71c:	f240 5236 	movw	r2, #1334	; 0x536
 800a720:	4932      	ldr	r1, [pc, #200]	; (800a7ec <tcp_output+0x24c>)
 800a722:	482f      	ldr	r0, [pc, #188]	; (800a7e0 <tcp_output+0x240>)
 800a724:	f003 fcec 	bl	800e100 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01f      	beq.n	800a770 <tcp_output+0x1d0>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	8b5b      	ldrh	r3, [r3, #26]
 800a734:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d119      	bne.n	800a770 <tcp_output+0x1d0>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <tcp_output+0x1bc>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d110      	bne.n	800a770 <tcp_output+0x1d0>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a752:	891a      	ldrh	r2, [r3, #8]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a758:	429a      	cmp	r2, r3
 800a75a:	d209      	bcs.n	800a770 <tcp_output+0x1d0>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a762:	2b00      	cmp	r3, #0
 800a764:	d004      	beq.n	800a770 <tcp_output+0x1d0>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d901      	bls.n	800a774 <tcp_output+0x1d4>
 800a770:	2301      	movs	r3, #1
 800a772:	e000      	b.n	800a776 <tcp_output+0x1d6>
 800a774:	2300      	movs	r3, #0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d106      	bne.n	800a788 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	8b5b      	ldrh	r3, [r3, #26]
 800a77e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80e4 	beq.w	800a950 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7d1b      	ldrb	r3, [r3, #20]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d00d      	beq.n	800a7ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	899b      	ldrh	r3, [r3, #12]
 800a796:	b29c      	uxth	r4, r3
 800a798:	2010      	movs	r0, #16
 800a79a:	f7f9 fe77 	bl	800448c <lwip_htons>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4322      	orrs	r2, r4
 800a7a8:	b292      	uxth	r2, r2
 800a7aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7b2:	f000 f909 	bl	800a9c8 <tcp_output_segment>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d016      	beq.n	800a7f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	8b5b      	ldrh	r3, [r3, #26]
 800a7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	835a      	strh	r2, [r3, #26]
      return err;
 800a7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d4:	e0d3      	b.n	800a97e <tcp_output+0x3de>
 800a7d6:	bf00      	nop
 800a7d8:	0801086c 	.word	0x0801086c
 800a7dc:	08010db0 	.word	0x08010db0
 800a7e0:	080108c0 	.word	0x080108c0
 800a7e4:	08010dc8 	.word	0x08010dc8
 800a7e8:	24003184 	.word	0x24003184
 800a7ec:	08010df0 	.word	0x08010df0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7d1b      	ldrb	r3, [r3, #20]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d006      	beq.n	800a80e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	8b5b      	ldrh	r3, [r3, #26]
 800a804:	f023 0303 	bic.w	r3, r3, #3
 800a808:	b29a      	uxth	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4618      	mov	r0, r3
 800a816:	f7f9 fe4e 	bl	80044b6 <lwip_htonl>
 800a81a:	4604      	mov	r4, r0
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	891b      	ldrh	r3, [r3, #8]
 800a820:	461d      	mov	r5, r3
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	899b      	ldrh	r3, [r3, #12]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f9 fe2e 	bl	800448c <lwip_htons>
 800a830:	4603      	mov	r3, r0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 0303 	and.w	r3, r3, #3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <tcp_output+0x2a0>
 800a83c:	2301      	movs	r3, #1
 800a83e:	e000      	b.n	800a842 <tcp_output+0x2a2>
 800a840:	2300      	movs	r3, #0
 800a842:	442b      	add	r3, r5
 800a844:	4423      	add	r3, r4
 800a846:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	da02      	bge.n	800a85a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85c:	891b      	ldrh	r3, [r3, #8]
 800a85e:	461c      	mov	r4, r3
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	b29b      	uxth	r3, r3
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f9 fe0f 	bl	800448c <lwip_htons>
 800a86e:	4603      	mov	r3, r0
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <tcp_output+0x2de>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <tcp_output+0x2e0>
 800a87e:	2300      	movs	r3, #0
 800a880:	4423      	add	r3, r4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d049      	beq.n	800a91a <tcp_output+0x37a>
      seg->next = NULL;
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <tcp_output+0x300>
        pcb->unacked = seg;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a898:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	e03f      	b.n	800a920 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f9 fe05 	bl	80044b6 <lwip_htonl>
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f9 fdfe 	bl	80044b6 <lwip_htonl>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	1ae3      	subs	r3, r4, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da24      	bge.n	800a90c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3370      	adds	r3, #112	; 0x70
 800a8c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a8c8:	e002      	b.n	800a8d0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d011      	beq.n	800a8fc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7f9 fde8 	bl	80044b6 <lwip_htonl>
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f9 fde1 	bl	80044b6 <lwip_htonl>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	dbe6      	blt.n	800a8ca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e009      	b.n	800a920 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a910:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	623b      	str	r3, [r7, #32]
 800a918:	e002      	b.n	800a920 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a91a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a91c:	f7fc fc3f 	bl	800719e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d012      	beq.n	800a952 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	4618      	mov	r0, r3
 800a934:	f7f9 fdbf 	bl	80044b6 <lwip_htonl>
 800a938:	4602      	mov	r2, r0
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a942:	8912      	ldrh	r2, [r2, #8]
 800a944:	4413      	add	r3, r2
  while (seg != NULL &&
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	429a      	cmp	r2, r3
 800a94a:	f4bf aed9 	bcs.w	800a700 <tcp_output+0x160>
 800a94e:	e000      	b.n	800a952 <tcp_output+0x3b2>
      break;
 800a950:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d108      	bne.n	800a96c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a962:	e004      	b.n	800a96e <tcp_output+0x3ce>
    goto output_done;
 800a964:	bf00      	nop
 800a966:	e002      	b.n	800a96e <tcp_output+0x3ce>
    goto output_done;
 800a968:	bf00      	nop
 800a96a:	e000      	b.n	800a96e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a96c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8b5b      	ldrh	r3, [r3, #26]
 800a972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a976:	b29a      	uxth	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3728      	adds	r7, #40	; 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bdb0      	pop	{r4, r5, r7, pc}
 800a986:	bf00      	nop

0800a988 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <tcp_output_segment_busy+0x1c>
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <tcp_output_segment_busy+0x34>)
 800a998:	f240 529a 	movw	r2, #1434	; 0x59a
 800a99c:	4908      	ldr	r1, [pc, #32]	; (800a9c0 <tcp_output_segment_busy+0x38>)
 800a99e:	4809      	ldr	r0, [pc, #36]	; (800a9c4 <tcp_output_segment_busy+0x3c>)
 800a9a0:	f003 fbae 	bl	800e100 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	7b9b      	ldrb	r3, [r3, #14]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d001      	beq.n	800a9b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e000      	b.n	800a9b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	0801086c 	.word	0x0801086c
 800a9c0:	08010e08 	.word	0x08010e08
 800a9c4:	080108c0 	.word	0x080108c0

0800a9c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a9c8:	b5b0      	push	{r4, r5, r7, lr}
 800a9ca:	b08c      	sub	sp, #48	; 0x30
 800a9cc:	af04      	add	r7, sp, #16
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <tcp_output_segment+0x20>
 800a9da:	4b63      	ldr	r3, [pc, #396]	; (800ab68 <tcp_output_segment+0x1a0>)
 800a9dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a9e0:	4962      	ldr	r1, [pc, #392]	; (800ab6c <tcp_output_segment+0x1a4>)
 800a9e2:	4863      	ldr	r0, [pc, #396]	; (800ab70 <tcp_output_segment+0x1a8>)
 800a9e4:	f003 fb8c 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d106      	bne.n	800a9fc <tcp_output_segment+0x34>
 800a9ee:	4b5e      	ldr	r3, [pc, #376]	; (800ab68 <tcp_output_segment+0x1a0>)
 800a9f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a9f4:	495f      	ldr	r1, [pc, #380]	; (800ab74 <tcp_output_segment+0x1ac>)
 800a9f6:	485e      	ldr	r0, [pc, #376]	; (800ab70 <tcp_output_segment+0x1a8>)
 800a9f8:	f003 fb82 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <tcp_output_segment+0x48>
 800aa02:	4b59      	ldr	r3, [pc, #356]	; (800ab68 <tcp_output_segment+0x1a0>)
 800aa04:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800aa08:	495b      	ldr	r1, [pc, #364]	; (800ab78 <tcp_output_segment+0x1b0>)
 800aa0a:	4859      	ldr	r0, [pc, #356]	; (800ab70 <tcp_output_segment+0x1a8>)
 800aa0c:	f003 fb78 	bl	800e100 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff ffb9 	bl	800a988 <tcp_output_segment_busy>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e09f      	b.n	800ab60 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	68dc      	ldr	r4, [r3, #12]
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f7f9 fd44 	bl	80044b6 <lwip_htonl>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	68dc      	ldr	r4, [r3, #12]
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f7f9 fd26 	bl	800448c <lwip_htons>
 800aa40:	4603      	mov	r3, r0
 800aa42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aa4c:	441a      	add	r2, r3
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	3314      	adds	r3, #20
 800aa58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	7a9b      	ldrb	r3, [r3, #10]
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d015      	beq.n	800aa92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800aa72:	f7fc fe8b 	bl	800778c <tcp_eff_send_mss_netif>
 800aa76:	4603      	mov	r3, r0
 800aa78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800aa7a:	8b7b      	ldrh	r3, [r7, #26]
 800aa7c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7f9 fd18 	bl	80044b6 <lwip_htonl>
 800aa86:	4602      	mov	r2, r0
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	3304      	adds	r3, #4
 800aa90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	da02      	bge.n	800aaa2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10c      	bne.n	800aac4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800aaaa:	4b34      	ldr	r3, [pc, #208]	; (800ab7c <tcp_output_segment+0x1b4>)
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7f9 fcfc 	bl	80044b6 <lwip_htonl>
 800aabe:	4602      	mov	r2, r0
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	8959      	ldrh	r1, [r3, #10]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	8b3a      	ldrh	r2, [r7, #24]
 800aade:	1a8a      	subs	r2, r1, r2
 800aae0:	b292      	uxth	r2, r2
 800aae2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	8919      	ldrh	r1, [r3, #8]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	8b3a      	ldrh	r2, [r7, #24]
 800aaf0:	1a8a      	subs	r2, r1, r2
 800aaf2:	b292      	uxth	r2, r2
 800aaf4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	68d2      	ldr	r2, [r2, #12]
 800aafe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	741a      	strb	r2, [r3, #16]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f103 0214 	add.w	r2, r3, #20
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	7a9b      	ldrb	r3, [r3, #10]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	4413      	add	r3, r2
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d006      	beq.n	800ab34 <tcp_output_segment+0x16c>
 800ab26:	4b10      	ldr	r3, [pc, #64]	; (800ab68 <tcp_output_segment+0x1a0>)
 800ab28:	f240 621c 	movw	r2, #1564	; 0x61c
 800ab2c:	4914      	ldr	r1, [pc, #80]	; (800ab80 <tcp_output_segment+0x1b8>)
 800ab2e:	4810      	ldr	r0, [pc, #64]	; (800ab70 <tcp_output_segment+0x1a8>)
 800ab30:	f003 fae6 	bl	800e100 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6858      	ldr	r0, [r3, #4]
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	1d1c      	adds	r4, r3, #4
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	7add      	ldrb	r5, [r3, #11]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	7a9b      	ldrb	r3, [r3, #10]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	9202      	str	r2, [sp, #8]
 800ab4a:	2206      	movs	r2, #6
 800ab4c:	9201      	str	r2, [sp, #4]
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	462b      	mov	r3, r5
 800ab52:	4622      	mov	r2, r4
 800ab54:	f002 fa5c 	bl	800d010 <ip4_output_if>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ab5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3720      	adds	r7, #32
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bdb0      	pop	{r4, r5, r7, pc}
 800ab68:	0801086c 	.word	0x0801086c
 800ab6c:	08010e30 	.word	0x08010e30
 800ab70:	080108c0 	.word	0x080108c0
 800ab74:	08010e50 	.word	0x08010e50
 800ab78:	08010e70 	.word	0x08010e70
 800ab7c:	24003138 	.word	0x24003138
 800ab80:	08010e94 	.word	0x08010e94

0800ab84 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ab84:	b5b0      	push	{r4, r5, r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <tcp_rexmit_rto_prepare+0x1c>
 800ab92:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <tcp_rexmit_rto_prepare+0xd4>)
 800ab94:	f240 6263 	movw	r2, #1635	; 0x663
 800ab98:	4930      	ldr	r1, [pc, #192]	; (800ac5c <tcp_rexmit_rto_prepare+0xd8>)
 800ab9a:	4831      	ldr	r0, [pc, #196]	; (800ac60 <tcp_rexmit_rto_prepare+0xdc>)
 800ab9c:	f003 fab0 	bl	800e100 <iprintf>

  if (pcb->unacked == NULL) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d102      	bne.n	800abae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800aba8:	f06f 0305 	mvn.w	r3, #5
 800abac:	e050      	b.n	800ac50 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	e00b      	b.n	800abce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7ff fee6 	bl	800a988 <tcp_output_segment_busy>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800abc2:	f06f 0305 	mvn.w	r3, #5
 800abc6:	e043      	b.n	800ac50 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1ef      	bne.n	800abb6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff fed6 	bl	800a988 <tcp_output_segment_busy>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d002      	beq.n	800abe8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800abe2:	f06f 0305 	mvn.w	r3, #5
 800abe6:	e033      	b.n	800ac50 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	8b5b      	ldrh	r3, [r3, #26]
 800ac02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f9 fc4f 	bl	80044b6 <lwip_htonl>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	891b      	ldrh	r3, [r3, #8]
 800ac1e:	461d      	mov	r5, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	899b      	ldrh	r3, [r3, #12]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7f9 fc2f 	bl	800448c <lwip_htons>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <tcp_rexmit_rto_prepare+0xba>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e000      	b.n	800ac40 <tcp_rexmit_rto_prepare+0xbc>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	442b      	add	r3, r5
 800ac42:	18e2      	adds	r2, r4, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bdb0      	pop	{r4, r5, r7, pc}
 800ac58:	0801086c 	.word	0x0801086c
 800ac5c:	08010ea8 	.word	0x08010ea8
 800ac60:	080108c0 	.word	0x080108c0

0800ac64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <tcp_rexmit_rto_commit+0x1c>
 800ac72:	4b0d      	ldr	r3, [pc, #52]	; (800aca8 <tcp_rexmit_rto_commit+0x44>)
 800ac74:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ac78:	490c      	ldr	r1, [pc, #48]	; (800acac <tcp_rexmit_rto_commit+0x48>)
 800ac7a:	480d      	ldr	r0, [pc, #52]	; (800acb0 <tcp_rexmit_rto_commit+0x4c>)
 800ac7c:	f003 fa40 	bl	800e100 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac86:	2bff      	cmp	r3, #255	; 0xff
 800ac88:	d007      	beq.n	800ac9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac90:	3301      	adds	r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fc80 	bl	800a5a0 <tcp_output>
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	0801086c 	.word	0x0801086c
 800acac:	08010ecc 	.word	0x08010ecc
 800acb0:	080108c0 	.word	0x080108c0

0800acb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_rexmit_rto+0x1c>
 800acc2:	4b0a      	ldr	r3, [pc, #40]	; (800acec <tcp_rexmit_rto+0x38>)
 800acc4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800acc8:	4909      	ldr	r1, [pc, #36]	; (800acf0 <tcp_rexmit_rto+0x3c>)
 800acca:	480a      	ldr	r0, [pc, #40]	; (800acf4 <tcp_rexmit_rto+0x40>)
 800accc:	f003 fa18 	bl	800e100 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ff57 	bl	800ab84 <tcp_rexmit_rto_prepare>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ffc1 	bl	800ac64 <tcp_rexmit_rto_commit>
  }
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	0801086c 	.word	0x0801086c
 800acf0:	08010ef0 	.word	0x08010ef0
 800acf4:	080108c0 	.word	0x080108c0

0800acf8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800acf8:	b590      	push	{r4, r7, lr}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <tcp_rexmit+0x1c>
 800ad06:	4b2f      	ldr	r3, [pc, #188]	; (800adc4 <tcp_rexmit+0xcc>)
 800ad08:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ad0c:	492e      	ldr	r1, [pc, #184]	; (800adc8 <tcp_rexmit+0xd0>)
 800ad0e:	482f      	ldr	r0, [pc, #188]	; (800adcc <tcp_rexmit+0xd4>)
 800ad10:	f003 f9f6 	bl	800e100 <iprintf>

  if (pcb->unacked == NULL) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ad1c:	f06f 0305 	mvn.w	r3, #5
 800ad20:	e04c      	b.n	800adbc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad26:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ad28:	68b8      	ldr	r0, [r7, #8]
 800ad2a:	f7ff fe2d 	bl	800a988 <tcp_output_segment_busy>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ad34:	f06f 0305 	mvn.w	r3, #5
 800ad38:	e040      	b.n	800adbc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	336c      	adds	r3, #108	; 0x6c
 800ad46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ad48:	e002      	b.n	800ad50 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d011      	beq.n	800ad7c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f9 fba8 	bl	80044b6 <lwip_htonl>
 800ad66:	4604      	mov	r4, r0
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7f9 fba1 	bl	80044b6 <lwip_htonl>
 800ad74:	4603      	mov	r3, r0
 800ad76:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dbe6      	blt.n	800ad4a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d103      	bne.n	800ad9a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ada0:	2bff      	cmp	r3, #255	; 0xff
 800ada2:	d007      	beq.n	800adb4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adaa:	3301      	adds	r3, #1
 800adac:	b2da      	uxtb	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}
 800adc4:	0801086c 	.word	0x0801086c
 800adc8:	08010f0c 	.word	0x08010f0c
 800adcc:	080108c0 	.word	0x080108c0

0800add0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <tcp_rexmit_fast+0x1c>
 800adde:	4b2a      	ldr	r3, [pc, #168]	; (800ae88 <tcp_rexmit_fast+0xb8>)
 800ade0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ade4:	4929      	ldr	r1, [pc, #164]	; (800ae8c <tcp_rexmit_fast+0xbc>)
 800ade6:	482a      	ldr	r0, [pc, #168]	; (800ae90 <tcp_rexmit_fast+0xc0>)
 800ade8:	f003 f98a 	bl	800e100 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d045      	beq.n	800ae80 <tcp_rexmit_fast+0xb0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	8b5b      	ldrh	r3, [r3, #26]
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d13f      	bne.n	800ae80 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ff79 	bl	800acf8 <tcp_rexmit>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d139      	bne.n	800ae80 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	bf28      	it	cs
 800ae1c:	4613      	movcs	r3, r2
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	da00      	bge.n	800ae26 <tcp_rexmit_fast+0x56>
 800ae24:	3301      	adds	r3, #1
 800ae26:	105b      	asrs	r3, r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d206      	bcs.n	800ae50 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	0049      	lsls	r1, r1, #1
 800ae5e:	440b      	add	r3, r1
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4413      	add	r3, r2
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8b5b      	ldrh	r3, [r3, #26]
 800ae70:	f043 0304 	orr.w	r3, r3, #4
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	0801086c 	.word	0x0801086c
 800ae8c:	08010f24 	.word	0x08010f24
 800ae90:	080108c0 	.word	0x080108c0

0800ae94 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	607b      	str	r3, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	817b      	strh	r3, [r7, #10]
 800aea2:	4613      	mov	r3, r2
 800aea4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800aea6:	897a      	ldrh	r2, [r7, #10]
 800aea8:	893b      	ldrh	r3, [r7, #8]
 800aeaa:	4413      	add	r3, r2
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	3314      	adds	r3, #20
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	2022      	movs	r0, #34	; 0x22
 800aeba:	f7fa fc19 	bl	80056f0 <pbuf_alloc>
 800aebe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d04d      	beq.n	800af62 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800aec6:	897b      	ldrh	r3, [r7, #10]
 800aec8:	3313      	adds	r3, #19
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	8952      	ldrh	r2, [r2, #10]
 800aece:	4293      	cmp	r3, r2
 800aed0:	db06      	blt.n	800aee0 <tcp_output_alloc_header_common+0x4c>
 800aed2:	4b26      	ldr	r3, [pc, #152]	; (800af6c <tcp_output_alloc_header_common+0xd8>)
 800aed4:	f240 7223 	movw	r2, #1827	; 0x723
 800aed8:	4925      	ldr	r1, [pc, #148]	; (800af70 <tcp_output_alloc_header_common+0xdc>)
 800aeda:	4826      	ldr	r0, [pc, #152]	; (800af74 <tcp_output_alloc_header_common+0xe0>)
 800aedc:	f003 f910 	bl	800e100 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800aee6:	8c3b      	ldrh	r3, [r7, #32]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f9 facf 	bl	800448c <lwip_htons>
 800aeee:	4603      	mov	r3, r0
 800aef0:	461a      	mov	r2, r3
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800aef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7f9 fac7 	bl	800448c <lwip_htons>
 800aefe:	4603      	mov	r3, r0
 800af00:	461a      	mov	r2, r3
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7f9 fad2 	bl	80044b6 <lwip_htonl>
 800af12:	4602      	mov	r2, r0
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800af18:	897b      	ldrh	r3, [r7, #10]
 800af1a:	089b      	lsrs	r3, r3, #2
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	3305      	adds	r3, #5
 800af20:	b29b      	uxth	r3, r3
 800af22:	031b      	lsls	r3, r3, #12
 800af24:	b29a      	uxth	r2, r3
 800af26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	4313      	orrs	r3, r2
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4618      	mov	r0, r3
 800af32:	f7f9 faab 	bl	800448c <lwip_htons>
 800af36:	4603      	mov	r3, r0
 800af38:	461a      	mov	r2, r3
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800af3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af40:	4618      	mov	r0, r3
 800af42:	f7f9 faa3 	bl	800448c <lwip_htons>
 800af46:	4603      	mov	r3, r0
 800af48:	461a      	mov	r2, r3
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2200      	movs	r2, #0
 800af52:	741a      	strb	r2, [r3, #16]
 800af54:	2200      	movs	r2, #0
 800af56:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	2200      	movs	r2, #0
 800af5c:	749a      	strb	r2, [r3, #18]
 800af5e:	2200      	movs	r2, #0
 800af60:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800af62:	697b      	ldr	r3, [r7, #20]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	0801086c 	.word	0x0801086c
 800af70:	08010f44 	.word	0x08010f44
 800af74:	080108c0 	.word	0x080108c0

0800af78 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800af78:	b5b0      	push	{r4, r5, r7, lr}
 800af7a:	b08a      	sub	sp, #40	; 0x28
 800af7c:	af04      	add	r7, sp, #16
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	607b      	str	r3, [r7, #4]
 800af82:	460b      	mov	r3, r1
 800af84:	817b      	strh	r3, [r7, #10]
 800af86:	4613      	mov	r3, r2
 800af88:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d106      	bne.n	800af9e <tcp_output_alloc_header+0x26>
 800af90:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <tcp_output_alloc_header+0x70>)
 800af92:	f240 7242 	movw	r2, #1858	; 0x742
 800af96:	4915      	ldr	r1, [pc, #84]	; (800afec <tcp_output_alloc_header+0x74>)
 800af98:	4815      	ldr	r0, [pc, #84]	; (800aff0 <tcp_output_alloc_header+0x78>)
 800af9a:	f003 f8b1 	bl	800e100 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	8adb      	ldrh	r3, [r3, #22]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	8b12      	ldrh	r2, [r2, #24]
 800afaa:	68f9      	ldr	r1, [r7, #12]
 800afac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800afae:	893d      	ldrh	r5, [r7, #8]
 800afb0:	897c      	ldrh	r4, [r7, #10]
 800afb2:	9103      	str	r1, [sp, #12]
 800afb4:	2110      	movs	r1, #16
 800afb6:	9102      	str	r1, [sp, #8]
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	462a      	mov	r2, r5
 800afc0:	4621      	mov	r1, r4
 800afc2:	f7ff ff67 	bl	800ae94 <tcp_output_alloc_header_common>
 800afc6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d006      	beq.n	800afdc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800afd6:	441a      	add	r2, r3
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800afdc:	697b      	ldr	r3, [r7, #20]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bdb0      	pop	{r4, r5, r7, pc}
 800afe6:	bf00      	nop
 800afe8:	0801086c 	.word	0x0801086c
 800afec:	08010f74 	.word	0x08010f74
 800aff0:	080108c0 	.word	0x080108c0

0800aff4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	4611      	mov	r1, r2
 800b000:	461a      	mov	r2, r3
 800b002:	460b      	mov	r3, r1
 800b004:	71fb      	strb	r3, [r7, #7]
 800b006:	4613      	mov	r3, r2
 800b008:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <tcp_output_fill_options+0x2e>
 800b014:	4b13      	ldr	r3, [pc, #76]	; (800b064 <tcp_output_fill_options+0x70>)
 800b016:	f240 7256 	movw	r2, #1878	; 0x756
 800b01a:	4913      	ldr	r1, [pc, #76]	; (800b068 <tcp_output_fill_options+0x74>)
 800b01c:	4813      	ldr	r0, [pc, #76]	; (800b06c <tcp_output_fill_options+0x78>)
 800b01e:	f003 f86f 	bl	800e100 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	3314      	adds	r3, #20
 800b02c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	f103 0214 	add.w	r2, r3, #20
 800b034:	8bfb      	ldrh	r3, [r7, #30]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4619      	mov	r1, r3
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	440b      	add	r3, r1
 800b044:	4413      	add	r3, r2
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d006      	beq.n	800b05a <tcp_output_fill_options+0x66>
 800b04c:	4b05      	ldr	r3, [pc, #20]	; (800b064 <tcp_output_fill_options+0x70>)
 800b04e:	f240 7275 	movw	r2, #1909	; 0x775
 800b052:	4907      	ldr	r1, [pc, #28]	; (800b070 <tcp_output_fill_options+0x7c>)
 800b054:	4805      	ldr	r0, [pc, #20]	; (800b06c <tcp_output_fill_options+0x78>)
 800b056:	f003 f853 	bl	800e100 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b05a:	bf00      	nop
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	0801086c 	.word	0x0801086c
 800b068:	08010f9c 	.word	0x08010f9c
 800b06c:	080108c0 	.word	0x080108c0
 800b070:	08010e94 	.word	0x08010e94

0800b074 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af04      	add	r7, sp, #16
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d106      	bne.n	800b096 <tcp_output_control_segment+0x22>
 800b088:	4b1c      	ldr	r3, [pc, #112]	; (800b0fc <tcp_output_control_segment+0x88>)
 800b08a:	f240 7287 	movw	r2, #1927	; 0x787
 800b08e:	491c      	ldr	r1, [pc, #112]	; (800b100 <tcp_output_control_segment+0x8c>)
 800b090:	481c      	ldr	r0, [pc, #112]	; (800b104 <tcp_output_control_segment+0x90>)
 800b092:	f003 f835 	bl	800e100 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7fe ff40 	bl	8009f20 <tcp_route>
 800b0a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b0a8:	23fc      	movs	r3, #252	; 0xfc
 800b0aa:	75fb      	strb	r3, [r7, #23]
 800b0ac:	e01c      	b.n	800b0e8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d006      	beq.n	800b0c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	7adb      	ldrb	r3, [r3, #11]
 800b0b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	7a9b      	ldrb	r3, [r3, #10]
 800b0be:	757b      	strb	r3, [r7, #21]
 800b0c0:	e003      	b.n	800b0ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b0c2:	23ff      	movs	r3, #255	; 0xff
 800b0c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b0ca:	7dba      	ldrb	r2, [r7, #22]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	2306      	movs	r3, #6
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	7d7b      	ldrb	r3, [r7, #21]
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	68b8      	ldr	r0, [r7, #8]
 800b0e0:	f001 ff96 	bl	800d010 <ip4_output_if>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b0e8:	68b8      	ldr	r0, [r7, #8]
 800b0ea:	f7fa fde5 	bl	8005cb8 <pbuf_free>
  return err;
 800b0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	0801086c 	.word	0x0801086c
 800b100:	08010fc4 	.word	0x08010fc4
 800b104:	080108c0 	.word	0x080108c0

0800b108 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b08b      	sub	sp, #44	; 0x2c
 800b10c:	af04      	add	r7, sp, #16
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <tcp_rst+0x22>
 800b11c:	4b1f      	ldr	r3, [pc, #124]	; (800b19c <tcp_rst+0x94>)
 800b11e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b122:	491f      	ldr	r1, [pc, #124]	; (800b1a0 <tcp_rst+0x98>)
 800b124:	481f      	ldr	r0, [pc, #124]	; (800b1a4 <tcp_rst+0x9c>)
 800b126:	f002 ffeb 	bl	800e100 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d106      	bne.n	800b13e <tcp_rst+0x36>
 800b130:	4b1a      	ldr	r3, [pc, #104]	; (800b19c <tcp_rst+0x94>)
 800b132:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b136:	491c      	ldr	r1, [pc, #112]	; (800b1a8 <tcp_rst+0xa0>)
 800b138:	481a      	ldr	r0, [pc, #104]	; (800b1a4 <tcp_rst+0x9c>)
 800b13a:	f002 ffe1 	bl	800e100 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b13e:	2300      	movs	r3, #0
 800b140:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b142:	f246 0308 	movw	r3, #24584	; 0x6008
 800b146:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	b29c      	uxth	r4, r3
 800b14c:	68b8      	ldr	r0, [r7, #8]
 800b14e:	f7f9 f9b2 	bl	80044b6 <lwip_htonl>
 800b152:	4602      	mov	r2, r0
 800b154:	8abb      	ldrh	r3, [r7, #20]
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	2314      	movs	r3, #20
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	2200      	movs	r2, #0
 800b168:	4621      	mov	r1, r4
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fe92 	bl	800ae94 <tcp_output_alloc_header_common>
 800b170:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00c      	beq.n	800b192 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	2200      	movs	r2, #0
 800b17c:	6939      	ldr	r1, [r7, #16]
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7ff ff38 	bl	800aff4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	6939      	ldr	r1, [r7, #16]
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff ff72 	bl	800b074 <tcp_output_control_segment>
 800b190:	e000      	b.n	800b194 <tcp_rst+0x8c>
    return;
 800b192:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	bd90      	pop	{r4, r7, pc}
 800b19a:	bf00      	nop
 800b19c:	0801086c 	.word	0x0801086c
 800b1a0:	08010ff0 	.word	0x08010ff0
 800b1a4:	080108c0 	.word	0x080108c0
 800b1a8:	0801100c 	.word	0x0801100c

0800b1ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b1ac:	b590      	push	{r4, r7, lr}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d106      	bne.n	800b1d0 <tcp_send_empty_ack+0x24>
 800b1c2:	4b28      	ldr	r3, [pc, #160]	; (800b264 <tcp_send_empty_ack+0xb8>)
 800b1c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b1c8:	4927      	ldr	r1, [pc, #156]	; (800b268 <tcp_send_empty_ack+0xbc>)
 800b1ca:	4828      	ldr	r0, [pc, #160]	; (800b26c <tcp_send_empty_ack+0xc0>)
 800b1cc:	f002 ff98 	bl	800e100 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b1dc:	7d7b      	ldrb	r3, [r7, #21]
 800b1de:	b29c      	uxth	r4, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7f9 f966 	bl	80044b6 <lwip_htonl>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff fec1 	bl	800af78 <tcp_output_alloc_header>
 800b1f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d109      	bne.n	800b212 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	8b5b      	ldrh	r3, [r3, #26]
 800b202:	f043 0303 	orr.w	r3, r3, #3
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b20c:	f06f 0301 	mvn.w	r3, #1
 800b210:	e023      	b.n	800b25a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b212:	7dbb      	ldrb	r3, [r7, #22]
 800b214:	7dfa      	ldrb	r2, [r7, #23]
 800b216:	6939      	ldr	r1, [r7, #16]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff feeb 	bl	800aff4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3304      	adds	r3, #4
 800b224:	6939      	ldr	r1, [r7, #16]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff ff24 	bl	800b074 <tcp_output_control_segment>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d007      	beq.n	800b248 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8b5b      	ldrh	r3, [r3, #26]
 800b23c:	f043 0303 	orr.w	r3, r3, #3
 800b240:	b29a      	uxth	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	835a      	strh	r2, [r3, #26]
 800b246:	e006      	b.n	800b256 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	8b5b      	ldrh	r3, [r3, #26]
 800b24c:	f023 0303 	bic.w	r3, r3, #3
 800b250:	b29a      	uxth	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	371c      	adds	r7, #28
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	0801086c 	.word	0x0801086c
 800b268:	08011028 	.word	0x08011028
 800b26c:	080108c0 	.word	0x080108c0

0800b270 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b270:	b590      	push	{r4, r7, lr}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b278:	2300      	movs	r3, #0
 800b27a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <tcp_keepalive+0x20>
 800b282:	4b18      	ldr	r3, [pc, #96]	; (800b2e4 <tcp_keepalive+0x74>)
 800b284:	f640 0224 	movw	r2, #2084	; 0x824
 800b288:	4917      	ldr	r1, [pc, #92]	; (800b2e8 <tcp_keepalive+0x78>)
 800b28a:	4818      	ldr	r0, [pc, #96]	; (800b2ec <tcp_keepalive+0x7c>)
 800b28c:	f002 ff38 	bl	800e100 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b290:	7dfb      	ldrb	r3, [r7, #23]
 800b292:	b29c      	uxth	r4, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b298:	3b01      	subs	r3, #1
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7f9 f90b 	bl	80044b6 <lwip_htonl>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7ff fe66 	bl	800af78 <tcp_output_alloc_header>
 800b2ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d102      	bne.n	800b2ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b8:	e010      	b.n	800b2dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	6939      	ldr	r1, [r7, #16]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff fe97 	bl	800aff4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	6939      	ldr	r1, [r7, #16]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff fed0 	bl	800b074 <tcp_output_control_segment>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b2d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	371c      	adds	r7, #28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd90      	pop	{r4, r7, pc}
 800b2e4:	0801086c 	.word	0x0801086c
 800b2e8:	08011048 	.word	0x08011048
 800b2ec:	080108c0 	.word	0x080108c0

0800b2f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b08b      	sub	sp, #44	; 0x2c
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d106      	bne.n	800b312 <tcp_zero_window_probe+0x22>
 800b304:	4b4c      	ldr	r3, [pc, #304]	; (800b438 <tcp_zero_window_probe+0x148>)
 800b306:	f640 024f 	movw	r2, #2127	; 0x84f
 800b30a:	494c      	ldr	r1, [pc, #304]	; (800b43c <tcp_zero_window_probe+0x14c>)
 800b30c:	484c      	ldr	r0, [pc, #304]	; (800b440 <tcp_zero_window_probe+0x150>)
 800b30e:	f002 fef7 	bl	800e100 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b316:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b318:	6a3b      	ldr	r3, [r7, #32]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	e086      	b.n	800b430 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b328:	2bff      	cmp	r3, #255	; 0xff
 800b32a:	d007      	beq.n	800b33c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b332:	3301      	adds	r3, #1
 800b334:	b2da      	uxtb	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	899b      	ldrh	r3, [r3, #12]
 800b342:	b29b      	uxth	r3, r3
 800b344:	4618      	mov	r0, r3
 800b346:	f7f9 f8a1 	bl	800448c <lwip_htons>
 800b34a:	4603      	mov	r3, r0
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <tcp_zero_window_probe+0x72>
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	891b      	ldrh	r3, [r3, #8]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <tcp_zero_window_probe+0x72>
 800b35e:	2301      	movs	r3, #1
 800b360:	e000      	b.n	800b364 <tcp_zero_window_probe+0x74>
 800b362:	2300      	movs	r3, #0
 800b364:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b366:	7ffb      	ldrb	r3, [r7, #31]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bf0c      	ite	eq
 800b36c:	2301      	moveq	r3, #1
 800b36e:	2300      	movne	r3, #0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b378:	b299      	uxth	r1, r3
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	8bba      	ldrh	r2, [r7, #28]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff fdf8 	bl	800af78 <tcp_output_alloc_header>
 800b388:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b390:	f04f 33ff 	mov.w	r3, #4294967295
 800b394:	e04c      	b.n	800b430 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b39c:	7ffb      	ldrb	r3, [r7, #31]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d011      	beq.n	800b3c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	899b      	ldrh	r3, [r3, #12]
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	b21b      	sxth	r3, r3
 800b3aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3ae:	b21c      	sxth	r4, r3
 800b3b0:	2011      	movs	r0, #17
 800b3b2:	f7f9 f86b 	bl	800448c <lwip_htons>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	b21b      	sxth	r3, r3
 800b3ba:	4323      	orrs	r3, r4
 800b3bc:	b21b      	sxth	r3, r3
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	819a      	strh	r2, [r3, #12]
 800b3c4:	e010      	b.n	800b3e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	3314      	adds	r3, #20
 800b3cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	6858      	ldr	r0, [r3, #4]
 800b3d2:	6a3b      	ldr	r3, [r7, #32]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	891a      	ldrh	r2, [r3, #8]
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	891b      	ldrh	r3, [r3, #8]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	6939      	ldr	r1, [r7, #16]
 800b3e4:	f7fa fe52 	bl	800608c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7f9 f861 	bl	80044b6 <lwip_htonl>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	da02      	bge.n	800b40c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b410:	2200      	movs	r2, #0
 800b412:	69b9      	ldr	r1, [r7, #24]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff fded 	bl	800aff4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3304      	adds	r3, #4
 800b420:	69b9      	ldr	r1, [r7, #24]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff fe26 	bl	800b074 <tcp_output_control_segment>
 800b428:	4603      	mov	r3, r0
 800b42a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b42c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b430:	4618      	mov	r0, r3
 800b432:	372c      	adds	r7, #44	; 0x2c
 800b434:	46bd      	mov	sp, r7
 800b436:	bd90      	pop	{r4, r7, pc}
 800b438:	0801086c 	.word	0x0801086c
 800b43c:	08011064 	.word	0x08011064
 800b440:	080108c0 	.word	0x080108c0

0800b444 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b44c:	f7fa ff0c 	bl	8006268 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b450:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <tcpip_tcp_timer+0x38>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d103      	bne.n	800b460 <tcpip_tcp_timer+0x1c>
 800b458:	4b09      	ldr	r3, [pc, #36]	; (800b480 <tcpip_tcp_timer+0x3c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d005      	beq.n	800b46c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b460:	2200      	movs	r2, #0
 800b462:	4908      	ldr	r1, [pc, #32]	; (800b484 <tcpip_tcp_timer+0x40>)
 800b464:	20fa      	movs	r0, #250	; 0xfa
 800b466:	f000 f8f3 	bl	800b650 <sys_timeout>
 800b46a:	e003      	b.n	800b474 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <tcpip_tcp_timer+0x44>)
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
  }
}
 800b472:	bf00      	nop
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	24003144 	.word	0x24003144
 800b480:	24003148 	.word	0x24003148
 800b484:	0800b445 	.word	0x0800b445
 800b488:	24003190 	.word	0x24003190

0800b48c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <tcp_timer_needed+0x30>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10f      	bne.n	800b4b8 <tcp_timer_needed+0x2c>
 800b498:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <tcp_timer_needed+0x34>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d103      	bne.n	800b4a8 <tcp_timer_needed+0x1c>
 800b4a0:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <tcp_timer_needed+0x38>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d007      	beq.n	800b4b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <tcp_timer_needed+0x30>)
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	4905      	ldr	r1, [pc, #20]	; (800b4c8 <tcp_timer_needed+0x3c>)
 800b4b2:	20fa      	movs	r0, #250	; 0xfa
 800b4b4:	f000 f8cc 	bl	800b650 <sys_timeout>
  }
}
 800b4b8:	bf00      	nop
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	24003190 	.word	0x24003190
 800b4c0:	24003144 	.word	0x24003144
 800b4c4:	24003148 	.word	0x24003148
 800b4c8:	0800b445 	.word	0x0800b445

0800b4cc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b4d8:	2006      	movs	r0, #6
 800b4da:	f7f9 fd07 	bl	8004eec <memp_malloc>
 800b4de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d109      	bne.n	800b4fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d151      	bne.n	800b590 <sys_timeout_abs+0xc4>
 800b4ec:	4b2a      	ldr	r3, [pc, #168]	; (800b598 <sys_timeout_abs+0xcc>)
 800b4ee:	22be      	movs	r2, #190	; 0xbe
 800b4f0:	492a      	ldr	r1, [pc, #168]	; (800b59c <sys_timeout_abs+0xd0>)
 800b4f2:	482b      	ldr	r0, [pc, #172]	; (800b5a0 <sys_timeout_abs+0xd4>)
 800b4f4:	f002 fe04 	bl	800e100 <iprintf>
    return;
 800b4f8:	e04a      	b.n	800b590 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b512:	4b24      	ldr	r3, [pc, #144]	; (800b5a4 <sys_timeout_abs+0xd8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b51a:	4a22      	ldr	r2, [pc, #136]	; (800b5a4 <sys_timeout_abs+0xd8>)
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6013      	str	r3, [r2, #0]
    return;
 800b520:	e037      	b.n	800b592 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	4b1f      	ldr	r3, [pc, #124]	; (800b5a4 <sys_timeout_abs+0xd8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	0fdb      	lsrs	r3, r3, #31
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b53a:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <sys_timeout_abs+0xd8>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b542:	4a18      	ldr	r2, [pc, #96]	; (800b5a4 <sys_timeout_abs+0xd8>)
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	e023      	b.n	800b592 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b54a:	4b16      	ldr	r3, [pc, #88]	; (800b5a4 <sys_timeout_abs+0xd8>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	617b      	str	r3, [r7, #20]
 800b550:	e01a      	b.n	800b588 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00b      	beq.n	800b572 <sys_timeout_abs+0xa6>
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	0fdb      	lsrs	r3, r3, #31
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d007      	beq.n	800b582 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	601a      	str	r2, [r3, #0]
        break;
 800b580:	e007      	b.n	800b592 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e1      	bne.n	800b552 <sys_timeout_abs+0x86>
 800b58e:	e000      	b.n	800b592 <sys_timeout_abs+0xc6>
    return;
 800b590:	bf00      	nop
      }
    }
  }
}
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	08011088 	.word	0x08011088
 800b59c:	080110bc 	.word	0x080110bc
 800b5a0:	080110fc 	.word	0x080110fc
 800b5a4:	24003188 	.word	0x24003188

0800b5a8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4798      	blx	r3

  now = sys_now();
 800b5ba:	f7f8 fd41 	bl	8004040 <sys_now>
 800b5be:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	4b0f      	ldr	r3, [pc, #60]	; (800b604 <lwip_cyclic_timer+0x5c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	0fdb      	lsrs	r3, r3, #31
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d009      	beq.n	800b5f2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	4907      	ldr	r1, [pc, #28]	; (800b608 <lwip_cyclic_timer+0x60>)
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff ff6e 	bl	800b4cc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b5f0:	e004      	b.n	800b5fc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	4904      	ldr	r1, [pc, #16]	; (800b608 <lwip_cyclic_timer+0x60>)
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f7ff ff68 	bl	800b4cc <sys_timeout_abs>
}
 800b5fc:	bf00      	nop
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	2400318c 	.word	0x2400318c
 800b608:	0800b5a9 	.word	0x0800b5a9

0800b60c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b612:	2301      	movs	r3, #1
 800b614:	607b      	str	r3, [r7, #4]
 800b616:	e00e      	b.n	800b636 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b618:	4a0b      	ldr	r2, [pc, #44]	; (800b648 <sys_timeouts_init+0x3c>)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	00db      	lsls	r3, r3, #3
 800b624:	4a08      	ldr	r2, [pc, #32]	; (800b648 <sys_timeouts_init+0x3c>)
 800b626:	4413      	add	r3, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	4908      	ldr	r1, [pc, #32]	; (800b64c <sys_timeouts_init+0x40>)
 800b62c:	f000 f810 	bl	800b650 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3301      	adds	r3, #1
 800b634:	607b      	str	r3, [r7, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d9ed      	bls.n	800b618 <sys_timeouts_init+0xc>
  }
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	08011c6c 	.word	0x08011c6c
 800b64c:	0800b5a9 	.word	0x0800b5a9

0800b650 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b662:	d306      	bcc.n	800b672 <sys_timeout+0x22>
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <sys_timeout+0x40>)
 800b666:	f240 1229 	movw	r2, #297	; 0x129
 800b66a:	490a      	ldr	r1, [pc, #40]	; (800b694 <sys_timeout+0x44>)
 800b66c:	480a      	ldr	r0, [pc, #40]	; (800b698 <sys_timeout+0x48>)
 800b66e:	f002 fd47 	bl	800e100 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b672:	f7f8 fce5 	bl	8004040 <sys_now>
 800b676:	4602      	mov	r2, r0
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4413      	add	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	68b9      	ldr	r1, [r7, #8]
 800b682:	6978      	ldr	r0, [r7, #20]
 800b684:	f7ff ff22 	bl	800b4cc <sys_timeout_abs>
#endif
}
 800b688:	bf00      	nop
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	08011088 	.word	0x08011088
 800b694:	08011124 	.word	0x08011124
 800b698:	080110fc 	.word	0x080110fc

0800b69c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b6a2:	f7f8 fccd 	bl	8004040 <sys_now>
 800b6a6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b6a8:	4b1a      	ldr	r3, [pc, #104]	; (800b714 <sys_check_timeouts+0x78>)
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <sys_check_timeouts+0x1a>
 800b6b2:	f7f9 ffc7 	bl	8005644 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b6b6:	4b18      	ldr	r3, [pc, #96]	; (800b718 <sys_check_timeouts+0x7c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d022      	beq.n	800b708 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	0fdb      	lsrs	r3, r3, #31
 800b6cc:	f003 0301 	and.w	r3, r3, #1
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d11a      	bne.n	800b70c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a0f      	ldr	r2, [pc, #60]	; (800b718 <sys_check_timeouts+0x7c>)
 800b6dc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	4a0b      	ldr	r2, [pc, #44]	; (800b71c <sys_check_timeouts+0x80>)
 800b6f0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b6f2:	68b9      	ldr	r1, [r7, #8]
 800b6f4:	2006      	movs	r0, #6
 800b6f6:	f7f9 fc69 	bl	8004fcc <memp_free>
    if (handler != NULL) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0d3      	beq.n	800b6a8 <sys_check_timeouts+0xc>
      handler(arg);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6838      	ldr	r0, [r7, #0]
 800b704:	4798      	blx	r3
  do {
 800b706:	e7cf      	b.n	800b6a8 <sys_check_timeouts+0xc>
      return;
 800b708:	bf00      	nop
 800b70a:	e000      	b.n	800b70e <sys_check_timeouts+0x72>
      return;
 800b70c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	24003135 	.word	0x24003135
 800b718:	24003188 	.word	0x24003188
 800b71c:	2400318c 	.word	0x2400318c

0800b720 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b724:	f002 fd04 	bl	800e130 <rand>
 800b728:	4603      	mov	r3, r0
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b730:	b29b      	uxth	r3, r3
 800b732:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b736:	b29a      	uxth	r2, r3
 800b738:	4b01      	ldr	r3, [pc, #4]	; (800b740 <udp_init+0x20>)
 800b73a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b73c:	bf00      	nop
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	2400002c 	.word	0x2400002c

0800b744 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	4613      	mov	r3, r2
 800b750:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d105      	bne.n	800b764 <udp_input_local_match+0x20>
 800b758:	4b27      	ldr	r3, [pc, #156]	; (800b7f8 <udp_input_local_match+0xb4>)
 800b75a:	2287      	movs	r2, #135	; 0x87
 800b75c:	4927      	ldr	r1, [pc, #156]	; (800b7fc <udp_input_local_match+0xb8>)
 800b75e:	4828      	ldr	r0, [pc, #160]	; (800b800 <udp_input_local_match+0xbc>)
 800b760:	f002 fcce 	bl	800e100 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d105      	bne.n	800b776 <udp_input_local_match+0x32>
 800b76a:	4b23      	ldr	r3, [pc, #140]	; (800b7f8 <udp_input_local_match+0xb4>)
 800b76c:	2288      	movs	r2, #136	; 0x88
 800b76e:	4925      	ldr	r1, [pc, #148]	; (800b804 <udp_input_local_match+0xc0>)
 800b770:	4823      	ldr	r0, [pc, #140]	; (800b800 <udp_input_local_match+0xbc>)
 800b772:	f002 fcc5 	bl	800e100 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	7a1b      	ldrb	r3, [r3, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00b      	beq.n	800b796 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	7a1a      	ldrb	r2, [r3, #8]
 800b782:	4b21      	ldr	r3, [pc, #132]	; (800b808 <udp_input_local_match+0xc4>)
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b78a:	3301      	adds	r3, #1
 800b78c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b78e:	429a      	cmp	r2, r3
 800b790:	d001      	beq.n	800b796 <udp_input_local_match+0x52>
    return 0;
 800b792:	2300      	movs	r3, #0
 800b794:	e02b      	b.n	800b7ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d018      	beq.n	800b7ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d013      	beq.n	800b7ca <udp_input_local_match+0x86>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00f      	beq.n	800b7ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b7aa:	4b17      	ldr	r3, [pc, #92]	; (800b808 <udp_input_local_match+0xc4>)
 800b7ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b2:	d00a      	beq.n	800b7ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	4b13      	ldr	r3, [pc, #76]	; (800b808 <udp_input_local_match+0xc4>)
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	405a      	eors	r2, r3
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d110      	bne.n	800b7ec <udp_input_local_match+0xa8>
          return 1;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e00f      	b.n	800b7ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <udp_input_local_match+0xa4>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <udp_input_local_match+0xa4>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4b09      	ldr	r3, [pc, #36]	; (800b808 <udp_input_local_match+0xc4>)
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d101      	bne.n	800b7ec <udp_input_local_match+0xa8>
        return 1;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e000      	b.n	800b7ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	08011170 	.word	0x08011170
 800b7fc:	080111a0 	.word	0x080111a0
 800b800:	080111c4 	.word	0x080111c4
 800b804:	080111ec 	.word	0x080111ec
 800b808:	2400021c 	.word	0x2400021c

0800b80c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b08d      	sub	sp, #52	; 0x34
 800b810:	af02      	add	r7, sp, #8
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d105      	bne.n	800b82c <udp_input+0x20>
 800b820:	4b7c      	ldr	r3, [pc, #496]	; (800ba14 <udp_input+0x208>)
 800b822:	22cf      	movs	r2, #207	; 0xcf
 800b824:	497c      	ldr	r1, [pc, #496]	; (800ba18 <udp_input+0x20c>)
 800b826:	487d      	ldr	r0, [pc, #500]	; (800ba1c <udp_input+0x210>)
 800b828:	f002 fc6a 	bl	800e100 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d105      	bne.n	800b83e <udp_input+0x32>
 800b832:	4b78      	ldr	r3, [pc, #480]	; (800ba14 <udp_input+0x208>)
 800b834:	22d0      	movs	r2, #208	; 0xd0
 800b836:	497a      	ldr	r1, [pc, #488]	; (800ba20 <udp_input+0x214>)
 800b838:	4878      	ldr	r0, [pc, #480]	; (800ba1c <udp_input+0x210>)
 800b83a:	f002 fc61 	bl	800e100 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	895b      	ldrh	r3, [r3, #10]
 800b842:	2b07      	cmp	r3, #7
 800b844:	d803      	bhi.n	800b84e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7fa fa36 	bl	8005cb8 <pbuf_free>
    goto end;
 800b84c:	e0de      	b.n	800ba0c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b854:	4b73      	ldr	r3, [pc, #460]	; (800ba24 <udp_input+0x218>)
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	4a72      	ldr	r2, [pc, #456]	; (800ba24 <udp_input+0x218>)
 800b85a:	6812      	ldr	r2, [r2, #0]
 800b85c:	4611      	mov	r1, r2
 800b85e:	4618      	mov	r0, r3
 800b860:	f001 fcae 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800b864:	4603      	mov	r3, r0
 800b866:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	4618      	mov	r0, r3
 800b870:	f7f8 fe0c 	bl	800448c <lwip_htons>
 800b874:	4603      	mov	r3, r0
 800b876:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	885b      	ldrh	r3, [r3, #2]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f8 fe04 	bl	800448c <lwip_htons>
 800b884:	4603      	mov	r3, r0
 800b886:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b88c:	2300      	movs	r3, #0
 800b88e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b890:	2300      	movs	r3, #0
 800b892:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b894:	4b64      	ldr	r3, [pc, #400]	; (800ba28 <udp_input+0x21c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
 800b89a:	e054      	b.n	800b946 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	8a5b      	ldrh	r3, [r3, #18]
 800b8a0:	89fa      	ldrh	r2, [r7, #14]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d14a      	bne.n	800b93c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b8a6:	7cfb      	ldrb	r3, [r7, #19]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8ae:	f7ff ff49 	bl	800b744 <udp_input_local_match>
 800b8b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d041      	beq.n	800b93c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	7c1b      	ldrb	r3, [r3, #16]
 800b8bc:	f003 0304 	and.w	r3, r3, #4
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d11d      	bne.n	800b900 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d102      	bne.n	800b8d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	61fb      	str	r3, [r7, #28]
 800b8ce:	e017      	b.n	800b900 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b8d0:	7cfb      	ldrb	r3, [r7, #19]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d014      	beq.n	800b900 <udp_input+0xf4>
 800b8d6:	4b53      	ldr	r3, [pc, #332]	; (800ba24 <udp_input+0x218>)
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8de:	d10f      	bne.n	800b900 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d008      	beq.n	800b900 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d101      	bne.n	800b900 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	8a9b      	ldrh	r3, [r3, #20]
 800b904:	8a3a      	ldrh	r2, [r7, #16]
 800b906:	429a      	cmp	r2, r3
 800b908:	d118      	bne.n	800b93c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d005      	beq.n	800b91e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <udp_input+0x218>)
 800b918:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d10e      	bne.n	800b93c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d014      	beq.n	800b94e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	68da      	ldr	r2, [r3, #12]
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b92c:	4b3e      	ldr	r3, [pc, #248]	; (800ba28 <udp_input+0x21c>)
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b934:	4a3c      	ldr	r2, [pc, #240]	; (800ba28 <udp_input+0x21c>)
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b93a:	e008      	b.n	800b94e <udp_input+0x142>
      }
    }

    prev = pcb;
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	627b      	str	r3, [r7, #36]	; 0x24
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1a7      	bne.n	800b89c <udp_input+0x90>
 800b94c:	e000      	b.n	800b950 <udp_input+0x144>
        break;
 800b94e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	2b00      	cmp	r3, #0
 800b954:	d101      	bne.n	800b95a <udp_input+0x14e>
    pcb = uncon_pcb;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <udp_input+0x15a>
    for_us = 1;
 800b960:	2301      	movs	r3, #1
 800b962:	76fb      	strb	r3, [r7, #27]
 800b964:	e00a      	b.n	800b97c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	3304      	adds	r3, #4
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	4b2d      	ldr	r3, [pc, #180]	; (800ba24 <udp_input+0x218>)
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	429a      	cmp	r2, r3
 800b972:	bf0c      	ite	eq
 800b974:	2301      	moveq	r3, #1
 800b976:	2300      	movne	r3, #0
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b97c:	7efb      	ldrb	r3, [r7, #27]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d041      	beq.n	800ba06 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b982:	2108      	movs	r1, #8
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7fa f911 	bl	8005bac <pbuf_remove_header>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b990:	4b20      	ldr	r3, [pc, #128]	; (800ba14 <udp_input+0x208>)
 800b992:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b996:	4925      	ldr	r1, [pc, #148]	; (800ba2c <udp_input+0x220>)
 800b998:	4820      	ldr	r0, [pc, #128]	; (800ba1c <udp_input+0x210>)
 800b99a:	f002 fbb1 	bl	800e100 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7fa f98a 	bl	8005cb8 <pbuf_free>
      goto end;
 800b9a4:	e032      	b.n	800ba0c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d012      	beq.n	800b9d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00a      	beq.n	800b9ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	699c      	ldr	r4, [r3, #24]
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	69d8      	ldr	r0, [r3, #28]
 800b9bc:	8a3b      	ldrh	r3, [r7, #16]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	4b1b      	ldr	r3, [pc, #108]	; (800ba30 <udp_input+0x224>)
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b9c8:	e021      	b.n	800ba0e <udp_input+0x202>
        pbuf_free(p);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7fa f974 	bl	8005cb8 <pbuf_free>
        goto end;
 800b9d0:	e01c      	b.n	800ba0c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b9d2:	7cfb      	ldrb	r3, [r7, #19]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d112      	bne.n	800b9fe <udp_input+0x1f2>
 800b9d8:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <udp_input+0x218>)
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9e0:	2be0      	cmp	r3, #224	; 0xe0
 800b9e2:	d00c      	beq.n	800b9fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <udp_input+0x218>)
 800b9e6:	899b      	ldrh	r3, [r3, #12]
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	b21b      	sxth	r3, r3
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7fa f94e 	bl	8005c92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b9f6:	2103      	movs	r1, #3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 f8b7 	bl	800cb6c <icmp_dest_unreach>
      pbuf_free(p);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7fa f95a 	bl	8005cb8 <pbuf_free>
  return;
 800ba04:	e003      	b.n	800ba0e <udp_input+0x202>
    pbuf_free(p);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fa f956 	bl	8005cb8 <pbuf_free>
  return;
 800ba0c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ba0e:	372c      	adds	r7, #44	; 0x2c
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd90      	pop	{r4, r7, pc}
 800ba14:	08011170 	.word	0x08011170
 800ba18:	08011214 	.word	0x08011214
 800ba1c:	080111c4 	.word	0x080111c4
 800ba20:	0801122c 	.word	0x0801122c
 800ba24:	2400021c 	.word	0x2400021c
 800ba28:	24003194 	.word	0x24003194
 800ba2c:	08011248 	.word	0x08011248
 800ba30:	2400022c 	.word	0x2400022c

0800ba34 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d01e      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d01a      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d017      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d013      	beq.n	800ba82 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba5a:	4b0d      	ldr	r3, [pc, #52]	; (800ba90 <udp_netif_ip_addr_changed+0x5c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	60fb      	str	r3, [r7, #12]
 800ba60:	e00c      	b.n	800ba7c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d103      	bne.n	800ba76 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1ef      	bne.n	800ba62 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ba82:	bf00      	nop
 800ba84:	3714      	adds	r7, #20
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	24003194 	.word	0x24003194

0800ba94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ba9c:	4915      	ldr	r1, [pc, #84]	; (800baf4 <etharp_free_entry+0x60>)
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4613      	mov	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	4413      	add	r3, r2
 800baa6:	00db      	lsls	r3, r3, #3
 800baa8:	440b      	add	r3, r1
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d013      	beq.n	800bad8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bab0:	4910      	ldr	r1, [pc, #64]	; (800baf4 <etharp_free_entry+0x60>)
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	4613      	mov	r3, r2
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	4413      	add	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	440b      	add	r3, r1
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fa f8f9 	bl	8005cb8 <pbuf_free>
    arp_table[i].q = NULL;
 800bac6:	490b      	ldr	r1, [pc, #44]	; (800baf4 <etharp_free_entry+0x60>)
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4413      	add	r3, r2
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	440b      	add	r3, r1
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bad8:	4906      	ldr	r1, [pc, #24]	; (800baf4 <etharp_free_entry+0x60>)
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	4613      	mov	r3, r2
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	4413      	add	r3, r2
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	440b      	add	r3, r1
 800bae6:	3314      	adds	r3, #20
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	24003198 	.word	0x24003198

0800baf8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e096      	b.n	800bc32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bb04:	494f      	ldr	r1, [pc, #316]	; (800bc44 <etharp_tmr+0x14c>)
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	005b      	lsls	r3, r3, #1
 800bb0c:	4413      	add	r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	440b      	add	r3, r1
 800bb12:	3314      	adds	r3, #20
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 8086 	beq.w	800bc2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bb20:	4948      	ldr	r1, [pc, #288]	; (800bc44 <etharp_tmr+0x14c>)
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	440b      	add	r3, r1
 800bb2e:	3312      	adds	r3, #18
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	b298      	uxth	r0, r3
 800bb36:	4943      	ldr	r1, [pc, #268]	; (800bc44 <etharp_tmr+0x14c>)
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	4413      	add	r3, r2
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	440b      	add	r3, r1
 800bb44:	3312      	adds	r3, #18
 800bb46:	4602      	mov	r2, r0
 800bb48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb4a:	493e      	ldr	r1, [pc, #248]	; (800bc44 <etharp_tmr+0x14c>)
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	005b      	lsls	r3, r3, #1
 800bb52:	4413      	add	r3, r2
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	440b      	add	r3, r1
 800bb58:	3312      	adds	r3, #18
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bb60:	d215      	bcs.n	800bb8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb62:	4938      	ldr	r1, [pc, #224]	; (800bc44 <etharp_tmr+0x14c>)
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	4613      	mov	r3, r2
 800bb68:	005b      	lsls	r3, r3, #1
 800bb6a:	4413      	add	r3, r2
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	440b      	add	r3, r1
 800bb70:	3314      	adds	r3, #20
 800bb72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d10e      	bne.n	800bb96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bb78:	4932      	ldr	r1, [pc, #200]	; (800bc44 <etharp_tmr+0x14c>)
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	005b      	lsls	r3, r3, #1
 800bb80:	4413      	add	r3, r2
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	440b      	add	r3, r1
 800bb86:	3312      	adds	r3, #18
 800bb88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb8a:	2b04      	cmp	r3, #4
 800bb8c:	d903      	bls.n	800bb96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff ff80 	bl	800ba94 <etharp_free_entry>
 800bb94:	e04a      	b.n	800bc2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bb96:	492b      	ldr	r1, [pc, #172]	; (800bc44 <etharp_tmr+0x14c>)
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	4413      	add	r3, r2
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	440b      	add	r3, r1
 800bba4:	3314      	adds	r3, #20
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d10a      	bne.n	800bbc2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bbac:	4925      	ldr	r1, [pc, #148]	; (800bc44 <etharp_tmr+0x14c>)
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	440b      	add	r3, r1
 800bbba:	3314      	adds	r3, #20
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e034      	b.n	800bc2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bbc2:	4920      	ldr	r1, [pc, #128]	; (800bc44 <etharp_tmr+0x14c>)
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	4413      	add	r3, r2
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	440b      	add	r3, r1
 800bbd0:	3314      	adds	r3, #20
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b04      	cmp	r3, #4
 800bbd6:	d10a      	bne.n	800bbee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bbd8:	491a      	ldr	r1, [pc, #104]	; (800bc44 <etharp_tmr+0x14c>)
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	4413      	add	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	440b      	add	r3, r1
 800bbe6:	3314      	adds	r3, #20
 800bbe8:	2202      	movs	r2, #2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e01e      	b.n	800bc2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bbee:	4915      	ldr	r1, [pc, #84]	; (800bc44 <etharp_tmr+0x14c>)
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	4413      	add	r3, r2
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3314      	adds	r3, #20
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d113      	bne.n	800bc2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bc04:	490f      	ldr	r1, [pc, #60]	; (800bc44 <etharp_tmr+0x14c>)
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	005b      	lsls	r3, r3, #1
 800bc0c:	4413      	add	r3, r2
 800bc0e:	00db      	lsls	r3, r3, #3
 800bc10:	440b      	add	r3, r1
 800bc12:	3308      	adds	r3, #8
 800bc14:	6818      	ldr	r0, [r3, #0]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	4413      	add	r3, r2
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	4a08      	ldr	r2, [pc, #32]	; (800bc44 <etharp_tmr+0x14c>)
 800bc22:	4413      	add	r3, r2
 800bc24:	3304      	adds	r3, #4
 800bc26:	4619      	mov	r1, r3
 800bc28:	f000 fe6e 	bl	800c908 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b09      	cmp	r3, #9
 800bc36:	f77f af65 	ble.w	800bb04 <etharp_tmr+0xc>
      }
    }
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	24003198 	.word	0x24003198

0800bc48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	; 0x28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	460b      	mov	r3, r1
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bc56:	230a      	movs	r3, #10
 800bc58:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bc5a:	230a      	movs	r3, #10
 800bc5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bc5e:	230a      	movs	r3, #10
 800bc60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bc66:	230a      	movs	r3, #10
 800bc68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	83bb      	strh	r3, [r7, #28]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	837b      	strh	r3, [r7, #26]
 800bc72:	2300      	movs	r3, #0
 800bc74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc76:	2300      	movs	r3, #0
 800bc78:	843b      	strh	r3, [r7, #32]
 800bc7a:	e0ae      	b.n	800bdda <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bc7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc80:	49a6      	ldr	r1, [pc, #664]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bc82:	4613      	mov	r3, r2
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	4413      	add	r3, r2
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	440b      	add	r3, r1
 800bc8c:	3314      	adds	r3, #20
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bc92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bc96:	2b0a      	cmp	r3, #10
 800bc98:	d105      	bne.n	800bca6 <etharp_find_entry+0x5e>
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bca0:	8c3b      	ldrh	r3, [r7, #32]
 800bca2:	847b      	strh	r3, [r7, #34]	; 0x22
 800bca4:	e095      	b.n	800bdd2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 8092 	beq.w	800bdd2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d009      	beq.n	800bcc8 <etharp_find_entry+0x80>
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d806      	bhi.n	800bcc8 <etharp_find_entry+0x80>
 800bcba:	4b99      	ldr	r3, [pc, #612]	; (800bf20 <etharp_find_entry+0x2d8>)
 800bcbc:	f240 1223 	movw	r2, #291	; 0x123
 800bcc0:	4998      	ldr	r1, [pc, #608]	; (800bf24 <etharp_find_entry+0x2dc>)
 800bcc2:	4899      	ldr	r0, [pc, #612]	; (800bf28 <etharp_find_entry+0x2e0>)
 800bcc4:	f002 fa1c 	bl	800e100 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d020      	beq.n	800bd10 <etharp_find_entry+0xc8>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6819      	ldr	r1, [r3, #0]
 800bcd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcd6:	4891      	ldr	r0, [pc, #580]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bcd8:	4613      	mov	r3, r2
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	4413      	add	r3, r2
 800bcde:	00db      	lsls	r3, r3, #3
 800bce0:	4403      	add	r3, r0
 800bce2:	3304      	adds	r3, #4
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4299      	cmp	r1, r3
 800bce8:	d112      	bne.n	800bd10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00c      	beq.n	800bd0a <etharp_find_entry+0xc2>
 800bcf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcf4:	4989      	ldr	r1, [pc, #548]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	440b      	add	r3, r1
 800bd00:	3308      	adds	r3, #8
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d102      	bne.n	800bd10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bd0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd0e:	e100      	b.n	800bf12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d140      	bne.n	800bd98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bd16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd1a:	4980      	ldr	r1, [pc, #512]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	4413      	add	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	440b      	add	r3, r1
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01a      	beq.n	800bd62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bd2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd30:	497a      	ldr	r1, [pc, #488]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bd32:	4613      	mov	r3, r2
 800bd34:	005b      	lsls	r3, r3, #1
 800bd36:	4413      	add	r3, r2
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	440b      	add	r3, r1
 800bd3c:	3312      	adds	r3, #18
 800bd3e:	881b      	ldrh	r3, [r3, #0]
 800bd40:	8bba      	ldrh	r2, [r7, #28]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d845      	bhi.n	800bdd2 <etharp_find_entry+0x18a>
            old_queue = i;
 800bd46:	8c3b      	ldrh	r3, [r7, #32]
 800bd48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bd4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd4e:	4973      	ldr	r1, [pc, #460]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bd50:	4613      	mov	r3, r2
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	4413      	add	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	440b      	add	r3, r1
 800bd5a:	3312      	adds	r3, #18
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	83bb      	strh	r3, [r7, #28]
 800bd60:	e037      	b.n	800bdd2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bd62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd66:	496d      	ldr	r1, [pc, #436]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bd68:	4613      	mov	r3, r2
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	4413      	add	r3, r2
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	440b      	add	r3, r1
 800bd72:	3312      	adds	r3, #18
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	8b7a      	ldrh	r2, [r7, #26]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d82a      	bhi.n	800bdd2 <etharp_find_entry+0x18a>
            old_pending = i;
 800bd7c:	8c3b      	ldrh	r3, [r7, #32]
 800bd7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bd80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd84:	4965      	ldr	r1, [pc, #404]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bd86:	4613      	mov	r3, r2
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	4413      	add	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	440b      	add	r3, r1
 800bd90:	3312      	adds	r3, #18
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	837b      	strh	r3, [r7, #26]
 800bd96:	e01c      	b.n	800bdd2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d919      	bls.n	800bdd2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bd9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bda2:	495e      	ldr	r1, [pc, #376]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bda4:	4613      	mov	r3, r2
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	4413      	add	r3, r2
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	440b      	add	r3, r1
 800bdae:	3312      	adds	r3, #18
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	8b3a      	ldrh	r2, [r7, #24]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d80c      	bhi.n	800bdd2 <etharp_find_entry+0x18a>
            old_stable = i;
 800bdb8:	8c3b      	ldrh	r3, [r7, #32]
 800bdba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bdbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdc0:	4956      	ldr	r1, [pc, #344]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	3312      	adds	r3, #18
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bdd2:	8c3b      	ldrh	r3, [r7, #32]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	843b      	strh	r3, [r7, #32]
 800bdda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdde:	2b09      	cmp	r3, #9
 800bde0:	f77f af4c 	ble.w	800bc7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	f003 0302 	and.w	r3, r3, #2
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d108      	bne.n	800be00 <etharp_find_entry+0x1b8>
 800bdee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bdf2:	2b0a      	cmp	r3, #10
 800bdf4:	d107      	bne.n	800be06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bdf6:	7afb      	ldrb	r3, [r7, #11]
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800be00:	f04f 33ff 	mov.w	r3, #4294967295
 800be04:	e085      	b.n	800bf12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800be06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be0a:	2b09      	cmp	r3, #9
 800be0c:	dc02      	bgt.n	800be14 <etharp_find_entry+0x1cc>
    i = empty;
 800be0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be10:	843b      	strh	r3, [r7, #32]
 800be12:	e039      	b.n	800be88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800be14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800be18:	2b09      	cmp	r3, #9
 800be1a:	dc14      	bgt.n	800be46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800be1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800be20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be24:	493d      	ldr	r1, [pc, #244]	; (800bf1c <etharp_find_entry+0x2d4>)
 800be26:	4613      	mov	r3, r2
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	4413      	add	r3, r2
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	440b      	add	r3, r1
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d018      	beq.n	800be68 <etharp_find_entry+0x220>
 800be36:	4b3a      	ldr	r3, [pc, #232]	; (800bf20 <etharp_find_entry+0x2d8>)
 800be38:	f240 126d 	movw	r2, #365	; 0x16d
 800be3c:	493b      	ldr	r1, [pc, #236]	; (800bf2c <etharp_find_entry+0x2e4>)
 800be3e:	483a      	ldr	r0, [pc, #232]	; (800bf28 <etharp_find_entry+0x2e0>)
 800be40:	f002 f95e 	bl	800e100 <iprintf>
 800be44:	e010      	b.n	800be68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800be46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	dc02      	bgt.n	800be54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800be4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be50:	843b      	strh	r3, [r7, #32]
 800be52:	e009      	b.n	800be68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800be54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800be58:	2b09      	cmp	r3, #9
 800be5a:	dc02      	bgt.n	800be62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800be5c:	8bfb      	ldrh	r3, [r7, #30]
 800be5e:	843b      	strh	r3, [r7, #32]
 800be60:	e002      	b.n	800be68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800be62:	f04f 33ff 	mov.w	r3, #4294967295
 800be66:	e054      	b.n	800bf12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be6c:	2b09      	cmp	r3, #9
 800be6e:	dd06      	ble.n	800be7e <etharp_find_entry+0x236>
 800be70:	4b2b      	ldr	r3, [pc, #172]	; (800bf20 <etharp_find_entry+0x2d8>)
 800be72:	f240 127f 	movw	r2, #383	; 0x17f
 800be76:	492e      	ldr	r1, [pc, #184]	; (800bf30 <etharp_find_entry+0x2e8>)
 800be78:	482b      	ldr	r0, [pc, #172]	; (800bf28 <etharp_find_entry+0x2e0>)
 800be7a:	f002 f941 	bl	800e100 <iprintf>
    etharp_free_entry(i);
 800be7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fe06 	bl	800ba94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be8c:	2b09      	cmp	r3, #9
 800be8e:	dd06      	ble.n	800be9e <etharp_find_entry+0x256>
 800be90:	4b23      	ldr	r3, [pc, #140]	; (800bf20 <etharp_find_entry+0x2d8>)
 800be92:	f240 1283 	movw	r2, #387	; 0x183
 800be96:	4926      	ldr	r1, [pc, #152]	; (800bf30 <etharp_find_entry+0x2e8>)
 800be98:	4823      	ldr	r0, [pc, #140]	; (800bf28 <etharp_find_entry+0x2e0>)
 800be9a:	f002 f931 	bl	800e100 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800be9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bea2:	491e      	ldr	r1, [pc, #120]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bea4:	4613      	mov	r3, r2
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	4413      	add	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	440b      	add	r3, r1
 800beae:	3314      	adds	r3, #20
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d006      	beq.n	800bec4 <etharp_find_entry+0x27c>
 800beb6:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <etharp_find_entry+0x2d8>)
 800beb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bebc:	491d      	ldr	r1, [pc, #116]	; (800bf34 <etharp_find_entry+0x2ec>)
 800bebe:	481a      	ldr	r0, [pc, #104]	; (800bf28 <etharp_find_entry+0x2e0>)
 800bec0:	f002 f91e 	bl	800e100 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00b      	beq.n	800bee2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800beca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6819      	ldr	r1, [r3, #0]
 800bed2:	4812      	ldr	r0, [pc, #72]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bed4:	4613      	mov	r3, r2
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	4413      	add	r3, r2
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	4403      	add	r3, r0
 800bede:	3304      	adds	r3, #4
 800bee0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bee2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bee6:	490d      	ldr	r1, [pc, #52]	; (800bf1c <etharp_find_entry+0x2d4>)
 800bee8:	4613      	mov	r3, r2
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	4413      	add	r3, r2
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	440b      	add	r3, r1
 800bef2:	3312      	adds	r3, #18
 800bef4:	2200      	movs	r2, #0
 800bef6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bef8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800befc:	4907      	ldr	r1, [pc, #28]	; (800bf1c <etharp_find_entry+0x2d4>)
 800befe:	4613      	mov	r3, r2
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	4413      	add	r3, r2
 800bf04:	00db      	lsls	r3, r3, #3
 800bf06:	440b      	add	r3, r1
 800bf08:	3308      	adds	r3, #8
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bf0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3728      	adds	r7, #40	; 0x28
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	24003198 	.word	0x24003198
 800bf20:	080114d4 	.word	0x080114d4
 800bf24:	0801150c 	.word	0x0801150c
 800bf28:	0801154c 	.word	0x0801154c
 800bf2c:	08011574 	.word	0x08011574
 800bf30:	0801158c 	.word	0x0801158c
 800bf34:	080115a0 	.word	0x080115a0

0800bf38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af02      	add	r7, sp, #8
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf4c:	2b06      	cmp	r3, #6
 800bf4e:	d006      	beq.n	800bf5e <etharp_update_arp_entry+0x26>
 800bf50:	4b48      	ldr	r3, [pc, #288]	; (800c074 <etharp_update_arp_entry+0x13c>)
 800bf52:	f240 12a9 	movw	r2, #425	; 0x1a9
 800bf56:	4948      	ldr	r1, [pc, #288]	; (800c078 <etharp_update_arp_entry+0x140>)
 800bf58:	4848      	ldr	r0, [pc, #288]	; (800c07c <etharp_update_arp_entry+0x144>)
 800bf5a:	f002 f8d1 	bl	800e100 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d012      	beq.n	800bf8a <etharp_update_arp_entry+0x52>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00e      	beq.n	800bf8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68f9      	ldr	r1, [r7, #12]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f001 f924 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800bf78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d105      	bne.n	800bf8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf86:	2be0      	cmp	r3, #224	; 0xe0
 800bf88:	d102      	bne.n	800bf90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bf8a:	f06f 030f 	mvn.w	r3, #15
 800bf8e:	e06c      	b.n	800c06a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	4619      	mov	r1, r3
 800bf96:	68b8      	ldr	r0, [r7, #8]
 800bf98:	f7ff fe56 	bl	800bc48 <etharp_find_entry>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bfa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	da02      	bge.n	800bfae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bfa8:	8afb      	ldrh	r3, [r7, #22]
 800bfaa:	b25b      	sxtb	r3, r3
 800bfac:	e05d      	b.n	800c06a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bfae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfb2:	4933      	ldr	r1, [pc, #204]	; (800c080 <etharp_update_arp_entry+0x148>)
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	005b      	lsls	r3, r3, #1
 800bfb8:	4413      	add	r3, r2
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	440b      	add	r3, r1
 800bfbe:	3314      	adds	r3, #20
 800bfc0:	2202      	movs	r2, #2
 800bfc2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bfc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfc8:	492d      	ldr	r1, [pc, #180]	; (800c080 <etharp_update_arp_entry+0x148>)
 800bfca:	4613      	mov	r3, r2
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	4413      	add	r3, r2
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	440b      	add	r3, r1
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bfda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	4a25      	ldr	r2, [pc, #148]	; (800c080 <etharp_update_arp_entry+0x148>)
 800bfea:	4413      	add	r3, r2
 800bfec:	3304      	adds	r3, #4
 800bfee:	2206      	movs	r2, #6
 800bff0:	6879      	ldr	r1, [r7, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f002 f86e 	bl	800e0d4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bffc:	4920      	ldr	r1, [pc, #128]	; (800c080 <etharp_update_arp_entry+0x148>)
 800bffe:	4613      	mov	r3, r2
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	4413      	add	r3, r2
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	440b      	add	r3, r1
 800c008:	3312      	adds	r3, #18
 800c00a:	2200      	movs	r2, #0
 800c00c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c00e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c012:	491b      	ldr	r1, [pc, #108]	; (800c080 <etharp_update_arp_entry+0x148>)
 800c014:	4613      	mov	r3, r2
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	4413      	add	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	440b      	add	r3, r1
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d021      	beq.n	800c068 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c024:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c028:	4915      	ldr	r1, [pc, #84]	; (800c080 <etharp_update_arp_entry+0x148>)
 800c02a:	4613      	mov	r3, r2
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	4413      	add	r3, r2
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	440b      	add	r3, r1
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c038:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c03c:	4910      	ldr	r1, [pc, #64]	; (800c080 <etharp_update_arp_entry+0x148>)
 800c03e:	4613      	mov	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	440b      	add	r3, r1
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6939      	ldr	r1, [r7, #16]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f001 ffbd 	bl	800dfdc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c062:	6938      	ldr	r0, [r7, #16]
 800c064:	f7f9 fe28 	bl	8005cb8 <pbuf_free>
  }
  return ERR_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	080114d4 	.word	0x080114d4
 800c078:	080115cc 	.word	0x080115cc
 800c07c:	0801154c 	.word	0x0801154c
 800c080:	24003198 	.word	0x24003198

0800c084 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c08c:	2300      	movs	r3, #0
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e01e      	b.n	800c0d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c092:	4913      	ldr	r1, [pc, #76]	; (800c0e0 <etharp_cleanup_netif+0x5c>)
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	4613      	mov	r3, r2
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	4413      	add	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	440b      	add	r3, r1
 800c0a0:	3314      	adds	r3, #20
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00e      	beq.n	800c0ca <etharp_cleanup_netif+0x46>
 800c0ac:	490c      	ldr	r1, [pc, #48]	; (800c0e0 <etharp_cleanup_netif+0x5c>)
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	4413      	add	r3, r2
 800c0b6:	00db      	lsls	r3, r3, #3
 800c0b8:	440b      	add	r3, r1
 800c0ba:	3308      	adds	r3, #8
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d102      	bne.n	800c0ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff fce5 	bl	800ba94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b09      	cmp	r3, #9
 800c0d4:	dddd      	ble.n	800c092 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	24003198 	.word	0x24003198

0800c0e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c0e4:	b5b0      	push	{r4, r5, r7, lr}
 800c0e6:	b08a      	sub	sp, #40	; 0x28
 800c0e8:	af04      	add	r7, sp, #16
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d107      	bne.n	800c104 <etharp_input+0x20>
 800c0f4:	4b3d      	ldr	r3, [pc, #244]	; (800c1ec <etharp_input+0x108>)
 800c0f6:	f240 228a 	movw	r2, #650	; 0x28a
 800c0fa:	493d      	ldr	r1, [pc, #244]	; (800c1f0 <etharp_input+0x10c>)
 800c0fc:	483d      	ldr	r0, [pc, #244]	; (800c1f4 <etharp_input+0x110>)
 800c0fe:	f001 ffff 	bl	800e100 <iprintf>
 800c102:	e06f      	b.n	800c1e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	881b      	ldrh	r3, [r3, #0]
 800c10e:	b29b      	uxth	r3, r3
 800c110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c114:	d10c      	bne.n	800c130 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c11a:	2b06      	cmp	r3, #6
 800c11c:	d108      	bne.n	800c130 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c122:	2b04      	cmp	r3, #4
 800c124:	d104      	bne.n	800c130 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	885b      	ldrh	r3, [r3, #2]
 800c12a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c12c:	2b08      	cmp	r3, #8
 800c12e:	d003      	beq.n	800c138 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7f9 fdc1 	bl	8005cb8 <pbuf_free>
    return;
 800c136:	e055      	b.n	800c1e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	330e      	adds	r3, #14
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	3318      	adds	r3, #24
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	3304      	adds	r3, #4
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d102      	bne.n	800c158 <etharp_input+0x74>
    for_us = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]
 800c156:	e009      	b.n	800c16c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	3304      	adds	r3, #4
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	429a      	cmp	r2, r3
 800c162:	bf0c      	ite	eq
 800c164:	2301      	moveq	r3, #1
 800c166:	2300      	movne	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f103 0208 	add.w	r2, r3, #8
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <etharp_input+0x98>
 800c178:	2301      	movs	r3, #1
 800c17a:	e000      	b.n	800c17e <etharp_input+0x9a>
 800c17c:	2302      	movs	r3, #2
 800c17e:	f107 010c 	add.w	r1, r7, #12
 800c182:	6838      	ldr	r0, [r7, #0]
 800c184:	f7ff fed8 	bl	800bf38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	88db      	ldrh	r3, [r3, #6]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c192:	d003      	beq.n	800c19c <etharp_input+0xb8>
 800c194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c198:	d01e      	beq.n	800c1d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c19a:	e020      	b.n	800c1de <etharp_input+0xfa>
      if (for_us) {
 800c19c:	7dfb      	ldrb	r3, [r7, #23]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d01c      	beq.n	800c1dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c1bc:	2102      	movs	r1, #2
 800c1be:	9103      	str	r1, [sp, #12]
 800c1c0:	f107 010c 	add.w	r1, r7, #12
 800c1c4:	9102      	str	r1, [sp, #8]
 800c1c6:	9201      	str	r2, [sp, #4]
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	4601      	mov	r1, r0
 800c1d0:	6838      	ldr	r0, [r7, #0]
 800c1d2:	f000 faeb 	bl	800c7ac <etharp_raw>
      break;
 800c1d6:	e001      	b.n	800c1dc <etharp_input+0xf8>
      break;
 800c1d8:	bf00      	nop
 800c1da:	e000      	b.n	800c1de <etharp_input+0xfa>
      break;
 800c1dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7f9 fd6a 	bl	8005cb8 <pbuf_free>
}
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	080114d4 	.word	0x080114d4
 800c1f0:	08011624 	.word	0x08011624
 800c1f4:	0801154c 	.word	0x0801154c

0800c1f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	4613      	mov	r3, r2
 800c204:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c206:	79fa      	ldrb	r2, [r7, #7]
 800c208:	4944      	ldr	r1, [pc, #272]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c20a:	4613      	mov	r3, r2
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	4413      	add	r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	440b      	add	r3, r1
 800c214:	3314      	adds	r3, #20
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d806      	bhi.n	800c22a <etharp_output_to_arp_index+0x32>
 800c21c:	4b40      	ldr	r3, [pc, #256]	; (800c320 <etharp_output_to_arp_index+0x128>)
 800c21e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c222:	4940      	ldr	r1, [pc, #256]	; (800c324 <etharp_output_to_arp_index+0x12c>)
 800c224:	4840      	ldr	r0, [pc, #256]	; (800c328 <etharp_output_to_arp_index+0x130>)
 800c226:	f001 ff6b 	bl	800e100 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c22a:	79fa      	ldrb	r2, [r7, #7]
 800c22c:	493b      	ldr	r1, [pc, #236]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	440b      	add	r3, r1
 800c238:	3314      	adds	r3, #20
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d153      	bne.n	800c2e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c240:	79fa      	ldrb	r2, [r7, #7]
 800c242:	4936      	ldr	r1, [pc, #216]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c244:	4613      	mov	r3, r2
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	4413      	add	r3, r2
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	440b      	add	r3, r1
 800c24e:	3312      	adds	r3, #18
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c256:	d919      	bls.n	800c28c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c258:	79fa      	ldrb	r2, [r7, #7]
 800c25a:	4613      	mov	r3, r2
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	4413      	add	r3, r2
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	4a2e      	ldr	r2, [pc, #184]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c264:	4413      	add	r3, r2
 800c266:	3304      	adds	r3, #4
 800c268:	4619      	mov	r1, r3
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 fb4c 	bl	800c908 <etharp_request>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d138      	bne.n	800c2e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c276:	79fa      	ldrb	r2, [r7, #7]
 800c278:	4928      	ldr	r1, [pc, #160]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c27a:	4613      	mov	r3, r2
 800c27c:	005b      	lsls	r3, r3, #1
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	440b      	add	r3, r1
 800c284:	3314      	adds	r3, #20
 800c286:	2203      	movs	r2, #3
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	e02d      	b.n	800c2e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c28c:	79fa      	ldrb	r2, [r7, #7]
 800c28e:	4923      	ldr	r1, [pc, #140]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c290:	4613      	mov	r3, r2
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	4413      	add	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	440b      	add	r3, r1
 800c29a:	3312      	adds	r3, #18
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c2a2:	d321      	bcc.n	800c2e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c2a4:	79fa      	ldrb	r2, [r7, #7]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	005b      	lsls	r3, r3, #1
 800c2aa:	4413      	add	r3, r2
 800c2ac:	00db      	lsls	r3, r3, #3
 800c2ae:	4a1b      	ldr	r2, [pc, #108]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c2b0:	4413      	add	r3, r2
 800c2b2:	1d19      	adds	r1, r3, #4
 800c2b4:	79fa      	ldrb	r2, [r7, #7]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	005b      	lsls	r3, r3, #1
 800c2ba:	4413      	add	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	3308      	adds	r3, #8
 800c2c0:	4a16      	ldr	r2, [pc, #88]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c2c2:	4413      	add	r3, r2
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 fafb 	bl	800c8c4 <etharp_request_dst>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d109      	bne.n	800c2e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c2d4:	79fa      	ldrb	r2, [r7, #7]
 800c2d6:	4911      	ldr	r1, [pc, #68]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c2d8:	4613      	mov	r3, r2
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	4413      	add	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	440b      	add	r3, r1
 800c2e2:	3314      	adds	r3, #20
 800c2e4:	2203      	movs	r2, #3
 800c2e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c2ee:	79fa      	ldrb	r2, [r7, #7]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	4413      	add	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	4a08      	ldr	r2, [pc, #32]	; (800c31c <etharp_output_to_arp_index+0x124>)
 800c2fc:	4413      	add	r3, r2
 800c2fe:	3304      	adds	r3, #4
 800c300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c304:	9200      	str	r2, [sp, #0]
 800c306:	460a      	mov	r2, r1
 800c308:	68b9      	ldr	r1, [r7, #8]
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f001 fe66 	bl	800dfdc <ethernet_output>
 800c310:	4603      	mov	r3, r0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	24003198 	.word	0x24003198
 800c320:	080114d4 	.word	0x080114d4
 800c324:	08011644 	.word	0x08011644
 800c328:	0801154c 	.word	0x0801154c

0800c32c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08a      	sub	sp, #40	; 0x28
 800c330:	af02      	add	r7, sp, #8
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d106      	bne.n	800c350 <etharp_output+0x24>
 800c342:	4b73      	ldr	r3, [pc, #460]	; (800c510 <etharp_output+0x1e4>)
 800c344:	f240 321e 	movw	r2, #798	; 0x31e
 800c348:	4972      	ldr	r1, [pc, #456]	; (800c514 <etharp_output+0x1e8>)
 800c34a:	4873      	ldr	r0, [pc, #460]	; (800c518 <etharp_output+0x1ec>)
 800c34c:	f001 fed8 	bl	800e100 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d106      	bne.n	800c364 <etharp_output+0x38>
 800c356:	4b6e      	ldr	r3, [pc, #440]	; (800c510 <etharp_output+0x1e4>)
 800c358:	f240 321f 	movw	r2, #799	; 0x31f
 800c35c:	496f      	ldr	r1, [pc, #444]	; (800c51c <etharp_output+0x1f0>)
 800c35e:	486e      	ldr	r0, [pc, #440]	; (800c518 <etharp_output+0x1ec>)
 800c360:	f001 fece 	bl	800e100 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <etharp_output+0x4c>
 800c36a:	4b69      	ldr	r3, [pc, #420]	; (800c510 <etharp_output+0x1e4>)
 800c36c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c370:	496b      	ldr	r1, [pc, #428]	; (800c520 <etharp_output+0x1f4>)
 800c372:	4869      	ldr	r0, [pc, #420]	; (800c518 <etharp_output+0x1ec>)
 800c374:	f001 fec4 	bl	800e100 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68f9      	ldr	r1, [r7, #12]
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 ff1e 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c38a:	4b66      	ldr	r3, [pc, #408]	; (800c524 <etharp_output+0x1f8>)
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	e0af      	b.n	800c4f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c398:	2be0      	cmp	r3, #224	; 0xe0
 800c39a:	d118      	bne.n	800c3ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c39c:	2301      	movs	r3, #1
 800c39e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c3a4:	235e      	movs	r3, #94	; 0x5e
 800c3a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	3302      	adds	r3, #2
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3303      	adds	r3, #3
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c3c6:	f107 0310 	add.w	r3, r7, #16
 800c3ca:	61fb      	str	r3, [r7, #28]
 800c3cc:	e090      	b.n	800c4f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	405a      	eors	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d012      	beq.n	800c40c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c3ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d00b      	beq.n	800c40c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	330c      	adds	r3, #12
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	330c      	adds	r3, #12
 800c402:	61bb      	str	r3, [r7, #24]
 800c404:	e002      	b.n	800c40c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c406:	f06f 0303 	mvn.w	r3, #3
 800c40a:	e07d      	b.n	800c508 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c40c:	4b46      	ldr	r3, [pc, #280]	; (800c528 <etharp_output+0x1fc>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	4619      	mov	r1, r3
 800c412:	4a46      	ldr	r2, [pc, #280]	; (800c52c <etharp_output+0x200>)
 800c414:	460b      	mov	r3, r1
 800c416:	005b      	lsls	r3, r3, #1
 800c418:	440b      	add	r3, r1
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	4413      	add	r3, r2
 800c41e:	3314      	adds	r3, #20
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d925      	bls.n	800c472 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c426:	4b40      	ldr	r3, [pc, #256]	; (800c528 <etharp_output+0x1fc>)
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	4619      	mov	r1, r3
 800c42c:	4a3f      	ldr	r2, [pc, #252]	; (800c52c <etharp_output+0x200>)
 800c42e:	460b      	mov	r3, r1
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	440b      	add	r3, r1
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	4413      	add	r3, r2
 800c438:	3308      	adds	r3, #8
 800c43a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d117      	bne.n	800c472 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	4b38      	ldr	r3, [pc, #224]	; (800c528 <etharp_output+0x1fc>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	4618      	mov	r0, r3
 800c44c:	4937      	ldr	r1, [pc, #220]	; (800c52c <etharp_output+0x200>)
 800c44e:	4603      	mov	r3, r0
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	4403      	add	r3, r0
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	440b      	add	r3, r1
 800c458:	3304      	adds	r3, #4
 800c45a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d108      	bne.n	800c472 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c460:	4b31      	ldr	r3, [pc, #196]	; (800c528 <etharp_output+0x1fc>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	461a      	mov	r2, r3
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f7ff fec5 	bl	800c1f8 <etharp_output_to_arp_index>
 800c46e:	4603      	mov	r3, r0
 800c470:	e04a      	b.n	800c508 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c472:	2300      	movs	r3, #0
 800c474:	75fb      	strb	r3, [r7, #23]
 800c476:	e031      	b.n	800c4dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c478:	7dfa      	ldrb	r2, [r7, #23]
 800c47a:	492c      	ldr	r1, [pc, #176]	; (800c52c <etharp_output+0x200>)
 800c47c:	4613      	mov	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	4413      	add	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	440b      	add	r3, r1
 800c486:	3314      	adds	r3, #20
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d923      	bls.n	800c4d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c48e:	7dfa      	ldrb	r2, [r7, #23]
 800c490:	4926      	ldr	r1, [pc, #152]	; (800c52c <etharp_output+0x200>)
 800c492:	4613      	mov	r3, r2
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	4413      	add	r3, r2
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	440b      	add	r3, r1
 800c49c:	3308      	adds	r3, #8
 800c49e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d117      	bne.n	800c4d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	6819      	ldr	r1, [r3, #0]
 800c4aa:	7dfa      	ldrb	r2, [r7, #23]
 800c4ac:	481f      	ldr	r0, [pc, #124]	; (800c52c <etharp_output+0x200>)
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	4413      	add	r3, r2
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	4403      	add	r3, r0
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c4bc:	4299      	cmp	r1, r3
 800c4be:	d10a      	bne.n	800c4d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c4c0:	4a19      	ldr	r2, [pc, #100]	; (800c528 <etharp_output+0x1fc>)
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c4c6:	7dfb      	ldrb	r3, [r7, #23]
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff fe93 	bl	800c1f8 <etharp_output_to_arp_index>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	e018      	b.n	800c508 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	75fb      	strb	r3, [r7, #23]
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d9ca      	bls.n	800c478 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	69b9      	ldr	r1, [r7, #24]
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 f822 	bl	800c530 <etharp_query>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	e00b      	b.n	800c508 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c4f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fd6b 	bl	800dfdc <ethernet_output>
 800c506:	4603      	mov	r3, r0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3720      	adds	r7, #32
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	080114d4 	.word	0x080114d4
 800c514:	08011624 	.word	0x08011624
 800c518:	0801154c 	.word	0x0801154c
 800c51c:	08011674 	.word	0x08011674
 800c520:	08011614 	.word	0x08011614
 800c524:	08011c88 	.word	0x08011c88
 800c528:	24003288 	.word	0x24003288
 800c52c:	24003198 	.word	0x24003198

0800c530 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08c      	sub	sp, #48	; 0x30
 800c534:	af02      	add	r7, sp, #8
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3326      	adds	r3, #38	; 0x26
 800c540:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c542:	23ff      	movs	r3, #255	; 0xff
 800c544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68f9      	ldr	r1, [r7, #12]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fe34 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10c      	bne.n	800c578 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c566:	2be0      	cmp	r3, #224	; 0xe0
 800c568:	d006      	beq.n	800c578 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d003      	beq.n	800c578 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d102      	bne.n	800c57e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c578:	f06f 030f 	mvn.w	r3, #15
 800c57c:	e101      	b.n	800c782 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	2101      	movs	r1, #1
 800c582:	68b8      	ldr	r0, [r7, #8]
 800c584:	f7ff fb60 	bl	800bc48 <etharp_find_entry>
 800c588:	4603      	mov	r3, r0
 800c58a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c58c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c590:	2b00      	cmp	r3, #0
 800c592:	da02      	bge.n	800c59a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c594:	8a7b      	ldrh	r3, [r7, #18]
 800c596:	b25b      	sxtb	r3, r3
 800c598:	e0f3      	b.n	800c782 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c59a:	8a7b      	ldrh	r3, [r7, #18]
 800c59c:	2b7e      	cmp	r3, #126	; 0x7e
 800c59e:	d906      	bls.n	800c5ae <etharp_query+0x7e>
 800c5a0:	4b7a      	ldr	r3, [pc, #488]	; (800c78c <etharp_query+0x25c>)
 800c5a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c5a6:	497a      	ldr	r1, [pc, #488]	; (800c790 <etharp_query+0x260>)
 800c5a8:	487a      	ldr	r0, [pc, #488]	; (800c794 <etharp_query+0x264>)
 800c5aa:	f001 fda9 	bl	800e100 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c5ae:	8a7b      	ldrh	r3, [r7, #18]
 800c5b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c5b2:	7c7a      	ldrb	r2, [r7, #17]
 800c5b4:	4978      	ldr	r1, [pc, #480]	; (800c798 <etharp_query+0x268>)
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4413      	add	r3, r2
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	440b      	add	r3, r1
 800c5c0:	3314      	adds	r3, #20
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d115      	bne.n	800c5f4 <etharp_query+0xc4>
    is_new_entry = 1;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c5cc:	7c7a      	ldrb	r2, [r7, #17]
 800c5ce:	4972      	ldr	r1, [pc, #456]	; (800c798 <etharp_query+0x268>)
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	4413      	add	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	440b      	add	r3, r1
 800c5da:	3314      	adds	r3, #20
 800c5dc:	2201      	movs	r2, #1
 800c5de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c5e0:	7c7a      	ldrb	r2, [r7, #17]
 800c5e2:	496d      	ldr	r1, [pc, #436]	; (800c798 <etharp_query+0x268>)
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	4413      	add	r3, r2
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	440b      	add	r3, r1
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c5f4:	7c7a      	ldrb	r2, [r7, #17]
 800c5f6:	4968      	ldr	r1, [pc, #416]	; (800c798 <etharp_query+0x268>)
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	440b      	add	r3, r1
 800c602:	3314      	adds	r3, #20
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d011      	beq.n	800c62e <etharp_query+0xfe>
 800c60a:	7c7a      	ldrb	r2, [r7, #17]
 800c60c:	4962      	ldr	r1, [pc, #392]	; (800c798 <etharp_query+0x268>)
 800c60e:	4613      	mov	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	440b      	add	r3, r1
 800c618:	3314      	adds	r3, #20
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d806      	bhi.n	800c62e <etharp_query+0xfe>
 800c620:	4b5a      	ldr	r3, [pc, #360]	; (800c78c <etharp_query+0x25c>)
 800c622:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c626:	495d      	ldr	r1, [pc, #372]	; (800c79c <etharp_query+0x26c>)
 800c628:	485a      	ldr	r0, [pc, #360]	; (800c794 <etharp_query+0x264>)
 800c62a:	f001 fd69 	bl	800e100 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d102      	bne.n	800c63a <etharp_query+0x10a>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10c      	bne.n	800c654 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 f963 	bl	800c908 <etharp_request>
 800c642:	4603      	mov	r3, r0
 800c644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d102      	bne.n	800c654 <etharp_query+0x124>
      return result;
 800c64e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c652:	e096      	b.n	800c782 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <etharp_query+0x138>
 800c65a:	4b4c      	ldr	r3, [pc, #304]	; (800c78c <etharp_query+0x25c>)
 800c65c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c660:	494f      	ldr	r1, [pc, #316]	; (800c7a0 <etharp_query+0x270>)
 800c662:	484c      	ldr	r0, [pc, #304]	; (800c794 <etharp_query+0x264>)
 800c664:	f001 fd4c 	bl	800e100 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c668:	7c7a      	ldrb	r2, [r7, #17]
 800c66a:	494b      	ldr	r1, [pc, #300]	; (800c798 <etharp_query+0x268>)
 800c66c:	4613      	mov	r3, r2
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	4413      	add	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	440b      	add	r3, r1
 800c676:	3314      	adds	r3, #20
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d917      	bls.n	800c6ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c67e:	4a49      	ldr	r2, [pc, #292]	; (800c7a4 <etharp_query+0x274>)
 800c680:	7c7b      	ldrb	r3, [r7, #17]
 800c682:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c684:	7c7a      	ldrb	r2, [r7, #17]
 800c686:	4613      	mov	r3, r2
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	4413      	add	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	3308      	adds	r3, #8
 800c690:	4a41      	ldr	r2, [pc, #260]	; (800c798 <etharp_query+0x268>)
 800c692:	4413      	add	r3, r2
 800c694:	3304      	adds	r3, #4
 800c696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c69a:	9200      	str	r2, [sp, #0]
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	6879      	ldr	r1, [r7, #4]
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f001 fc9b 	bl	800dfdc <ethernet_output>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6ac:	e067      	b.n	800c77e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c6ae:	7c7a      	ldrb	r2, [r7, #17]
 800c6b0:	4939      	ldr	r1, [pc, #228]	; (800c798 <etharp_query+0x268>)
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	005b      	lsls	r3, r3, #1
 800c6b6:	4413      	add	r3, r2
 800c6b8:	00db      	lsls	r3, r3, #3
 800c6ba:	440b      	add	r3, r1
 800c6bc:	3314      	adds	r3, #20
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d15c      	bne.n	800c77e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c6cc:	e01c      	b.n	800c708 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	895a      	ldrh	r2, [r3, #10]
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	891b      	ldrh	r3, [r3, #8]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d10a      	bne.n	800c6f0 <etharp_query+0x1c0>
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d006      	beq.n	800c6f0 <etharp_query+0x1c0>
 800c6e2:	4b2a      	ldr	r3, [pc, #168]	; (800c78c <etharp_query+0x25c>)
 800c6e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c6e8:	492f      	ldr	r1, [pc, #188]	; (800c7a8 <etharp_query+0x278>)
 800c6ea:	482a      	ldr	r0, [pc, #168]	; (800c794 <etharp_query+0x264>)
 800c6ec:	f001 fd08 	bl	800e100 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	7b1b      	ldrb	r3, [r3, #12]
 800c6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <etharp_query+0x1d2>
        copy_needed = 1;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	61bb      	str	r3, [r7, #24]
        break;
 800c700:	e005      	b.n	800c70e <etharp_query+0x1de>
      }
      p = p->next;
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1df      	bne.n	800c6ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d007      	beq.n	800c724 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c71a:	200e      	movs	r0, #14
 800c71c:	f7f9 fd28 	bl	8006170 <pbuf_clone>
 800c720:	61f8      	str	r0, [r7, #28]
 800c722:	e004      	b.n	800c72e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c728:	69f8      	ldr	r0, [r7, #28]
 800c72a:	f7f9 fb65 	bl	8005df8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d021      	beq.n	800c778 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c734:	7c7a      	ldrb	r2, [r7, #17]
 800c736:	4918      	ldr	r1, [pc, #96]	; (800c798 <etharp_query+0x268>)
 800c738:	4613      	mov	r3, r2
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	4413      	add	r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	440b      	add	r3, r1
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00a      	beq.n	800c75e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c748:	7c7a      	ldrb	r2, [r7, #17]
 800c74a:	4913      	ldr	r1, [pc, #76]	; (800c798 <etharp_query+0x268>)
 800c74c:	4613      	mov	r3, r2
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	4413      	add	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	440b      	add	r3, r1
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4618      	mov	r0, r3
 800c75a:	f7f9 faad 	bl	8005cb8 <pbuf_free>
      }
      arp_table[i].q = p;
 800c75e:	7c7a      	ldrb	r2, [r7, #17]
 800c760:	490d      	ldr	r1, [pc, #52]	; (800c798 <etharp_query+0x268>)
 800c762:	4613      	mov	r3, r2
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	4413      	add	r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	440b      	add	r3, r1
 800c76c:	69fa      	ldr	r2, [r7, #28]
 800c76e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c776:	e002      	b.n	800c77e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c778:	23ff      	movs	r3, #255	; 0xff
 800c77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c77e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c782:	4618      	mov	r0, r3
 800c784:	3728      	adds	r7, #40	; 0x28
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	080114d4 	.word	0x080114d4
 800c790:	08011680 	.word	0x08011680
 800c794:	0801154c 	.word	0x0801154c
 800c798:	24003198 	.word	0x24003198
 800c79c:	08011690 	.word	0x08011690
 800c7a0:	08011674 	.word	0x08011674
 800c7a4:	24003288 	.word	0x24003288
 800c7a8:	080116b8 	.word	0x080116b8

0800c7ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	; 0x28
 800c7b0:	af02      	add	r7, sp, #8
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d106      	bne.n	800c7d2 <etharp_raw+0x26>
 800c7c4:	4b3a      	ldr	r3, [pc, #232]	; (800c8b0 <etharp_raw+0x104>)
 800c7c6:	f240 4257 	movw	r2, #1111	; 0x457
 800c7ca:	493a      	ldr	r1, [pc, #232]	; (800c8b4 <etharp_raw+0x108>)
 800c7cc:	483a      	ldr	r0, [pc, #232]	; (800c8b8 <etharp_raw+0x10c>)
 800c7ce:	f001 fc97 	bl	800e100 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c7d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c7d6:	211c      	movs	r1, #28
 800c7d8:	200e      	movs	r0, #14
 800c7da:	f7f8 ff89 	bl	80056f0 <pbuf_alloc>
 800c7de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d102      	bne.n	800c7ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ea:	e05d      	b.n	800c8a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	895b      	ldrh	r3, [r3, #10]
 800c7f0:	2b1b      	cmp	r3, #27
 800c7f2:	d806      	bhi.n	800c802 <etharp_raw+0x56>
 800c7f4:	4b2e      	ldr	r3, [pc, #184]	; (800c8b0 <etharp_raw+0x104>)
 800c7f6:	f240 4262 	movw	r2, #1122	; 0x462
 800c7fa:	4930      	ldr	r1, [pc, #192]	; (800c8bc <etharp_raw+0x110>)
 800c7fc:	482e      	ldr	r0, [pc, #184]	; (800c8b8 <etharp_raw+0x10c>)
 800c7fe:	f001 fc7f 	bl	800e100 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c808:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7f7 fe3e 	bl	800448c <lwip_htons>
 800c810:	4603      	mov	r3, r0
 800c812:	461a      	mov	r2, r3
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c81e:	2b06      	cmp	r3, #6
 800c820:	d006      	beq.n	800c830 <etharp_raw+0x84>
 800c822:	4b23      	ldr	r3, [pc, #140]	; (800c8b0 <etharp_raw+0x104>)
 800c824:	f240 4269 	movw	r2, #1129	; 0x469
 800c828:	4925      	ldr	r1, [pc, #148]	; (800c8c0 <etharp_raw+0x114>)
 800c82a:	4823      	ldr	r0, [pc, #140]	; (800c8b8 <etharp_raw+0x10c>)
 800c82c:	f001 fc68 	bl	800e100 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	3308      	adds	r3, #8
 800c834:	2206      	movs	r2, #6
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	4618      	mov	r0, r3
 800c83a:	f001 fc4b 	bl	800e0d4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	3312      	adds	r3, #18
 800c842:	2206      	movs	r2, #6
 800c844:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c846:	4618      	mov	r0, r3
 800c848:	f001 fc44 	bl	800e0d4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	330e      	adds	r3, #14
 800c850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c852:	6812      	ldr	r2, [r2, #0]
 800c854:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	3318      	adds	r3, #24
 800c85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85c:	6812      	ldr	r2, [r2, #0]
 800c85e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	701a      	strb	r2, [r3, #0]
 800c866:	2200      	movs	r2, #0
 800c868:	f042 0201 	orr.w	r2, r2, #1
 800c86c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2200      	movs	r2, #0
 800c872:	f042 0208 	orr.w	r2, r2, #8
 800c876:	709a      	strb	r2, [r3, #2]
 800c878:	2200      	movs	r2, #0
 800c87a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	2206      	movs	r2, #6
 800c880:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2204      	movs	r2, #4
 800c886:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c888:	f640 0306 	movw	r3, #2054	; 0x806
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	69b9      	ldr	r1, [r7, #24]
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f001 fba1 	bl	800dfdc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c89a:	69b8      	ldr	r0, [r7, #24]
 800c89c:	f7f9 fa0c 	bl	8005cb8 <pbuf_free>
  p = NULL;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c8a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3720      	adds	r7, #32
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	080114d4 	.word	0x080114d4
 800c8b4:	08011624 	.word	0x08011624
 800c8b8:	0801154c 	.word	0x0801154c
 800c8bc:	080116d4 	.word	0x080116d4
 800c8c0:	08011708 	.word	0x08011708

0800c8c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af04      	add	r7, sp, #16
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	9203      	str	r2, [sp, #12]
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	9202      	str	r2, [sp, #8]
 800c8e8:	4a06      	ldr	r2, [pc, #24]	; (800c904 <etharp_request_dst+0x40>)
 800c8ea:	9201      	str	r2, [sp, #4]
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f7ff ff5a 	bl	800c7ac <etharp_raw>
 800c8f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	08011c90 	.word	0x08011c90

0800c908 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c912:	4a05      	ldr	r2, [pc, #20]	; (800c928 <etharp_request+0x20>)
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff ffd4 	bl	800c8c4 <etharp_request_dst>
 800c91c:	4603      	mov	r3, r0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	08011c88 	.word	0x08011c88

0800c92c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08e      	sub	sp, #56	; 0x38
 800c930:	af04      	add	r7, sp, #16
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c936:	4b87      	ldr	r3, [pc, #540]	; (800cb54 <icmp_input+0x228>)
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	f003 030f 	and.w	r3, r3, #15
 800c944:	b2db      	uxtb	r3, r3
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c94c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c94e:	2b13      	cmp	r3, #19
 800c950:	f240 80e8 	bls.w	800cb24 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	895b      	ldrh	r3, [r3, #10]
 800c958:	2b03      	cmp	r3, #3
 800c95a:	f240 80e5 	bls.w	800cb28 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c968:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f000 80d2 	beq.w	800cb16 <icmp_input+0x1ea>
 800c972:	2b08      	cmp	r3, #8
 800c974:	f040 80d2 	bne.w	800cb1c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c978:	4b77      	ldr	r3, [pc, #476]	; (800cb58 <icmp_input+0x22c>)
 800c97a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c97c:	4b75      	ldr	r3, [pc, #468]	; (800cb54 <icmp_input+0x228>)
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c984:	2be0      	cmp	r3, #224	; 0xe0
 800c986:	f000 80d6 	beq.w	800cb36 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c98a:	4b72      	ldr	r3, [pc, #456]	; (800cb54 <icmp_input+0x228>)
 800c98c:	695b      	ldr	r3, [r3, #20]
 800c98e:	4a71      	ldr	r2, [pc, #452]	; (800cb54 <icmp_input+0x228>)
 800c990:	6812      	ldr	r2, [r2, #0]
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f000 fc13 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f040 80cc 	bne.w	800cb3a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	891b      	ldrh	r3, [r3, #8]
 800c9a6:	2b07      	cmp	r3, #7
 800c9a8:	f240 80c0 	bls.w	800cb2c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7f7 fe0a 	bl	80045c6 <inet_chksum_pbuf>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d003      	beq.n	800c9c0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7f9 f97d 	bl	8005cb8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800c9be:	e0c5      	b.n	800cb4c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c9c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9c2:	330e      	adds	r3, #14
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7f9 f8e0 	bl	8005b8c <pbuf_add_header>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d04b      	beq.n	800ca6a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	891a      	ldrh	r2, [r3, #8]
 800c9d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9d8:	4413      	add	r3, r2
 800c9da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	891b      	ldrh	r3, [r3, #8]
 800c9e0:	8b7a      	ldrh	r2, [r7, #26]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	f0c0 80ab 	bcc.w	800cb3e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c9e8:	8b7b      	ldrh	r3, [r7, #26]
 800c9ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	200e      	movs	r0, #14
 800c9f2:	f7f8 fe7d 	bl	80056f0 <pbuf_alloc>
 800c9f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 80a1 	beq.w	800cb42 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	895b      	ldrh	r3, [r3, #10]
 800ca04:	461a      	mov	r2, r3
 800ca06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca08:	3308      	adds	r3, #8
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d203      	bcs.n	800ca16 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ca0e:	6978      	ldr	r0, [r7, #20]
 800ca10:	f7f9 f952 	bl	8005cb8 <pbuf_free>
          goto icmperr;
 800ca14:	e096      	b.n	800cb44 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ca1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f001 fb58 	bl	800e0d4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ca24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca26:	4619      	mov	r1, r3
 800ca28:	6978      	ldr	r0, [r7, #20]
 800ca2a:	f7f9 f8bf 	bl	8005bac <pbuf_remove_header>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d009      	beq.n	800ca48 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ca34:	4b49      	ldr	r3, [pc, #292]	; (800cb5c <icmp_input+0x230>)
 800ca36:	22b6      	movs	r2, #182	; 0xb6
 800ca38:	4949      	ldr	r1, [pc, #292]	; (800cb60 <icmp_input+0x234>)
 800ca3a:	484a      	ldr	r0, [pc, #296]	; (800cb64 <icmp_input+0x238>)
 800ca3c:	f001 fb60 	bl	800e100 <iprintf>
          pbuf_free(r);
 800ca40:	6978      	ldr	r0, [r7, #20]
 800ca42:	f7f9 f939 	bl	8005cb8 <pbuf_free>
          goto icmperr;
 800ca46:	e07d      	b.n	800cb44 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	6978      	ldr	r0, [r7, #20]
 800ca4c:	f7f9 fa4c 	bl	8005ee8 <pbuf_copy>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d003      	beq.n	800ca5e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ca56:	6978      	ldr	r0, [r7, #20]
 800ca58:	f7f9 f92e 	bl	8005cb8 <pbuf_free>
          goto icmperr;
 800ca5c:	e072      	b.n	800cb44 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7f9 f92a 	bl	8005cb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	607b      	str	r3, [r7, #4]
 800ca68:	e00f      	b.n	800ca8a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ca6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca6c:	330e      	adds	r3, #14
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7f9 f89b 	bl	8005bac <pbuf_remove_header>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d006      	beq.n	800ca8a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ca7c:	4b37      	ldr	r3, [pc, #220]	; (800cb5c <icmp_input+0x230>)
 800ca7e:	22c7      	movs	r2, #199	; 0xc7
 800ca80:	4939      	ldr	r1, [pc, #228]	; (800cb68 <icmp_input+0x23c>)
 800ca82:	4838      	ldr	r0, [pc, #224]	; (800cb64 <icmp_input+0x238>)
 800ca84:	f001 fb3c 	bl	800e100 <iprintf>
          goto icmperr;
 800ca88:	e05c      	b.n	800cb44 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ca90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7f9 f879 	bl	8005b8c <pbuf_add_header>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d13c      	bne.n	800cb1a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800caae:	4b29      	ldr	r3, [pc, #164]	; (800cb54 <icmp_input+0x228>)
 800cab0:	691a      	ldr	r2, [r3, #16]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	885b      	ldrh	r3, [r3, #2]
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d907      	bls.n	800cada <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	885b      	ldrh	r3, [r3, #2]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	3309      	adds	r3, #9
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	805a      	strh	r2, [r3, #2]
 800cad8:	e006      	b.n	800cae8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	885b      	ldrh	r3, [r3, #2]
 800cade:	b29b      	uxth	r3, r3
 800cae0:	3308      	adds	r3, #8
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	22ff      	movs	r2, #255	; 0xff
 800caec:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	729a      	strb	r2, [r3, #10]
 800caf4:	2200      	movs	r2, #0
 800caf6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	2301      	movs	r3, #1
 800cafe:	9301      	str	r3, [sp, #4]
 800cb00:	2300      	movs	r3, #0
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	23ff      	movs	r3, #255	; 0xff
 800cb06:	2200      	movs	r2, #0
 800cb08:	69f9      	ldr	r1, [r7, #28]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fa80 	bl	800d010 <ip4_output_if>
 800cb10:	4603      	mov	r3, r0
 800cb12:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cb14:	e001      	b.n	800cb1a <icmp_input+0x1ee>
      break;
 800cb16:	bf00      	nop
 800cb18:	e000      	b.n	800cb1c <icmp_input+0x1f0>
      break;
 800cb1a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7f9 f8cb 	bl	8005cb8 <pbuf_free>
  return;
 800cb22:	e013      	b.n	800cb4c <icmp_input+0x220>
    goto lenerr;
 800cb24:	bf00      	nop
 800cb26:	e002      	b.n	800cb2e <icmp_input+0x202>
    goto lenerr;
 800cb28:	bf00      	nop
 800cb2a:	e000      	b.n	800cb2e <icmp_input+0x202>
        goto lenerr;
 800cb2c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7f9 f8c2 	bl	8005cb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cb34:	e00a      	b.n	800cb4c <icmp_input+0x220>
        goto icmperr;
 800cb36:	bf00      	nop
 800cb38:	e004      	b.n	800cb44 <icmp_input+0x218>
        goto icmperr;
 800cb3a:	bf00      	nop
 800cb3c:	e002      	b.n	800cb44 <icmp_input+0x218>
          goto icmperr;
 800cb3e:	bf00      	nop
 800cb40:	e000      	b.n	800cb44 <icmp_input+0x218>
          goto icmperr;
 800cb42:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7f9 f8b7 	bl	8005cb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cb4a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cb4c:	3728      	adds	r7, #40	; 0x28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	2400021c 	.word	0x2400021c
 800cb58:	24000230 	.word	0x24000230
 800cb5c:	0801174c 	.word	0x0801174c
 800cb60:	08011784 	.word	0x08011784
 800cb64:	080117bc 	.word	0x080117bc
 800cb68:	080117e4 	.word	0x080117e4

0800cb6c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cb78:	78fb      	ldrb	r3, [r7, #3]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2103      	movs	r1, #3
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f814 	bl	800cbac <icmp_send_response>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cb98:	78fb      	ldrb	r3, [r7, #3]
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	210b      	movs	r1, #11
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f804 	bl	800cbac <icmp_send_response>
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	; 0x30
 800cbb0:	af04      	add	r7, sp, #16
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	70fb      	strb	r3, [r7, #3]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cbbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cbc0:	2124      	movs	r1, #36	; 0x24
 800cbc2:	2022      	movs	r0, #34	; 0x22
 800cbc4:	f7f8 fd94 	bl	80056f0 <pbuf_alloc>
 800cbc8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d056      	beq.n	800cc7e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	895b      	ldrh	r3, [r3, #10]
 800cbd4:	2b23      	cmp	r3, #35	; 0x23
 800cbd6:	d806      	bhi.n	800cbe6 <icmp_send_response+0x3a>
 800cbd8:	4b2b      	ldr	r3, [pc, #172]	; (800cc88 <icmp_send_response+0xdc>)
 800cbda:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cbde:	492b      	ldr	r1, [pc, #172]	; (800cc8c <icmp_send_response+0xe0>)
 800cbe0:	482b      	ldr	r0, [pc, #172]	; (800cc90 <icmp_send_response+0xe4>)
 800cbe2:	f001 fa8d 	bl	800e100 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	78fa      	ldrb	r2, [r7, #3]
 800cbf6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	78ba      	ldrb	r2, [r7, #2]
 800cbfc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	2200      	movs	r2, #0
 800cc02:	711a      	strb	r2, [r3, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	719a      	strb	r2, [r3, #6]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	f103 0008 	add.w	r0, r3, #8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	221c      	movs	r2, #28
 800cc20:	4619      	mov	r1, r3
 800cc22:	f001 fa57 	bl	800e0d4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 f82f 	bl	800cc94 <ip4_route>
 800cc36:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d01b      	beq.n	800cc76 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2200      	movs	r2, #0
 800cc42:	709a      	strb	r2, [r3, #2]
 800cc44:	2200      	movs	r2, #0
 800cc46:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	895b      	ldrh	r3, [r3, #10]
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6978      	ldr	r0, [r7, #20]
 800cc50:	f7f7 fca7 	bl	80045a2 <inet_chksum>
 800cc54:	4603      	mov	r3, r0
 800cc56:	461a      	mov	r2, r3
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cc5c:	f107 020c 	add.w	r2, r7, #12
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	9302      	str	r3, [sp, #8]
 800cc64:	2301      	movs	r3, #1
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	23ff      	movs	r3, #255	; 0xff
 800cc6e:	2100      	movs	r1, #0
 800cc70:	69f8      	ldr	r0, [r7, #28]
 800cc72:	f000 f9cd 	bl	800d010 <ip4_output_if>
  }
  pbuf_free(q);
 800cc76:	69f8      	ldr	r0, [r7, #28]
 800cc78:	f7f9 f81e 	bl	8005cb8 <pbuf_free>
 800cc7c:	e000      	b.n	800cc80 <icmp_send_response+0xd4>
    return;
 800cc7e:	bf00      	nop
}
 800cc80:	3720      	adds	r7, #32
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	0801174c 	.word	0x0801174c
 800cc8c:	08011818 	.word	0x08011818
 800cc90:	080117bc 	.word	0x080117bc

0800cc94 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cc9c:	4b33      	ldr	r3, [pc, #204]	; (800cd6c <ip4_route+0xd8>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	e036      	b.n	800cd12 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d02b      	beq.n	800cd0c <ip4_route+0x78>
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccba:	089b      	lsrs	r3, r3, #2
 800ccbc:	f003 0301 	and.w	r3, r3, #1
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d022      	beq.n	800cd0c <ip4_route+0x78>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3304      	adds	r3, #4
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01d      	beq.n	800cd0c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	405a      	eors	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3308      	adds	r3, #8
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4013      	ands	r3, r2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	e038      	b.n	800cd5e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccf2:	f003 0302 	and.w	r3, r3, #2
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d108      	bne.n	800cd0c <ip4_route+0x78>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	330c      	adds	r3, #12
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d101      	bne.n	800cd0c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	e028      	b.n	800cd5e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1c5      	bne.n	800cca4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cd18:	4b15      	ldr	r3, [pc, #84]	; (800cd70 <ip4_route+0xdc>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d01a      	beq.n	800cd56 <ip4_route+0xc2>
 800cd20:	4b13      	ldr	r3, [pc, #76]	; (800cd70 <ip4_route+0xdc>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d012      	beq.n	800cd56 <ip4_route+0xc2>
 800cd30:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <ip4_route+0xdc>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00a      	beq.n	800cd56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cd40:	4b0b      	ldr	r3, [pc, #44]	; (800cd70 <ip4_route+0xdc>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3304      	adds	r3, #4
 800cd46:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d004      	beq.n	800cd56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	2b7f      	cmp	r3, #127	; 0x7f
 800cd54:	d101      	bne.n	800cd5a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	e001      	b.n	800cd5e <ip4_route+0xca>
  }

  return netif_default;
 800cd5a:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <ip4_route+0xdc>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	2400312c 	.word	0x2400312c
 800cd70:	24003130 	.word	0x24003130

0800cd74 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d016      	beq.n	800cdba <ip4_input_accept+0x46>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3304      	adds	r3, #4
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d011      	beq.n	800cdba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cd96:	4b0b      	ldr	r3, [pc, #44]	; (800cdc4 <ip4_input_accept+0x50>)
 800cd98:	695a      	ldr	r2, [r3, #20]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	3304      	adds	r3, #4
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d008      	beq.n	800cdb6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cda4:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <ip4_input_accept+0x50>)
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 fa08 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800cdb0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3708      	adds	r7, #8
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	2400021c 	.word	0x2400021c

0800cdc8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	091b      	lsrs	r3, r3, #4
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b04      	cmp	r3, #4
 800cde2:	d004      	beq.n	800cdee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7f8 ff67 	bl	8005cb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	e107      	b.n	800cffe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	885b      	ldrh	r3, [r3, #2]
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f7 fb41 	bl	800448c <lwip_htons>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	891b      	ldrh	r3, [r3, #8]
 800ce12:	89ba      	ldrh	r2, [r7, #12]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d204      	bcs.n	800ce22 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ce18:	89bb      	ldrh	r3, [r7, #12]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7f8 fdc5 	bl	80059ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	895b      	ldrh	r3, [r3, #10]
 800ce26:	89fa      	ldrh	r2, [r7, #14]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d807      	bhi.n	800ce3c <ip4_input+0x74>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	891b      	ldrh	r3, [r3, #8]
 800ce30:	89ba      	ldrh	r2, [r7, #12]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d802      	bhi.n	800ce3c <ip4_input+0x74>
 800ce36:	89fb      	ldrh	r3, [r7, #14]
 800ce38:	2b13      	cmp	r3, #19
 800ce3a:	d804      	bhi.n	800ce46 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7f8 ff3b 	bl	8005cb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e0db      	b.n	800cffe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	4a6f      	ldr	r2, [pc, #444]	; (800d008 <ip4_input+0x240>)
 800ce4c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	4a6d      	ldr	r2, [pc, #436]	; (800d008 <ip4_input+0x240>)
 800ce54:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ce56:	4b6c      	ldr	r3, [pc, #432]	; (800d008 <ip4_input+0x240>)
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce5e:	2be0      	cmp	r3, #224	; 0xe0
 800ce60:	d112      	bne.n	800ce88 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d007      	beq.n	800ce82 <ip4_input+0xba>
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	3304      	adds	r3, #4
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <ip4_input+0xba>
      netif = inp;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	613b      	str	r3, [r7, #16]
 800ce80:	e02a      	b.n	800ced8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	613b      	str	r3, [r7, #16]
 800ce86:	e027      	b.n	800ced8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ce88:	6838      	ldr	r0, [r7, #0]
 800ce8a:	f7ff ff73 	bl	800cd74 <ip4_input_accept>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <ip4_input+0xd2>
      netif = inp;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	613b      	str	r3, [r7, #16]
 800ce98:	e01e      	b.n	800ced8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ce9e:	4b5a      	ldr	r3, [pc, #360]	; (800d008 <ip4_input+0x240>)
 800cea0:	695b      	ldr	r3, [r3, #20]
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	2b7f      	cmp	r3, #127	; 0x7f
 800cea6:	d017      	beq.n	800ced8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cea8:	4b58      	ldr	r3, [pc, #352]	; (800d00c <ip4_input+0x244>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	613b      	str	r3, [r7, #16]
 800ceae:	e00e      	b.n	800cece <ip4_input+0x106>
          if (netif == inp) {
 800ceb0:	693a      	ldr	r2, [r7, #16]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d006      	beq.n	800cec6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ceb8:	6938      	ldr	r0, [r7, #16]
 800ceba:	f7ff ff5b 	bl	800cd74 <ip4_input_accept>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d108      	bne.n	800ced6 <ip4_input+0x10e>
 800cec4:	e000      	b.n	800cec8 <ip4_input+0x100>
            continue;
 800cec6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	613b      	str	r3, [r7, #16]
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1ed      	bne.n	800ceb0 <ip4_input+0xe8>
 800ced4:	e000      	b.n	800ced8 <ip4_input+0x110>
            break;
 800ced6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ced8:	4b4b      	ldr	r3, [pc, #300]	; (800d008 <ip4_input+0x240>)
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 f96e 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d105      	bne.n	800cef6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ceea:	4b47      	ldr	r3, [pc, #284]	; (800d008 <ip4_input+0x240>)
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cef2:	2be0      	cmp	r3, #224	; 0xe0
 800cef4:	d104      	bne.n	800cf00 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7f8 fede 	bl	8005cb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	e07e      	b.n	800cffe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d104      	bne.n	800cf10 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7f8 fed6 	bl	8005cb8 <pbuf_free>
    return ERR_OK;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	e076      	b.n	800cffe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	88db      	ldrh	r3, [r3, #6]
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	461a      	mov	r2, r3
 800cf18:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00b      	beq.n	800cf3a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fc92 	bl	800d84c <ip4_reass>
 800cf28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <ip4_input+0x16c>
      return ERR_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	e064      	b.n	800cffe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cf3a:	4a33      	ldr	r2, [pc, #204]	; (800d008 <ip4_input+0x240>)
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cf40:	4a31      	ldr	r2, [pc, #196]	; (800d008 <ip4_input+0x240>)
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cf46:	4a30      	ldr	r2, [pc, #192]	; (800d008 <ip4_input+0x240>)
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	f003 030f 	and.w	r3, r3, #15
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	4b2a      	ldr	r3, [pc, #168]	; (800d008 <ip4_input+0x240>)
 800cf5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800cf60:	89fb      	ldrh	r3, [r7, #14]
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7f8 fe21 	bl	8005bac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	7a5b      	ldrb	r3, [r3, #9]
 800cf6e:	2b11      	cmp	r3, #17
 800cf70:	d006      	beq.n	800cf80 <ip4_input+0x1b8>
 800cf72:	2b11      	cmp	r3, #17
 800cf74:	dc13      	bgt.n	800cf9e <ip4_input+0x1d6>
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d00c      	beq.n	800cf94 <ip4_input+0x1cc>
 800cf7a:	2b06      	cmp	r3, #6
 800cf7c:	d005      	beq.n	800cf8a <ip4_input+0x1c2>
 800cf7e:	e00e      	b.n	800cf9e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7fe fc42 	bl	800b80c <udp_input>
        break;
 800cf88:	e026      	b.n	800cfd8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7fa fcbb 	bl	8007908 <tcp_input>
        break;
 800cf92:	e021      	b.n	800cfd8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff fcc8 	bl	800c92c <icmp_input>
        break;
 800cf9c:	e01c      	b.n	800cfd8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cf9e:	4b1a      	ldr	r3, [pc, #104]	; (800d008 <ip4_input+0x240>)
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	6939      	ldr	r1, [r7, #16]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f000 f90b 	bl	800d1c0 <ip4_addr_isbroadcast_u32>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10f      	bne.n	800cfd0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cfb0:	4b15      	ldr	r3, [pc, #84]	; (800d008 <ip4_input+0x240>)
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cfb8:	2be0      	cmp	r3, #224	; 0xe0
 800cfba:	d009      	beq.n	800cfd0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cfbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7f8 fe65 	bl	8005c92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cfc8:	2102      	movs	r1, #2
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fdce 	bl	800cb6c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7f8 fe71 	bl	8005cb8 <pbuf_free>
        break;
 800cfd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cfd8:	4b0b      	ldr	r3, [pc, #44]	; (800d008 <ip4_input+0x240>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cfde:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <ip4_input+0x240>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cfe4:	4b08      	ldr	r3, [pc, #32]	; (800d008 <ip4_input+0x240>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cfea:	4b07      	ldr	r3, [pc, #28]	; (800d008 <ip4_input+0x240>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cff0:	4b05      	ldr	r3, [pc, #20]	; (800d008 <ip4_input+0x240>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cff6:	4b04      	ldr	r3, [pc, #16]	; (800d008 <ip4_input+0x240>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3718      	adds	r7, #24
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	2400021c 	.word	0x2400021c
 800d00c:	2400312c 	.word	0x2400312c

0800d010 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	; 0x28
 800d014:	af04      	add	r7, sp, #16
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d009      	beq.n	800d03c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d003      	beq.n	800d036 <ip4_output_if+0x26>
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d102      	bne.n	800d03c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	3304      	adds	r3, #4
 800d03a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d03c:	78fa      	ldrb	r2, [r7, #3]
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	9302      	str	r3, [sp, #8]
 800d042:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d046:	9301      	str	r3, [sp, #4]
 800d048:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	4613      	mov	r3, r2
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	6979      	ldr	r1, [r7, #20]
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f805 	bl	800d064 <ip4_output_if_src>
 800d05a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	7b9b      	ldrb	r3, [r3, #14]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d006      	beq.n	800d088 <ip4_output_if_src+0x24>
 800d07a:	4b4b      	ldr	r3, [pc, #300]	; (800d1a8 <ip4_output_if_src+0x144>)
 800d07c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d080:	494a      	ldr	r1, [pc, #296]	; (800d1ac <ip4_output_if_src+0x148>)
 800d082:	484b      	ldr	r0, [pc, #300]	; (800d1b0 <ip4_output_if_src+0x14c>)
 800d084:	f001 f83c 	bl	800e100 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d060      	beq.n	800d150 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d08e:	2314      	movs	r3, #20
 800d090:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d092:	2114      	movs	r1, #20
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f7f8 fd79 	bl	8005b8c <pbuf_add_header>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d0a0:	f06f 0301 	mvn.w	r3, #1
 800d0a4:	e07c      	b.n	800d1a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	895b      	ldrh	r3, [r3, #10]
 800d0b0:	2b13      	cmp	r3, #19
 800d0b2:	d806      	bhi.n	800d0c2 <ip4_output_if_src+0x5e>
 800d0b4:	4b3c      	ldr	r3, [pc, #240]	; (800d1a8 <ip4_output_if_src+0x144>)
 800d0b6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d0ba:	493e      	ldr	r1, [pc, #248]	; (800d1b4 <ip4_output_if_src+0x150>)
 800d0bc:	483c      	ldr	r0, [pc, #240]	; (800d1b0 <ip4_output_if_src+0x14c>)
 800d0be:	f001 f81f 	bl	800e100 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	78fa      	ldrb	r2, [r7, #3]
 800d0c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d0ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d0d8:	8b7b      	ldrh	r3, [r7, #26]
 800d0da:	089b      	lsrs	r3, r3, #2
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d0f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	891b      	ldrh	r3, [r3, #8]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f7 f9c8 	bl	800448c <lwip_htons>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2200      	movs	r2, #0
 800d108:	719a      	strb	r2, [r3, #6]
 800d10a:	2200      	movs	r2, #0
 800d10c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d10e:	4b2a      	ldr	r3, [pc, #168]	; (800d1b8 <ip4_output_if_src+0x154>)
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	4618      	mov	r0, r3
 800d114:	f7f7 f9ba 	bl	800448c <lwip_htons>
 800d118:	4603      	mov	r3, r0
 800d11a:	461a      	mov	r2, r3
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d120:	4b25      	ldr	r3, [pc, #148]	; (800d1b8 <ip4_output_if_src+0x154>)
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	3301      	adds	r3, #1
 800d126:	b29a      	uxth	r2, r3
 800d128:	4b23      	ldr	r3, [pc, #140]	; (800d1b8 <ip4_output_if_src+0x154>)
 800d12a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d104      	bne.n	800d13c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d132:	4b22      	ldr	r3, [pc, #136]	; (800d1bc <ip4_output_if_src+0x158>)
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	60da      	str	r2, [r3, #12]
 800d13a:	e003      	b.n	800d144 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	2200      	movs	r2, #0
 800d148:	729a      	strb	r2, [r3, #10]
 800d14a:	2200      	movs	r2, #0
 800d14c:	72da      	strb	r2, [r3, #11]
 800d14e:	e00f      	b.n	800d170 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	895b      	ldrh	r3, [r3, #10]
 800d154:	2b13      	cmp	r3, #19
 800d156:	d802      	bhi.n	800d15e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d158:	f06f 0301 	mvn.w	r3, #1
 800d15c:	e020      	b.n	800d1a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d16a:	f107 0314 	add.w	r3, r7, #20
 800d16e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d172:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00c      	beq.n	800d192 <ip4_output_if_src+0x12e>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	891a      	ldrh	r2, [r3, #8]
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d180:	429a      	cmp	r2, r3
 800d182:	d906      	bls.n	800d192 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 fd53 	bl	800dc34 <ip4_frag>
 800d18e:	4603      	mov	r3, r0
 800d190:	e006      	b.n	800d1a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d194:	695b      	ldr	r3, [r3, #20]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	68f9      	ldr	r1, [r7, #12]
 800d19a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d19c:	4798      	blx	r3
 800d19e:	4603      	mov	r3, r0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	08011844 	.word	0x08011844
 800d1ac:	08011878 	.word	0x08011878
 800d1b0:	08011884 	.word	0x08011884
 800d1b4:	080118ac 	.word	0x080118ac
 800d1b8:	2400328a 	.word	0x2400328a
 800d1bc:	08011c84 	.word	0x08011c84

0800d1c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d4:	d002      	beq.n	800d1dc <ip4_addr_isbroadcast_u32+0x1c>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e02a      	b.n	800d236 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1e6:	f003 0302 	and.w	r3, r3, #2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e021      	b.n	800d236 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d101      	bne.n	800d202 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	e019      	b.n	800d236 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	3304      	adds	r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	405a      	eors	r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	3308      	adds	r3, #8
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4013      	ands	r3, r2
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10d      	bne.n	800d234 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	3308      	adds	r3, #8
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	43da      	mvns	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	3308      	adds	r3, #8
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d101      	bne.n	800d234 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d230:	2301      	movs	r3, #1
 800d232:	e000      	b.n	800d236 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d234:	2300      	movs	r3, #0
  }
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
	...

0800d244 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d24e:	4b12      	ldr	r3, [pc, #72]	; (800d298 <ip_reass_tmr+0x54>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d254:	e018      	b.n	800d288 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	7fdb      	ldrb	r3, [r3, #31]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00b      	beq.n	800d276 <ip_reass_tmr+0x32>
      r->timer--;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	7fdb      	ldrb	r3, [r3, #31]
 800d262:	3b01      	subs	r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	e008      	b.n	800d288 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d280:	68b9      	ldr	r1, [r7, #8]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f80a 	bl	800d29c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e3      	bne.n	800d256 <ip_reass_tmr+0x12>
    }
  }
}
 800d28e:	bf00      	nop
 800d290:	bf00      	nop
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	2400328c 	.word	0x2400328c

0800d29c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b088      	sub	sp, #32
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d105      	bne.n	800d2be <ip_reass_free_complete_datagram+0x22>
 800d2b2:	4b45      	ldr	r3, [pc, #276]	; (800d3c8 <ip_reass_free_complete_datagram+0x12c>)
 800d2b4:	22ab      	movs	r2, #171	; 0xab
 800d2b6:	4945      	ldr	r1, [pc, #276]	; (800d3cc <ip_reass_free_complete_datagram+0x130>)
 800d2b8:	4845      	ldr	r0, [pc, #276]	; (800d3d0 <ip_reass_free_complete_datagram+0x134>)
 800d2ba:	f000 ff21 	bl	800e100 <iprintf>
  if (prev != NULL) {
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00a      	beq.n	800d2da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d005      	beq.n	800d2da <ip_reass_free_complete_datagram+0x3e>
 800d2ce:	4b3e      	ldr	r3, [pc, #248]	; (800d3c8 <ip_reass_free_complete_datagram+0x12c>)
 800d2d0:	22ad      	movs	r2, #173	; 0xad
 800d2d2:	4940      	ldr	r1, [pc, #256]	; (800d3d4 <ip_reass_free_complete_datagram+0x138>)
 800d2d4:	483e      	ldr	r0, [pc, #248]	; (800d3d0 <ip_reass_free_complete_datagram+0x134>)
 800d2d6:	f000 ff13 	bl	800e100 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	889b      	ldrh	r3, [r3, #4]
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d12a      	bne.n	800d342 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	6858      	ldr	r0, [r3, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	3308      	adds	r3, #8
 800d302:	2214      	movs	r2, #20
 800d304:	4619      	mov	r1, r3
 800d306:	f000 fee5 	bl	800e0d4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d30a:	2101      	movs	r1, #1
 800d30c:	69b8      	ldr	r0, [r7, #24]
 800d30e:	f7ff fc3d 	bl	800cb8c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d312:	69b8      	ldr	r0, [r7, #24]
 800d314:	f7f8 fd58 	bl	8005dc8 <pbuf_clen>
 800d318:	4603      	mov	r3, r0
 800d31a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d31c:	8bfa      	ldrh	r2, [r7, #30]
 800d31e:	8a7b      	ldrh	r3, [r7, #18]
 800d320:	4413      	add	r3, r2
 800d322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d326:	db05      	blt.n	800d334 <ip_reass_free_complete_datagram+0x98>
 800d328:	4b27      	ldr	r3, [pc, #156]	; (800d3c8 <ip_reass_free_complete_datagram+0x12c>)
 800d32a:	22bc      	movs	r2, #188	; 0xbc
 800d32c:	492a      	ldr	r1, [pc, #168]	; (800d3d8 <ip_reass_free_complete_datagram+0x13c>)
 800d32e:	4828      	ldr	r0, [pc, #160]	; (800d3d0 <ip_reass_free_complete_datagram+0x134>)
 800d330:	f000 fee6 	bl	800e100 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d334:	8bfa      	ldrh	r2, [r7, #30]
 800d336:	8a7b      	ldrh	r3, [r7, #18]
 800d338:	4413      	add	r3, r2
 800d33a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d33c:	69b8      	ldr	r0, [r7, #24]
 800d33e:	f7f8 fcbb 	bl	8005cb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d348:	e01f      	b.n	800d38a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f7f8 fd34 	bl	8005dc8 <pbuf_clen>
 800d360:	4603      	mov	r3, r0
 800d362:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d364:	8bfa      	ldrh	r2, [r7, #30]
 800d366:	8a7b      	ldrh	r3, [r7, #18]
 800d368:	4413      	add	r3, r2
 800d36a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d36e:	db05      	blt.n	800d37c <ip_reass_free_complete_datagram+0xe0>
 800d370:	4b15      	ldr	r3, [pc, #84]	; (800d3c8 <ip_reass_free_complete_datagram+0x12c>)
 800d372:	22cc      	movs	r2, #204	; 0xcc
 800d374:	4918      	ldr	r1, [pc, #96]	; (800d3d8 <ip_reass_free_complete_datagram+0x13c>)
 800d376:	4816      	ldr	r0, [pc, #88]	; (800d3d0 <ip_reass_free_complete_datagram+0x134>)
 800d378:	f000 fec2 	bl	800e100 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d37c:	8bfa      	ldrh	r2, [r7, #30]
 800d37e:	8a7b      	ldrh	r3, [r7, #18]
 800d380:	4413      	add	r3, r2
 800d382:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f7f8 fc97 	bl	8005cb8 <pbuf_free>
  while (p != NULL) {
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1dc      	bne.n	800d34a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f8c2 	bl	800d51c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d398:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <ip_reass_free_complete_datagram+0x140>)
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	8bfa      	ldrh	r2, [r7, #30]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d905      	bls.n	800d3ae <ip_reass_free_complete_datagram+0x112>
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <ip_reass_free_complete_datagram+0x12c>)
 800d3a4:	22d2      	movs	r2, #210	; 0xd2
 800d3a6:	490e      	ldr	r1, [pc, #56]	; (800d3e0 <ip_reass_free_complete_datagram+0x144>)
 800d3a8:	4809      	ldr	r0, [pc, #36]	; (800d3d0 <ip_reass_free_complete_datagram+0x134>)
 800d3aa:	f000 fea9 	bl	800e100 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d3ae:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <ip_reass_free_complete_datagram+0x140>)
 800d3b0:	881a      	ldrh	r2, [r3, #0]
 800d3b2:	8bfb      	ldrh	r3, [r7, #30]
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	4b08      	ldr	r3, [pc, #32]	; (800d3dc <ip_reass_free_complete_datagram+0x140>)
 800d3ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d3bc:	8bfb      	ldrh	r3, [r7, #30]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	080118dc 	.word	0x080118dc
 800d3cc:	08011918 	.word	0x08011918
 800d3d0:	08011924 	.word	0x08011924
 800d3d4:	0801194c 	.word	0x0801194c
 800d3d8:	08011960 	.word	0x08011960
 800d3dc:	24003290 	.word	0x24003290
 800d3e0:	08011980 	.word	0x08011980

0800d3e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08a      	sub	sp, #40	; 0x28
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d402:	4b28      	ldr	r3, [pc, #160]	; (800d4a4 <ip_reass_remove_oldest_datagram+0xc0>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d408:	e030      	b.n	800d46c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	695a      	ldr	r2, [r3, #20]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	429a      	cmp	r2, r3
 800d414:	d10c      	bne.n	800d430 <ip_reass_remove_oldest_datagram+0x4c>
 800d416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d106      	bne.n	800d430 <ip_reass_remove_oldest_datagram+0x4c>
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	899a      	ldrh	r2, [r3, #12]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	889b      	ldrh	r3, [r3, #4]
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d014      	beq.n	800d45a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	3301      	adds	r3, #1
 800d434:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d104      	bne.n	800d446 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	61bb      	str	r3, [r7, #24]
 800d444:	e009      	b.n	800d45a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	7fda      	ldrb	r2, [r3, #31]
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	7fdb      	ldrb	r3, [r3, #31]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d803      	bhi.n	800d45a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d001      	beq.n	800d466 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1cb      	bne.n	800d40a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d008      	beq.n	800d48a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d478:	69b9      	ldr	r1, [r7, #24]
 800d47a:	6a38      	ldr	r0, [r7, #32]
 800d47c:	f7ff ff0e 	bl	800d29c <ip_reass_free_complete_datagram>
 800d480:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	4413      	add	r3, r2
 800d488:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	429a      	cmp	r2, r3
 800d490:	da02      	bge.n	800d498 <ip_reass_remove_oldest_datagram+0xb4>
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	2b01      	cmp	r3, #1
 800d496:	dcac      	bgt.n	800d3f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d498:	697b      	ldr	r3, [r7, #20]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3728      	adds	r7, #40	; 0x28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2400328c 	.word	0x2400328c

0800d4a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d4b2:	2004      	movs	r0, #4
 800d4b4:	f7f7 fd1a 	bl	8004eec <memp_malloc>
 800d4b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d110      	bne.n	800d4e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff ff8e 	bl	800d3e4 <ip_reass_remove_oldest_datagram>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	dc03      	bgt.n	800d4d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d4d0:	2004      	movs	r0, #4
 800d4d2:	f7f7 fd0b 	bl	8004eec <memp_malloc>
 800d4d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d101      	bne.n	800d4e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e016      	b.n	800d510 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d4e2:	2220      	movs	r2, #32
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 fe02 	bl	800e0f0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	220f      	movs	r2, #15
 800d4f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d4f2:	4b09      	ldr	r3, [pc, #36]	; (800d518 <ip_reass_enqueue_new_datagram+0x70>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d4fa:	4a07      	ldr	r2, [pc, #28]	; (800d518 <ip_reass_enqueue_new_datagram+0x70>)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	3308      	adds	r3, #8
 800d504:	2214      	movs	r2, #20
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	4618      	mov	r0, r3
 800d50a:	f000 fde3 	bl	800e0d4 <memcpy>
  return ipr;
 800d50e:	68fb      	ldr	r3, [r7, #12]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	2400328c 	.word	0x2400328c

0800d51c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <ip_reass_dequeue_datagram+0x4c>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d104      	bne.n	800d53a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a0c      	ldr	r2, [pc, #48]	; (800d568 <ip_reass_dequeue_datagram+0x4c>)
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	e00d      	b.n	800d556 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d106      	bne.n	800d54e <ip_reass_dequeue_datagram+0x32>
 800d540:	4b0a      	ldr	r3, [pc, #40]	; (800d56c <ip_reass_dequeue_datagram+0x50>)
 800d542:	f240 1245 	movw	r2, #325	; 0x145
 800d546:	490a      	ldr	r1, [pc, #40]	; (800d570 <ip_reass_dequeue_datagram+0x54>)
 800d548:	480a      	ldr	r0, [pc, #40]	; (800d574 <ip_reass_dequeue_datagram+0x58>)
 800d54a:	f000 fdd9 	bl	800e100 <iprintf>
    prev->next = ipr->next;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	2004      	movs	r0, #4
 800d55a:	f7f7 fd37 	bl	8004fcc <memp_free>
}
 800d55e:	bf00      	nop
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	2400328c 	.word	0x2400328c
 800d56c:	080118dc 	.word	0x080118dc
 800d570:	080119a4 	.word	0x080119a4
 800d574:	08011924 	.word	0x08011924

0800d578 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08c      	sub	sp, #48	; 0x30
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d584:	2300      	movs	r3, #0
 800d586:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d588:	2301      	movs	r3, #1
 800d58a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	885b      	ldrh	r3, [r3, #2]
 800d596:	b29b      	uxth	r3, r3
 800d598:	4618      	mov	r0, r3
 800d59a:	f7f6 ff77 	bl	800448c <lwip_htons>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	f003 030f 	and.w	r3, r3, #15
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d5b0:	7e7b      	ldrb	r3, [r7, #25]
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	8b7a      	ldrh	r2, [r7, #26]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d202      	bcs.n	800d5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d5be:	e135      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d5c0:	7e7b      	ldrb	r3, [r7, #25]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	8b7a      	ldrh	r2, [r7, #26]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	88db      	ldrh	r3, [r3, #6]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f6 ff5b 	bl	800448c <lwip_htons>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	701a      	strb	r2, [r3, #0]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	705a      	strb	r2, [r3, #1]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	709a      	strb	r2, [r3, #2]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	8afa      	ldrh	r2, [r7, #22]
 800d5fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d600:	8afa      	ldrh	r2, [r7, #22]
 800d602:	8b7b      	ldrh	r3, [r7, #26]
 800d604:	4413      	add	r3, r2
 800d606:	b29a      	uxth	r2, r3
 800d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	88db      	ldrh	r3, [r3, #6]
 800d610:	b29b      	uxth	r3, r3
 800d612:	8afa      	ldrh	r2, [r7, #22]
 800d614:	429a      	cmp	r2, r3
 800d616:	d902      	bls.n	800d61e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d618:	f04f 33ff 	mov.w	r3, #4294967295
 800d61c:	e106      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
 800d624:	e068      	b.n	800d6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62e:	889b      	ldrh	r3, [r3, #4]
 800d630:	b29a      	uxth	r2, r3
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	889b      	ldrh	r3, [r3, #4]
 800d636:	b29b      	uxth	r3, r3
 800d638:	429a      	cmp	r2, r3
 800d63a:	d235      	bcs.n	800d6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d640:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d644:	2b00      	cmp	r3, #0
 800d646:	d020      	beq.n	800d68a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64a:	889b      	ldrh	r3, [r3, #4]
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d650:	88db      	ldrh	r3, [r3, #6]
 800d652:	b29b      	uxth	r3, r3
 800d654:	429a      	cmp	r2, r3
 800d656:	d307      	bcc.n	800d668 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	88db      	ldrh	r3, [r3, #6]
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	889b      	ldrh	r3, [r3, #4]
 800d662:	b29b      	uxth	r3, r3
 800d664:	429a      	cmp	r2, r3
 800d666:	d902      	bls.n	800d66e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d668:	f04f 33ff 	mov.w	r3, #4294967295
 800d66c:	e0de      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	88db      	ldrh	r3, [r3, #6]
 800d678:	b29a      	uxth	r2, r3
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	889b      	ldrh	r3, [r3, #4]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	429a      	cmp	r2, r3
 800d682:	d03d      	beq.n	800d700 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d688:	e03a      	b.n	800d700 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	88db      	ldrh	r3, [r3, #6]
 800d68e:	b29a      	uxth	r2, r3
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	889b      	ldrh	r3, [r3, #4]
 800d694:	b29b      	uxth	r3, r3
 800d696:	429a      	cmp	r2, r3
 800d698:	d902      	bls.n	800d6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d69a:	f04f 33ff 	mov.w	r3, #4294967295
 800d69e:	e0c5      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	605a      	str	r2, [r3, #4]
      break;
 800d6a6:	e02b      	b.n	800d700 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6aa:	889b      	ldrh	r3, [r3, #4]
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	889b      	ldrh	r3, [r3, #4]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d102      	bne.n	800d6be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	e0b6      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c0:	889b      	ldrh	r3, [r3, #4]
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	88db      	ldrh	r3, [r3, #6]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d202      	bcs.n	800d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d2:	e0ab      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	88db      	ldrh	r3, [r3, #6]
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	889b      	ldrh	r3, [r3, #4]
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d001      	beq.n	800d6ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d193      	bne.n	800d626 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d6fe:	e000      	b.n	800d702 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d700:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	2b00      	cmp	r3, #0
 800d706:	d12d      	bne.n	800d764 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d01c      	beq.n	800d748 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	88db      	ldrh	r3, [r3, #6]
 800d712:	b29a      	uxth	r2, r3
 800d714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d716:	889b      	ldrh	r3, [r3, #4]
 800d718:	b29b      	uxth	r3, r3
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d906      	bls.n	800d72c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d71e:	4b45      	ldr	r3, [pc, #276]	; (800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d720:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d724:	4944      	ldr	r1, [pc, #272]	; (800d838 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d726:	4845      	ldr	r0, [pc, #276]	; (800d83c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d728:	f000 fcea 	bl	800e100 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	88db      	ldrh	r3, [r3, #6]
 800d736:	b29a      	uxth	r2, r3
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	889b      	ldrh	r3, [r3, #4]
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	429a      	cmp	r2, r3
 800d740:	d010      	beq.n	800d764 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	623b      	str	r3, [r7, #32]
 800d746:	e00d      	b.n	800d764 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d006      	beq.n	800d75e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d750:	4b38      	ldr	r3, [pc, #224]	; (800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d752:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d756:	493a      	ldr	r1, [pc, #232]	; (800d840 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d758:	4838      	ldr	r0, [pc, #224]	; (800d83c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d75a:	f000 fcd1 	bl	800e100 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d105      	bne.n	800d776 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	7f9b      	ldrb	r3, [r3, #30]
 800d76e:	f003 0301 	and.w	r3, r3, #1
 800d772:	2b00      	cmp	r3, #0
 800d774:	d059      	beq.n	800d82a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d04f      	beq.n	800d81c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d006      	beq.n	800d792 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	889b      	ldrh	r3, [r3, #4]
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	623b      	str	r3, [r7, #32]
 800d796:	e041      	b.n	800d81c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d7a2:	e012      	b.n	800d7ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ac:	88db      	ldrh	r3, [r3, #6]
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	889b      	ldrh	r3, [r3, #4]
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d002      	beq.n	800d7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	623b      	str	r3, [r7, #32]
            break;
 800d7be:	e007      	b.n	800d7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e9      	bne.n	800d7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d022      	beq.n	800d81c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d7de:	4b15      	ldr	r3, [pc, #84]	; (800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d7e0:	f240 12df 	movw	r2, #479	; 0x1df
 800d7e4:	4917      	ldr	r1, [pc, #92]	; (800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d7e6:	4815      	ldr	r0, [pc, #84]	; (800d83c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d7e8:	f000 fc8a 	bl	800e100 <iprintf>
          LWIP_ASSERT("sanity check",
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d106      	bne.n	800d806 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d7f8:	4b0e      	ldr	r3, [pc, #56]	; (800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d7fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d7fe:	4911      	ldr	r1, [pc, #68]	; (800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d800:	480e      	ldr	r0, [pc, #56]	; (800d83c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d802:	f000 fc7d 	bl	800e100 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d006      	beq.n	800d81c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d80e:	4b09      	ldr	r3, [pc, #36]	; (800d834 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d810:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d814:	490c      	ldr	r1, [pc, #48]	; (800d848 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d816:	4809      	ldr	r0, [pc, #36]	; (800d83c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d818:	f000 fc72 	bl	800e100 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d81c:	6a3b      	ldr	r3, [r7, #32]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bf14      	ite	ne
 800d822:	2301      	movne	r3, #1
 800d824:	2300      	moveq	r3, #0
 800d826:	b2db      	uxtb	r3, r3
 800d828:	e000      	b.n	800d82c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3730      	adds	r7, #48	; 0x30
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	080118dc 	.word	0x080118dc
 800d838:	080119c0 	.word	0x080119c0
 800d83c:	08011924 	.word	0x08011924
 800d840:	080119e0 	.word	0x080119e0
 800d844:	08011a18 	.word	0x08011a18
 800d848:	08011a28 	.word	0x08011a28

0800d84c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b08e      	sub	sp, #56	; 0x38
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	f003 030f 	and.w	r3, r3, #15
 800d862:	b2db      	uxtb	r3, r3
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b14      	cmp	r3, #20
 800d86a:	f040 8171 	bne.w	800db50 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	b29b      	uxth	r3, r3
 800d874:	4618      	mov	r0, r3
 800d876:	f7f6 fe09 	bl	800448c <lwip_htons>
 800d87a:	4603      	mov	r3, r0
 800d87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d880:	b29b      	uxth	r3, r3
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	885b      	ldrh	r3, [r3, #2]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f6 fdfd 	bl	800448c <lwip_htons>
 800d892:	4603      	mov	r3, r0
 800d894:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	f003 030f 	and.w	r3, r3, #15
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d8a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	f0c0 8150 	bcc.w	800db54 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7f8 fa81 	bl	8005dc8 <pbuf_clen>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d8ca:	4b8c      	ldr	r3, [pc, #560]	; (800dafc <ip4_reass+0x2b0>)
 800d8cc:	881b      	ldrh	r3, [r3, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	8c3b      	ldrh	r3, [r7, #32]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	2b0a      	cmp	r3, #10
 800d8d6:	dd10      	ble.n	800d8fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d8d8:	8c3b      	ldrh	r3, [r7, #32]
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8de:	f7ff fd81 	bl	800d3e4 <ip_reass_remove_oldest_datagram>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 8137 	beq.w	800db58 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d8ea:	4b84      	ldr	r3, [pc, #528]	; (800dafc <ip4_reass+0x2b0>)
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	8c3b      	ldrh	r3, [r7, #32]
 800d8f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d8f4:	2b0a      	cmp	r3, #10
 800d8f6:	f300 812f 	bgt.w	800db58 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d8fa:	4b81      	ldr	r3, [pc, #516]	; (800db00 <ip4_reass+0x2b4>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800d900:	e015      	b.n	800d92e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	695a      	ldr	r2, [r3, #20]
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d10c      	bne.n	800d928 <ip4_reass+0xdc>
 800d90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d910:	699a      	ldr	r2, [r3, #24]
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	429a      	cmp	r2, r3
 800d918:	d106      	bne.n	800d928 <ip4_reass+0xdc>
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	899a      	ldrh	r2, [r3, #12]
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	889b      	ldrh	r3, [r3, #4]
 800d922:	b29b      	uxth	r3, r3
 800d924:	429a      	cmp	r2, r3
 800d926:	d006      	beq.n	800d936 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	633b      	str	r3, [r7, #48]	; 0x30
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1e6      	bne.n	800d902 <ip4_reass+0xb6>
 800d934:	e000      	b.n	800d938 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d936:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d109      	bne.n	800d952 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d93e:	8c3b      	ldrh	r3, [r7, #32]
 800d940:	4619      	mov	r1, r3
 800d942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d944:	f7ff fdb0 	bl	800d4a8 <ip_reass_enqueue_new_datagram>
 800d948:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d11c      	bne.n	800d98a <ip4_reass+0x13e>
      goto nullreturn;
 800d950:	e105      	b.n	800db5e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d954:	88db      	ldrh	r3, [r3, #6]
 800d956:	b29b      	uxth	r3, r3
 800d958:	4618      	mov	r0, r3
 800d95a:	f7f6 fd97 	bl	800448c <lwip_htons>
 800d95e:	4603      	mov	r3, r0
 800d960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d964:	2b00      	cmp	r3, #0
 800d966:	d110      	bne.n	800d98a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	89db      	ldrh	r3, [r3, #14]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7f6 fd8d 	bl	800448c <lwip_htons>
 800d972:	4603      	mov	r3, r0
 800d974:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d006      	beq.n	800d98a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97e:	3308      	adds	r3, #8
 800d980:	2214      	movs	r2, #20
 800d982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d984:	4618      	mov	r0, r3
 800d986:	f000 fba5 	bl	800e0d4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	88db      	ldrh	r3, [r3, #6]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	f003 0320 	and.w	r3, r3, #32
 800d994:	2b00      	cmp	r3, #0
 800d996:	bf0c      	ite	eq
 800d998:	2301      	moveq	r3, #1
 800d99a:	2300      	movne	r3, #0
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00e      	beq.n	800d9c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d9a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9aa:	4413      	add	r3, r2
 800d9ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d9ae:	8b7a      	ldrh	r2, [r7, #26]
 800d9b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	f0c0 80a0 	bcc.w	800daf8 <ip4_reass+0x2ac>
 800d9b8:	8b7b      	ldrh	r3, [r7, #26]
 800d9ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	f200 809a 	bhi.w	800daf8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d9c4:	69fa      	ldr	r2, [r7, #28]
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ca:	f7ff fdd5 	bl	800d578 <ip_reass_chain_frag_into_datagram_and_validate>
 800d9ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d6:	f000 809b 	beq.w	800db10 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d9da:	4b48      	ldr	r3, [pc, #288]	; (800dafc <ip4_reass+0x2b0>)
 800d9dc:	881a      	ldrh	r2, [r3, #0]
 800d9de:	8c3b      	ldrh	r3, [r7, #32]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	4b45      	ldr	r3, [pc, #276]	; (800dafc <ip4_reass+0x2b0>)
 800d9e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00d      	beq.n	800da0a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d9ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d9f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f2:	4413      	add	r3, r2
 800d9f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	8a7a      	ldrh	r2, [r7, #18]
 800d9fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	7f9b      	ldrb	r3, [r3, #30]
 800da00:	f043 0301 	orr.w	r3, r3, #1
 800da04:	b2da      	uxtb	r2, r3
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d171      	bne.n	800daf4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	8b9b      	ldrh	r3, [r3, #28]
 800da14:	3314      	adds	r3, #20
 800da16:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	3308      	adds	r3, #8
 800da2e:	2214      	movs	r2, #20
 800da30:	4619      	mov	r1, r3
 800da32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da34:	f000 fb4e 	bl	800e0d4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800da38:	8a3b      	ldrh	r3, [r7, #16]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f6 fd26 	bl	800448c <lwip_htons>
 800da40:	4603      	mov	r3, r0
 800da42:	461a      	mov	r2, r3
 800da44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da46:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4a:	2200      	movs	r2, #0
 800da4c:	719a      	strb	r2, [r3, #6]
 800da4e:	2200      	movs	r2, #0
 800da50:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800da52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da54:	2200      	movs	r2, #0
 800da56:	729a      	strb	r2, [r3, #10]
 800da58:	2200      	movs	r2, #0
 800da5a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800da5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800da62:	e00d      	b.n	800da80 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800da64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800da6a:	2114      	movs	r1, #20
 800da6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800da6e:	f7f8 f89d 	bl	8005bac <pbuf_remove_header>
      pbuf_cat(p, r);
 800da72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7f8 f9e1 	bl	8005e3c <pbuf_cat>
      r = iprh->next_pbuf;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800da80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1ee      	bne.n	800da64 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800da86:	4b1e      	ldr	r3, [pc, #120]	; (800db00 <ip4_reass+0x2b4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d102      	bne.n	800da96 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800da90:	2300      	movs	r3, #0
 800da92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da94:	e010      	b.n	800dab8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800da96:	4b1a      	ldr	r3, [pc, #104]	; (800db00 <ip4_reass+0x2b4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da9c:	e007      	b.n	800daae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d006      	beq.n	800dab6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1f4      	bne.n	800da9e <ip4_reass+0x252>
 800dab4:	e000      	b.n	800dab8 <ip4_reass+0x26c>
          break;
 800dab6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dabc:	f7ff fd2e 	bl	800d51c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7f8 f981 	bl	8005dc8 <pbuf_clen>
 800dac6:	4603      	mov	r3, r0
 800dac8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800daca:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <ip4_reass+0x2b0>)
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	8c3a      	ldrh	r2, [r7, #32]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d906      	bls.n	800dae2 <ip4_reass+0x296>
 800dad4:	4b0b      	ldr	r3, [pc, #44]	; (800db04 <ip4_reass+0x2b8>)
 800dad6:	f240 229b 	movw	r2, #667	; 0x29b
 800dada:	490b      	ldr	r1, [pc, #44]	; (800db08 <ip4_reass+0x2bc>)
 800dadc:	480b      	ldr	r0, [pc, #44]	; (800db0c <ip4_reass+0x2c0>)
 800dade:	f000 fb0f 	bl	800e100 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dae2:	4b06      	ldr	r3, [pc, #24]	; (800dafc <ip4_reass+0x2b0>)
 800dae4:	881a      	ldrh	r2, [r3, #0]
 800dae6:	8c3b      	ldrh	r3, [r7, #32]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	b29a      	uxth	r2, r3
 800daec:	4b03      	ldr	r3, [pc, #12]	; (800dafc <ip4_reass+0x2b0>)
 800daee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	e038      	b.n	800db66 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e036      	b.n	800db66 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800daf8:	bf00      	nop
 800dafa:	e00a      	b.n	800db12 <ip4_reass+0x2c6>
 800dafc:	24003290 	.word	0x24003290
 800db00:	2400328c 	.word	0x2400328c
 800db04:	080118dc 	.word	0x080118dc
 800db08:	08011a4c 	.word	0x08011a4c
 800db0c:	08011924 	.word	0x08011924
    goto nullreturn_ipr;
 800db10:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <ip4_reass+0x2da>
 800db18:	4b15      	ldr	r3, [pc, #84]	; (800db70 <ip4_reass+0x324>)
 800db1a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800db1e:	4915      	ldr	r1, [pc, #84]	; (800db74 <ip4_reass+0x328>)
 800db20:	4815      	ldr	r0, [pc, #84]	; (800db78 <ip4_reass+0x32c>)
 800db22:	f000 faed 	bl	800e100 <iprintf>
  if (ipr->p == NULL) {
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d116      	bne.n	800db5c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800db2e:	4b13      	ldr	r3, [pc, #76]	; (800db7c <ip4_reass+0x330>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db34:	429a      	cmp	r2, r3
 800db36:	d006      	beq.n	800db46 <ip4_reass+0x2fa>
 800db38:	4b0d      	ldr	r3, [pc, #52]	; (800db70 <ip4_reass+0x324>)
 800db3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800db3e:	4910      	ldr	r1, [pc, #64]	; (800db80 <ip4_reass+0x334>)
 800db40:	480d      	ldr	r0, [pc, #52]	; (800db78 <ip4_reass+0x32c>)
 800db42:	f000 fadd 	bl	800e100 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800db46:	2100      	movs	r1, #0
 800db48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db4a:	f7ff fce7 	bl	800d51c <ip_reass_dequeue_datagram>
 800db4e:	e006      	b.n	800db5e <ip4_reass+0x312>
    goto nullreturn;
 800db50:	bf00      	nop
 800db52:	e004      	b.n	800db5e <ip4_reass+0x312>
    goto nullreturn;
 800db54:	bf00      	nop
 800db56:	e002      	b.n	800db5e <ip4_reass+0x312>
      goto nullreturn;
 800db58:	bf00      	nop
 800db5a:	e000      	b.n	800db5e <ip4_reass+0x312>
  }

nullreturn:
 800db5c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7f8 f8aa 	bl	8005cb8 <pbuf_free>
  return NULL;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3738      	adds	r7, #56	; 0x38
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	080118dc 	.word	0x080118dc
 800db74:	08011a68 	.word	0x08011a68
 800db78:	08011924 	.word	0x08011924
 800db7c:	2400328c 	.word	0x2400328c
 800db80:	08011a74 	.word	0x08011a74

0800db84 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800db88:	2005      	movs	r0, #5
 800db8a:	f7f7 f9af 	bl	8004eec <memp_malloc>
 800db8e:	4603      	mov	r3, r0
}
 800db90:	4618      	mov	r0, r3
 800db92:	bd80      	pop	{r7, pc}

0800db94 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dba2:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dba4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dba8:	4906      	ldr	r1, [pc, #24]	; (800dbc4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dbaa:	4807      	ldr	r0, [pc, #28]	; (800dbc8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dbac:	f000 faa8 	bl	800e100 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dbb0:	6879      	ldr	r1, [r7, #4]
 800dbb2:	2005      	movs	r0, #5
 800dbb4:	f7f7 fa0a 	bl	8004fcc <memp_free>
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	080118dc 	.word	0x080118dc
 800dbc4:	08011a94 	.word	0x08011a94
 800dbc8:	08011924 	.word	0x08011924

0800dbcc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <ipfrag_free_pbuf_custom+0x20>
 800dbde:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <ipfrag_free_pbuf_custom+0x58>)
 800dbe0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dbe4:	4910      	ldr	r1, [pc, #64]	; (800dc28 <ipfrag_free_pbuf_custom+0x5c>)
 800dbe6:	4811      	ldr	r0, [pc, #68]	; (800dc2c <ipfrag_free_pbuf_custom+0x60>)
 800dbe8:	f000 fa8a 	bl	800e100 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d006      	beq.n	800dc02 <ipfrag_free_pbuf_custom+0x36>
 800dbf4:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <ipfrag_free_pbuf_custom+0x58>)
 800dbf6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dbfa:	490d      	ldr	r1, [pc, #52]	; (800dc30 <ipfrag_free_pbuf_custom+0x64>)
 800dbfc:	480b      	ldr	r0, [pc, #44]	; (800dc2c <ipfrag_free_pbuf_custom+0x60>)
 800dbfe:	f000 fa7f 	bl	800e100 <iprintf>
  if (pcr->original != NULL) {
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	695b      	ldr	r3, [r3, #20]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d004      	beq.n	800dc14 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f8 f852 	bl	8005cb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f7ff ffbd 	bl	800db94 <ip_frag_free_pbuf_custom_ref>
}
 800dc1a:	bf00      	nop
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	080118dc 	.word	0x080118dc
 800dc28:	08011aa0 	.word	0x08011aa0
 800dc2c:	08011924 	.word	0x08011924
 800dc30:	08011aac 	.word	0x08011aac

0800dc34 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b094      	sub	sp, #80	; 0x50
 800dc38:	af02      	add	r7, sp, #8
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc4a:	3b14      	subs	r3, #20
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	da00      	bge.n	800dc52 <ip4_frag+0x1e>
 800dc50:	3307      	adds	r3, #7
 800dc52:	10db      	asrs	r3, r3, #3
 800dc54:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dc56:	2314      	movs	r3, #20
 800dc58:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc62:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	f003 030f 	and.w	r3, r3, #15
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b14      	cmp	r3, #20
 800dc74:	d002      	beq.n	800dc7c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dc76:	f06f 0305 	mvn.w	r3, #5
 800dc7a:	e110      	b.n	800de9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	895b      	ldrh	r3, [r3, #10]
 800dc80:	2b13      	cmp	r3, #19
 800dc82:	d809      	bhi.n	800dc98 <ip4_frag+0x64>
 800dc84:	4b88      	ldr	r3, [pc, #544]	; (800dea8 <ip4_frag+0x274>)
 800dc86:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dc8a:	4988      	ldr	r1, [pc, #544]	; (800deac <ip4_frag+0x278>)
 800dc8c:	4888      	ldr	r0, [pc, #544]	; (800deb0 <ip4_frag+0x27c>)
 800dc8e:	f000 fa37 	bl	800e100 <iprintf>
 800dc92:	f06f 0305 	mvn.w	r3, #5
 800dc96:	e102      	b.n	800de9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	88db      	ldrh	r3, [r3, #6]
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7f6 fbf4 	bl	800448c <lwip_htons>
 800dca4:	4603      	mov	r3, r0
 800dca6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800dca8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dcaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dcb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dcb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	891b      	ldrh	r3, [r3, #8]
 800dcbe:	3b14      	subs	r3, #20
 800dcc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dcc4:	e0e1      	b.n	800de8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dcc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	bf28      	it	cs
 800dcd4:	4613      	movcs	r3, r2
 800dcd6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dcd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dcdc:	2114      	movs	r1, #20
 800dcde:	200e      	movs	r0, #14
 800dce0:	f7f7 fd06 	bl	80056f0 <pbuf_alloc>
 800dce4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 80d5 	beq.w	800de98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	895b      	ldrh	r3, [r3, #10]
 800dcf2:	2b13      	cmp	r3, #19
 800dcf4:	d806      	bhi.n	800dd04 <ip4_frag+0xd0>
 800dcf6:	4b6c      	ldr	r3, [pc, #432]	; (800dea8 <ip4_frag+0x274>)
 800dcf8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dcfc:	496d      	ldr	r1, [pc, #436]	; (800deb4 <ip4_frag+0x280>)
 800dcfe:	486c      	ldr	r0, [pc, #432]	; (800deb0 <ip4_frag+0x27c>)
 800dd00:	f000 f9fe 	bl	800e100 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	2214      	movs	r2, #20
 800dd0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 f9e1 	bl	800e0d4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800dd18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dd1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800dd1e:	e064      	b.n	800ddea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	895a      	ldrh	r2, [r3, #10]
 800dd24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	895b      	ldrh	r3, [r3, #10]
 800dd2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d906      	bls.n	800dd42 <ip4_frag+0x10e>
 800dd34:	4b5c      	ldr	r3, [pc, #368]	; (800dea8 <ip4_frag+0x274>)
 800dd36:	f240 322d 	movw	r2, #813	; 0x32d
 800dd3a:	495f      	ldr	r1, [pc, #380]	; (800deb8 <ip4_frag+0x284>)
 800dd3c:	485c      	ldr	r0, [pc, #368]	; (800deb0 <ip4_frag+0x27c>)
 800dd3e:	f000 f9df 	bl	800e100 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dd42:	8bfa      	ldrh	r2, [r7, #30]
 800dd44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	bf28      	it	cs
 800dd4c:	4613      	movcs	r3, r2
 800dd4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dd52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d105      	bne.n	800dd66 <ip4_frag+0x132>
        poff = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]
        continue;
 800dd64:	e041      	b.n	800ddea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dd66:	f7ff ff0d 	bl	800db84 <ip_frag_alloc_pbuf_custom_ref>
 800dd6a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d103      	bne.n	800dd7a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dd72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd74:	f7f7 ffa0 	bl	8005cb8 <pbuf_free>
        goto memerr;
 800dd78:	e08f      	b.n	800de9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dd7a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dd80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dd82:	4413      	add	r3, r2
 800dd84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800dd88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800dd8c:	9201      	str	r2, [sp, #4]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	4603      	mov	r3, r0
 800dd92:	2241      	movs	r2, #65	; 0x41
 800dd94:	2000      	movs	r0, #0
 800dd96:	f7f7 fdd5 	bl	8005944 <pbuf_alloced_custom>
 800dd9a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d106      	bne.n	800ddb0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dda2:	69b8      	ldr	r0, [r7, #24]
 800dda4:	f7ff fef6 	bl	800db94 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dda8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddaa:	f7f7 ff85 	bl	8005cb8 <pbuf_free>
        goto memerr;
 800ddae:	e074      	b.n	800de9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f7f8 f821 	bl	8005df8 <pbuf_ref>
      pcr->original = p;
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	4a3f      	ldr	r2, [pc, #252]	; (800debc <ip4_frag+0x288>)
 800ddc0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ddc2:	6979      	ldr	r1, [r7, #20]
 800ddc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddc6:	f7f8 f839 	bl	8005e3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ddca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ddce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ddd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d004      	beq.n	800ddea <ip4_frag+0x1b6>
        poff = 0;
 800dde0:	2300      	movs	r3, #0
 800dde2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ddea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d196      	bne.n	800dd20 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ddf2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ddf4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ddf8:	4413      	add	r3, r2
 800ddfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800de00:	f1a3 0213 	sub.w	r2, r3, #19
 800de04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de08:	429a      	cmp	r2, r3
 800de0a:	bfcc      	ite	gt
 800de0c:	2301      	movgt	r3, #1
 800de0e:	2300      	movle	r3, #0
 800de10:	b2db      	uxtb	r3, r3
 800de12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800de14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800de1e:	6a3b      	ldr	r3, [r7, #32]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d002      	beq.n	800de2a <ip4_frag+0x1f6>
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	2b00      	cmp	r3, #0
 800de28:	d003      	beq.n	800de32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800de2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800de30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800de32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de34:	4618      	mov	r0, r3
 800de36:	f7f6 fb29 	bl	800448c <lwip_htons>
 800de3a:	4603      	mov	r3, r0
 800de3c:	461a      	mov	r2, r3
 800de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800de42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de44:	3314      	adds	r3, #20
 800de46:	b29b      	uxth	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7f6 fb1f 	bl	800448c <lwip_htons>
 800de4e:	4603      	mov	r3, r0
 800de50:	461a      	mov	r2, r3
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	2200      	movs	r2, #0
 800de5a:	729a      	strb	r2, [r3, #10]
 800de5c:	2200      	movs	r2, #0
 800de5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de68:	68b8      	ldr	r0, [r7, #8]
 800de6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800de6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de6e:	f7f7 ff23 	bl	8005cb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800de72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800de7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800de82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de84:	4413      	add	r3, r2
 800de86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800de8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f47f af19 	bne.w	800dcc6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	e002      	b.n	800de9e <ip4_frag+0x26a>
      goto memerr;
 800de98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800de9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3748      	adds	r7, #72	; 0x48
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	080118dc 	.word	0x080118dc
 800deac:	08011ab8 	.word	0x08011ab8
 800deb0:	08011924 	.word	0x08011924
 800deb4:	08011ad4 	.word	0x08011ad4
 800deb8:	08011af4 	.word	0x08011af4
 800debc:	0800dbcd 	.word	0x0800dbcd

0800dec0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800deca:	230e      	movs	r3, #14
 800decc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	895b      	ldrh	r3, [r3, #10]
 800ded2:	2b0e      	cmp	r3, #14
 800ded4:	d96e      	bls.n	800dfb4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7bdb      	ldrb	r3, [r3, #15]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d106      	bne.n	800deec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dee4:	3301      	adds	r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	7b1a      	ldrb	r2, [r3, #12]
 800def6:	7b5b      	ldrb	r3, [r3, #13]
 800def8:	021b      	lsls	r3, r3, #8
 800defa:	4313      	orrs	r3, r2
 800defc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	2b00      	cmp	r3, #0
 800df08:	d023      	beq.n	800df52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d10f      	bne.n	800df32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	785b      	ldrb	r3, [r3, #1]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d11b      	bne.n	800df52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800df1e:	2b5e      	cmp	r3, #94	; 0x5e
 800df20:	d117      	bne.n	800df52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7b5b      	ldrb	r3, [r3, #13]
 800df26:	f043 0310 	orr.w	r3, r3, #16
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	735a      	strb	r2, [r3, #13]
 800df30:	e00f      	b.n	800df52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	2206      	movs	r2, #6
 800df36:	4928      	ldr	r1, [pc, #160]	; (800dfd8 <ethernet_input+0x118>)
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 f8bb 	bl	800e0b4 <memcmp>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d106      	bne.n	800df52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	7b5b      	ldrb	r3, [r3, #13]
 800df48:	f043 0308 	orr.w	r3, r3, #8
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800df52:	89fb      	ldrh	r3, [r7, #14]
 800df54:	2b08      	cmp	r3, #8
 800df56:	d003      	beq.n	800df60 <ethernet_input+0xa0>
 800df58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800df5c:	d014      	beq.n	800df88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800df5e:	e032      	b.n	800dfc6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df66:	f003 0308 	and.w	r3, r3, #8
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d024      	beq.n	800dfb8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800df6e:	8afb      	ldrh	r3, [r7, #22]
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7f7 fe1a 	bl	8005bac <pbuf_remove_header>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d11e      	bne.n	800dfbc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800df7e:	6839      	ldr	r1, [r7, #0]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7fe ff21 	bl	800cdc8 <ip4_input>
      break;
 800df86:	e013      	b.n	800dfb0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df8e:	f003 0308 	and.w	r3, r3, #8
 800df92:	2b00      	cmp	r3, #0
 800df94:	d014      	beq.n	800dfc0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800df96:	8afb      	ldrh	r3, [r7, #22]
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7f7 fe06 	bl	8005bac <pbuf_remove_header>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10e      	bne.n	800dfc4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7fe f89b 	bl	800c0e4 <etharp_input>
      break;
 800dfae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	e00c      	b.n	800dfce <ethernet_input+0x10e>
    goto free_and_return;
 800dfb4:	bf00      	nop
 800dfb6:	e006      	b.n	800dfc6 <ethernet_input+0x106>
        goto free_and_return;
 800dfb8:	bf00      	nop
 800dfba:	e004      	b.n	800dfc6 <ethernet_input+0x106>
        goto free_and_return;
 800dfbc:	bf00      	nop
 800dfbe:	e002      	b.n	800dfc6 <ethernet_input+0x106>
        goto free_and_return;
 800dfc0:	bf00      	nop
 800dfc2:	e000      	b.n	800dfc6 <ethernet_input+0x106>
        goto free_and_return;
 800dfc4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7f7 fe76 	bl	8005cb8 <pbuf_free>
  return ERR_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	08011c88 	.word	0x08011c88

0800dfdc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dfea:	8c3b      	ldrh	r3, [r7, #32]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7f6 fa4d 	bl	800448c <lwip_htons>
 800dff2:	4603      	mov	r3, r0
 800dff4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dff6:	210e      	movs	r1, #14
 800dff8:	68b8      	ldr	r0, [r7, #8]
 800dffa:	f7f7 fdc7 	bl	8005b8c <pbuf_add_header>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d125      	bne.n	800e050 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	8afa      	ldrh	r2, [r7, #22]
 800e00e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	2206      	movs	r2, #6
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	4618      	mov	r0, r3
 800e018:	f000 f85c 	bl	800e0d4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	3306      	adds	r3, #6
 800e020:	2206      	movs	r2, #6
 800e022:	6879      	ldr	r1, [r7, #4]
 800e024:	4618      	mov	r0, r3
 800e026:	f000 f855 	bl	800e0d4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e030:	2b06      	cmp	r3, #6
 800e032:	d006      	beq.n	800e042 <ethernet_output+0x66>
 800e034:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <ethernet_output+0x84>)
 800e036:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e03a:	490a      	ldr	r1, [pc, #40]	; (800e064 <ethernet_output+0x88>)
 800e03c:	480a      	ldr	r0, [pc, #40]	; (800e068 <ethernet_output+0x8c>)
 800e03e:	f000 f85f 	bl	800e100 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	699b      	ldr	r3, [r3, #24]
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	4798      	blx	r3
 800e04c:	4603      	mov	r3, r0
 800e04e:	e002      	b.n	800e056 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e050:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e052:	f06f 0301 	mvn.w	r3, #1
}
 800e056:	4618      	mov	r0, r3
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	08011b04 	.word	0x08011b04
 800e064:	08011b3c 	.word	0x08011b3c
 800e068:	08011b70 	.word	0x08011b70

0800e06c <__libc_init_array>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	4d0d      	ldr	r5, [pc, #52]	; (800e0a4 <__libc_init_array+0x38>)
 800e070:	4c0d      	ldr	r4, [pc, #52]	; (800e0a8 <__libc_init_array+0x3c>)
 800e072:	1b64      	subs	r4, r4, r5
 800e074:	10a4      	asrs	r4, r4, #2
 800e076:	2600      	movs	r6, #0
 800e078:	42a6      	cmp	r6, r4
 800e07a:	d109      	bne.n	800e090 <__libc_init_array+0x24>
 800e07c:	4d0b      	ldr	r5, [pc, #44]	; (800e0ac <__libc_init_array+0x40>)
 800e07e:	4c0c      	ldr	r4, [pc, #48]	; (800e0b0 <__libc_init_array+0x44>)
 800e080:	f001 f88e 	bl	800f1a0 <_init>
 800e084:	1b64      	subs	r4, r4, r5
 800e086:	10a4      	asrs	r4, r4, #2
 800e088:	2600      	movs	r6, #0
 800e08a:	42a6      	cmp	r6, r4
 800e08c:	d105      	bne.n	800e09a <__libc_init_array+0x2e>
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
 800e090:	f855 3b04 	ldr.w	r3, [r5], #4
 800e094:	4798      	blx	r3
 800e096:	3601      	adds	r6, #1
 800e098:	e7ee      	b.n	800e078 <__libc_init_array+0xc>
 800e09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e09e:	4798      	blx	r3
 800e0a0:	3601      	adds	r6, #1
 800e0a2:	e7f2      	b.n	800e08a <__libc_init_array+0x1e>
 800e0a4:	08011de0 	.word	0x08011de0
 800e0a8:	08011de0 	.word	0x08011de0
 800e0ac:	08011de0 	.word	0x08011de0
 800e0b0:	08011de4 	.word	0x08011de4

0800e0b4 <memcmp>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	3901      	subs	r1, #1
 800e0b8:	4402      	add	r2, r0
 800e0ba:	4290      	cmp	r0, r2
 800e0bc:	d101      	bne.n	800e0c2 <memcmp+0xe>
 800e0be:	2000      	movs	r0, #0
 800e0c0:	e005      	b.n	800e0ce <memcmp+0x1a>
 800e0c2:	7803      	ldrb	r3, [r0, #0]
 800e0c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d001      	beq.n	800e0d0 <memcmp+0x1c>
 800e0cc:	1b18      	subs	r0, r3, r4
 800e0ce:	bd10      	pop	{r4, pc}
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	e7f2      	b.n	800e0ba <memcmp+0x6>

0800e0d4 <memcpy>:
 800e0d4:	440a      	add	r2, r1
 800e0d6:	4291      	cmp	r1, r2
 800e0d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0dc:	d100      	bne.n	800e0e0 <memcpy+0xc>
 800e0de:	4770      	bx	lr
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0ea:	4291      	cmp	r1, r2
 800e0ec:	d1f9      	bne.n	800e0e2 <memcpy+0xe>
 800e0ee:	bd10      	pop	{r4, pc}

0800e0f0 <memset>:
 800e0f0:	4402      	add	r2, r0
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d100      	bne.n	800e0fa <memset+0xa>
 800e0f8:	4770      	bx	lr
 800e0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e0fe:	e7f9      	b.n	800e0f4 <memset+0x4>

0800e100 <iprintf>:
 800e100:	b40f      	push	{r0, r1, r2, r3}
 800e102:	4b0a      	ldr	r3, [pc, #40]	; (800e12c <iprintf+0x2c>)
 800e104:	b513      	push	{r0, r1, r4, lr}
 800e106:	681c      	ldr	r4, [r3, #0]
 800e108:	b124      	cbz	r4, 800e114 <iprintf+0x14>
 800e10a:	69a3      	ldr	r3, [r4, #24]
 800e10c:	b913      	cbnz	r3, 800e114 <iprintf+0x14>
 800e10e:	4620      	mov	r0, r4
 800e110:	f000 f8c2 	bl	800e298 <__sinit>
 800e114:	ab05      	add	r3, sp, #20
 800e116:	9a04      	ldr	r2, [sp, #16]
 800e118:	68a1      	ldr	r1, [r4, #8]
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	4620      	mov	r0, r4
 800e11e:	f000 fa7f 	bl	800e620 <_vfiprintf_r>
 800e122:	b002      	add	sp, #8
 800e124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e128:	b004      	add	sp, #16
 800e12a:	4770      	bx	lr
 800e12c:	24000030 	.word	0x24000030

0800e130 <rand>:
 800e130:	4b16      	ldr	r3, [pc, #88]	; (800e18c <rand+0x5c>)
 800e132:	b510      	push	{r4, lr}
 800e134:	681c      	ldr	r4, [r3, #0]
 800e136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e138:	b9b3      	cbnz	r3, 800e168 <rand+0x38>
 800e13a:	2018      	movs	r0, #24
 800e13c:	f000 f95e 	bl	800e3fc <malloc>
 800e140:	63a0      	str	r0, [r4, #56]	; 0x38
 800e142:	b928      	cbnz	r0, 800e150 <rand+0x20>
 800e144:	4602      	mov	r2, r0
 800e146:	4b12      	ldr	r3, [pc, #72]	; (800e190 <rand+0x60>)
 800e148:	4812      	ldr	r0, [pc, #72]	; (800e194 <rand+0x64>)
 800e14a:	214e      	movs	r1, #78	; 0x4e
 800e14c:	f000 f82e 	bl	800e1ac <__assert_func>
 800e150:	4a11      	ldr	r2, [pc, #68]	; (800e198 <rand+0x68>)
 800e152:	4b12      	ldr	r3, [pc, #72]	; (800e19c <rand+0x6c>)
 800e154:	e9c0 2300 	strd	r2, r3, [r0]
 800e158:	4b11      	ldr	r3, [pc, #68]	; (800e1a0 <rand+0x70>)
 800e15a:	6083      	str	r3, [r0, #8]
 800e15c:	230b      	movs	r3, #11
 800e15e:	8183      	strh	r3, [r0, #12]
 800e160:	2201      	movs	r2, #1
 800e162:	2300      	movs	r3, #0
 800e164:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e168:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e16a:	4a0e      	ldr	r2, [pc, #56]	; (800e1a4 <rand+0x74>)
 800e16c:	6920      	ldr	r0, [r4, #16]
 800e16e:	6963      	ldr	r3, [r4, #20]
 800e170:	490d      	ldr	r1, [pc, #52]	; (800e1a8 <rand+0x78>)
 800e172:	4342      	muls	r2, r0
 800e174:	fb01 2203 	mla	r2, r1, r3, r2
 800e178:	fba0 0101 	umull	r0, r1, r0, r1
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	eb42 0001 	adc.w	r0, r2, r1
 800e182:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e186:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e18a:	bd10      	pop	{r4, pc}
 800e18c:	24000030 	.word	0x24000030
 800e190:	08011c9c 	.word	0x08011c9c
 800e194:	08011cb3 	.word	0x08011cb3
 800e198:	abcd330e 	.word	0xabcd330e
 800e19c:	e66d1234 	.word	0xe66d1234
 800e1a0:	0005deec 	.word	0x0005deec
 800e1a4:	5851f42d 	.word	0x5851f42d
 800e1a8:	4c957f2d 	.word	0x4c957f2d

0800e1ac <__assert_func>:
 800e1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ae:	4614      	mov	r4, r2
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	4b09      	ldr	r3, [pc, #36]	; (800e1d8 <__assert_func+0x2c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	68d8      	ldr	r0, [r3, #12]
 800e1ba:	b14c      	cbz	r4, 800e1d0 <__assert_func+0x24>
 800e1bc:	4b07      	ldr	r3, [pc, #28]	; (800e1dc <__assert_func+0x30>)
 800e1be:	9100      	str	r1, [sp, #0]
 800e1c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1c4:	4906      	ldr	r1, [pc, #24]	; (800e1e0 <__assert_func+0x34>)
 800e1c6:	462b      	mov	r3, r5
 800e1c8:	f000 f8e4 	bl	800e394 <fiprintf>
 800e1cc:	f000 fe12 	bl	800edf4 <abort>
 800e1d0:	4b04      	ldr	r3, [pc, #16]	; (800e1e4 <__assert_func+0x38>)
 800e1d2:	461c      	mov	r4, r3
 800e1d4:	e7f3      	b.n	800e1be <__assert_func+0x12>
 800e1d6:	bf00      	nop
 800e1d8:	24000030 	.word	0x24000030
 800e1dc:	08011d0e 	.word	0x08011d0e
 800e1e0:	08011d1b 	.word	0x08011d1b
 800e1e4:	08011d49 	.word	0x08011d49

0800e1e8 <std>:
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	b510      	push	{r4, lr}
 800e1ec:	4604      	mov	r4, r0
 800e1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800e1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1f6:	6083      	str	r3, [r0, #8]
 800e1f8:	8181      	strh	r1, [r0, #12]
 800e1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800e1fc:	81c2      	strh	r2, [r0, #14]
 800e1fe:	6183      	str	r3, [r0, #24]
 800e200:	4619      	mov	r1, r3
 800e202:	2208      	movs	r2, #8
 800e204:	305c      	adds	r0, #92	; 0x5c
 800e206:	f7ff ff73 	bl	800e0f0 <memset>
 800e20a:	4b05      	ldr	r3, [pc, #20]	; (800e220 <std+0x38>)
 800e20c:	6263      	str	r3, [r4, #36]	; 0x24
 800e20e:	4b05      	ldr	r3, [pc, #20]	; (800e224 <std+0x3c>)
 800e210:	62a3      	str	r3, [r4, #40]	; 0x28
 800e212:	4b05      	ldr	r3, [pc, #20]	; (800e228 <std+0x40>)
 800e214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e216:	4b05      	ldr	r3, [pc, #20]	; (800e22c <std+0x44>)
 800e218:	6224      	str	r4, [r4, #32]
 800e21a:	6323      	str	r3, [r4, #48]	; 0x30
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	bf00      	nop
 800e220:	0800ebc9 	.word	0x0800ebc9
 800e224:	0800ebeb 	.word	0x0800ebeb
 800e228:	0800ec23 	.word	0x0800ec23
 800e22c:	0800ec47 	.word	0x0800ec47

0800e230 <_cleanup_r>:
 800e230:	4901      	ldr	r1, [pc, #4]	; (800e238 <_cleanup_r+0x8>)
 800e232:	f000 b8c1 	b.w	800e3b8 <_fwalk_reent>
 800e236:	bf00      	nop
 800e238:	0800ef31 	.word	0x0800ef31

0800e23c <__sfmoreglue>:
 800e23c:	b570      	push	{r4, r5, r6, lr}
 800e23e:	2268      	movs	r2, #104	; 0x68
 800e240:	1e4d      	subs	r5, r1, #1
 800e242:	4355      	muls	r5, r2
 800e244:	460e      	mov	r6, r1
 800e246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e24a:	f000 f94b 	bl	800e4e4 <_malloc_r>
 800e24e:	4604      	mov	r4, r0
 800e250:	b140      	cbz	r0, 800e264 <__sfmoreglue+0x28>
 800e252:	2100      	movs	r1, #0
 800e254:	e9c0 1600 	strd	r1, r6, [r0]
 800e258:	300c      	adds	r0, #12
 800e25a:	60a0      	str	r0, [r4, #8]
 800e25c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e260:	f7ff ff46 	bl	800e0f0 <memset>
 800e264:	4620      	mov	r0, r4
 800e266:	bd70      	pop	{r4, r5, r6, pc}

0800e268 <__sfp_lock_acquire>:
 800e268:	4801      	ldr	r0, [pc, #4]	; (800e270 <__sfp_lock_acquire+0x8>)
 800e26a:	f000 b8c5 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800e26e:	bf00      	nop
 800e270:	24003299 	.word	0x24003299

0800e274 <__sfp_lock_release>:
 800e274:	4801      	ldr	r0, [pc, #4]	; (800e27c <__sfp_lock_release+0x8>)
 800e276:	f000 b8c0 	b.w	800e3fa <__retarget_lock_release_recursive>
 800e27a:	bf00      	nop
 800e27c:	24003299 	.word	0x24003299

0800e280 <__sinit_lock_acquire>:
 800e280:	4801      	ldr	r0, [pc, #4]	; (800e288 <__sinit_lock_acquire+0x8>)
 800e282:	f000 b8b9 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800e286:	bf00      	nop
 800e288:	2400329a 	.word	0x2400329a

0800e28c <__sinit_lock_release>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__sinit_lock_release+0x8>)
 800e28e:	f000 b8b4 	b.w	800e3fa <__retarget_lock_release_recursive>
 800e292:	bf00      	nop
 800e294:	2400329a 	.word	0x2400329a

0800e298 <__sinit>:
 800e298:	b510      	push	{r4, lr}
 800e29a:	4604      	mov	r4, r0
 800e29c:	f7ff fff0 	bl	800e280 <__sinit_lock_acquire>
 800e2a0:	69a3      	ldr	r3, [r4, #24]
 800e2a2:	b11b      	cbz	r3, 800e2ac <__sinit+0x14>
 800e2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a8:	f7ff bff0 	b.w	800e28c <__sinit_lock_release>
 800e2ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2b0:	6523      	str	r3, [r4, #80]	; 0x50
 800e2b2:	4b13      	ldr	r3, [pc, #76]	; (800e300 <__sinit+0x68>)
 800e2b4:	4a13      	ldr	r2, [pc, #76]	; (800e304 <__sinit+0x6c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ba:	42a3      	cmp	r3, r4
 800e2bc:	bf04      	itt	eq
 800e2be:	2301      	moveq	r3, #1
 800e2c0:	61a3      	streq	r3, [r4, #24]
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f000 f820 	bl	800e308 <__sfp>
 800e2c8:	6060      	str	r0, [r4, #4]
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 f81c 	bl	800e308 <__sfp>
 800e2d0:	60a0      	str	r0, [r4, #8]
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 f818 	bl	800e308 <__sfp>
 800e2d8:	2200      	movs	r2, #0
 800e2da:	60e0      	str	r0, [r4, #12]
 800e2dc:	2104      	movs	r1, #4
 800e2de:	6860      	ldr	r0, [r4, #4]
 800e2e0:	f7ff ff82 	bl	800e1e8 <std>
 800e2e4:	68a0      	ldr	r0, [r4, #8]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	2109      	movs	r1, #9
 800e2ea:	f7ff ff7d 	bl	800e1e8 <std>
 800e2ee:	68e0      	ldr	r0, [r4, #12]
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	2112      	movs	r1, #18
 800e2f4:	f7ff ff78 	bl	800e1e8 <std>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	61a3      	str	r3, [r4, #24]
 800e2fc:	e7d2      	b.n	800e2a4 <__sinit+0xc>
 800e2fe:	bf00      	nop
 800e300:	08011c98 	.word	0x08011c98
 800e304:	0800e231 	.word	0x0800e231

0800e308 <__sfp>:
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	4607      	mov	r7, r0
 800e30c:	f7ff ffac 	bl	800e268 <__sfp_lock_acquire>
 800e310:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <__sfp+0x84>)
 800e312:	681e      	ldr	r6, [r3, #0]
 800e314:	69b3      	ldr	r3, [r6, #24]
 800e316:	b913      	cbnz	r3, 800e31e <__sfp+0x16>
 800e318:	4630      	mov	r0, r6
 800e31a:	f7ff ffbd 	bl	800e298 <__sinit>
 800e31e:	3648      	adds	r6, #72	; 0x48
 800e320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e324:	3b01      	subs	r3, #1
 800e326:	d503      	bpl.n	800e330 <__sfp+0x28>
 800e328:	6833      	ldr	r3, [r6, #0]
 800e32a:	b30b      	cbz	r3, 800e370 <__sfp+0x68>
 800e32c:	6836      	ldr	r6, [r6, #0]
 800e32e:	e7f7      	b.n	800e320 <__sfp+0x18>
 800e330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e334:	b9d5      	cbnz	r5, 800e36c <__sfp+0x64>
 800e336:	4b16      	ldr	r3, [pc, #88]	; (800e390 <__sfp+0x88>)
 800e338:	60e3      	str	r3, [r4, #12]
 800e33a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e33e:	6665      	str	r5, [r4, #100]	; 0x64
 800e340:	f000 f859 	bl	800e3f6 <__retarget_lock_init_recursive>
 800e344:	f7ff ff96 	bl	800e274 <__sfp_lock_release>
 800e348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e350:	6025      	str	r5, [r4, #0]
 800e352:	61a5      	str	r5, [r4, #24]
 800e354:	2208      	movs	r2, #8
 800e356:	4629      	mov	r1, r5
 800e358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e35c:	f7ff fec8 	bl	800e0f0 <memset>
 800e360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e368:	4620      	mov	r0, r4
 800e36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e36c:	3468      	adds	r4, #104	; 0x68
 800e36e:	e7d9      	b.n	800e324 <__sfp+0x1c>
 800e370:	2104      	movs	r1, #4
 800e372:	4638      	mov	r0, r7
 800e374:	f7ff ff62 	bl	800e23c <__sfmoreglue>
 800e378:	4604      	mov	r4, r0
 800e37a:	6030      	str	r0, [r6, #0]
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d1d5      	bne.n	800e32c <__sfp+0x24>
 800e380:	f7ff ff78 	bl	800e274 <__sfp_lock_release>
 800e384:	230c      	movs	r3, #12
 800e386:	603b      	str	r3, [r7, #0]
 800e388:	e7ee      	b.n	800e368 <__sfp+0x60>
 800e38a:	bf00      	nop
 800e38c:	08011c98 	.word	0x08011c98
 800e390:	ffff0001 	.word	0xffff0001

0800e394 <fiprintf>:
 800e394:	b40e      	push	{r1, r2, r3}
 800e396:	b503      	push	{r0, r1, lr}
 800e398:	4601      	mov	r1, r0
 800e39a:	ab03      	add	r3, sp, #12
 800e39c:	4805      	ldr	r0, [pc, #20]	; (800e3b4 <fiprintf+0x20>)
 800e39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a2:	6800      	ldr	r0, [r0, #0]
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	f000 f93b 	bl	800e620 <_vfiprintf_r>
 800e3aa:	b002      	add	sp, #8
 800e3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3b0:	b003      	add	sp, #12
 800e3b2:	4770      	bx	lr
 800e3b4:	24000030 	.word	0x24000030

0800e3b8 <_fwalk_reent>:
 800e3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	4606      	mov	r6, r0
 800e3be:	4688      	mov	r8, r1
 800e3c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3c4:	2700      	movs	r7, #0
 800e3c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3ca:	f1b9 0901 	subs.w	r9, r9, #1
 800e3ce:	d505      	bpl.n	800e3dc <_fwalk_reent+0x24>
 800e3d0:	6824      	ldr	r4, [r4, #0]
 800e3d2:	2c00      	cmp	r4, #0
 800e3d4:	d1f7      	bne.n	800e3c6 <_fwalk_reent+0xe>
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3dc:	89ab      	ldrh	r3, [r5, #12]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d907      	bls.n	800e3f2 <_fwalk_reent+0x3a>
 800e3e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	d003      	beq.n	800e3f2 <_fwalk_reent+0x3a>
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	47c0      	blx	r8
 800e3f0:	4307      	orrs	r7, r0
 800e3f2:	3568      	adds	r5, #104	; 0x68
 800e3f4:	e7e9      	b.n	800e3ca <_fwalk_reent+0x12>

0800e3f6 <__retarget_lock_init_recursive>:
 800e3f6:	4770      	bx	lr

0800e3f8 <__retarget_lock_acquire_recursive>:
 800e3f8:	4770      	bx	lr

0800e3fa <__retarget_lock_release_recursive>:
 800e3fa:	4770      	bx	lr

0800e3fc <malloc>:
 800e3fc:	4b02      	ldr	r3, [pc, #8]	; (800e408 <malloc+0xc>)
 800e3fe:	4601      	mov	r1, r0
 800e400:	6818      	ldr	r0, [r3, #0]
 800e402:	f000 b86f 	b.w	800e4e4 <_malloc_r>
 800e406:	bf00      	nop
 800e408:	24000030 	.word	0x24000030

0800e40c <_free_r>:
 800e40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e40e:	2900      	cmp	r1, #0
 800e410:	d044      	beq.n	800e49c <_free_r+0x90>
 800e412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e416:	9001      	str	r0, [sp, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f1a1 0404 	sub.w	r4, r1, #4
 800e41e:	bfb8      	it	lt
 800e420:	18e4      	addlt	r4, r4, r3
 800e422:	f000 fe39 	bl	800f098 <__malloc_lock>
 800e426:	4a1e      	ldr	r2, [pc, #120]	; (800e4a0 <_free_r+0x94>)
 800e428:	9801      	ldr	r0, [sp, #4]
 800e42a:	6813      	ldr	r3, [r2, #0]
 800e42c:	b933      	cbnz	r3, 800e43c <_free_r+0x30>
 800e42e:	6063      	str	r3, [r4, #4]
 800e430:	6014      	str	r4, [r2, #0]
 800e432:	b003      	add	sp, #12
 800e434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e438:	f000 be34 	b.w	800f0a4 <__malloc_unlock>
 800e43c:	42a3      	cmp	r3, r4
 800e43e:	d908      	bls.n	800e452 <_free_r+0x46>
 800e440:	6825      	ldr	r5, [r4, #0]
 800e442:	1961      	adds	r1, r4, r5
 800e444:	428b      	cmp	r3, r1
 800e446:	bf01      	itttt	eq
 800e448:	6819      	ldreq	r1, [r3, #0]
 800e44a:	685b      	ldreq	r3, [r3, #4]
 800e44c:	1949      	addeq	r1, r1, r5
 800e44e:	6021      	streq	r1, [r4, #0]
 800e450:	e7ed      	b.n	800e42e <_free_r+0x22>
 800e452:	461a      	mov	r2, r3
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	b10b      	cbz	r3, 800e45c <_free_r+0x50>
 800e458:	42a3      	cmp	r3, r4
 800e45a:	d9fa      	bls.n	800e452 <_free_r+0x46>
 800e45c:	6811      	ldr	r1, [r2, #0]
 800e45e:	1855      	adds	r5, r2, r1
 800e460:	42a5      	cmp	r5, r4
 800e462:	d10b      	bne.n	800e47c <_free_r+0x70>
 800e464:	6824      	ldr	r4, [r4, #0]
 800e466:	4421      	add	r1, r4
 800e468:	1854      	adds	r4, r2, r1
 800e46a:	42a3      	cmp	r3, r4
 800e46c:	6011      	str	r1, [r2, #0]
 800e46e:	d1e0      	bne.n	800e432 <_free_r+0x26>
 800e470:	681c      	ldr	r4, [r3, #0]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	6053      	str	r3, [r2, #4]
 800e476:	4421      	add	r1, r4
 800e478:	6011      	str	r1, [r2, #0]
 800e47a:	e7da      	b.n	800e432 <_free_r+0x26>
 800e47c:	d902      	bls.n	800e484 <_free_r+0x78>
 800e47e:	230c      	movs	r3, #12
 800e480:	6003      	str	r3, [r0, #0]
 800e482:	e7d6      	b.n	800e432 <_free_r+0x26>
 800e484:	6825      	ldr	r5, [r4, #0]
 800e486:	1961      	adds	r1, r4, r5
 800e488:	428b      	cmp	r3, r1
 800e48a:	bf04      	itt	eq
 800e48c:	6819      	ldreq	r1, [r3, #0]
 800e48e:	685b      	ldreq	r3, [r3, #4]
 800e490:	6063      	str	r3, [r4, #4]
 800e492:	bf04      	itt	eq
 800e494:	1949      	addeq	r1, r1, r5
 800e496:	6021      	streq	r1, [r4, #0]
 800e498:	6054      	str	r4, [r2, #4]
 800e49a:	e7ca      	b.n	800e432 <_free_r+0x26>
 800e49c:	b003      	add	sp, #12
 800e49e:	bd30      	pop	{r4, r5, pc}
 800e4a0:	2400329c 	.word	0x2400329c

0800e4a4 <sbrk_aligned>:
 800e4a4:	b570      	push	{r4, r5, r6, lr}
 800e4a6:	4e0e      	ldr	r6, [pc, #56]	; (800e4e0 <sbrk_aligned+0x3c>)
 800e4a8:	460c      	mov	r4, r1
 800e4aa:	6831      	ldr	r1, [r6, #0]
 800e4ac:	4605      	mov	r5, r0
 800e4ae:	b911      	cbnz	r1, 800e4b6 <sbrk_aligned+0x12>
 800e4b0:	f000 fb7a 	bl	800eba8 <_sbrk_r>
 800e4b4:	6030      	str	r0, [r6, #0]
 800e4b6:	4621      	mov	r1, r4
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f000 fb75 	bl	800eba8 <_sbrk_r>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	d00a      	beq.n	800e4d8 <sbrk_aligned+0x34>
 800e4c2:	1cc4      	adds	r4, r0, #3
 800e4c4:	f024 0403 	bic.w	r4, r4, #3
 800e4c8:	42a0      	cmp	r0, r4
 800e4ca:	d007      	beq.n	800e4dc <sbrk_aligned+0x38>
 800e4cc:	1a21      	subs	r1, r4, r0
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f000 fb6a 	bl	800eba8 <_sbrk_r>
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	d101      	bne.n	800e4dc <sbrk_aligned+0x38>
 800e4d8:	f04f 34ff 	mov.w	r4, #4294967295
 800e4dc:	4620      	mov	r0, r4
 800e4de:	bd70      	pop	{r4, r5, r6, pc}
 800e4e0:	240032a0 	.word	0x240032a0

0800e4e4 <_malloc_r>:
 800e4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e8:	1ccd      	adds	r5, r1, #3
 800e4ea:	f025 0503 	bic.w	r5, r5, #3
 800e4ee:	3508      	adds	r5, #8
 800e4f0:	2d0c      	cmp	r5, #12
 800e4f2:	bf38      	it	cc
 800e4f4:	250c      	movcc	r5, #12
 800e4f6:	2d00      	cmp	r5, #0
 800e4f8:	4607      	mov	r7, r0
 800e4fa:	db01      	blt.n	800e500 <_malloc_r+0x1c>
 800e4fc:	42a9      	cmp	r1, r5
 800e4fe:	d905      	bls.n	800e50c <_malloc_r+0x28>
 800e500:	230c      	movs	r3, #12
 800e502:	603b      	str	r3, [r7, #0]
 800e504:	2600      	movs	r6, #0
 800e506:	4630      	mov	r0, r6
 800e508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50c:	4e2e      	ldr	r6, [pc, #184]	; (800e5c8 <_malloc_r+0xe4>)
 800e50e:	f000 fdc3 	bl	800f098 <__malloc_lock>
 800e512:	6833      	ldr	r3, [r6, #0]
 800e514:	461c      	mov	r4, r3
 800e516:	bb34      	cbnz	r4, 800e566 <_malloc_r+0x82>
 800e518:	4629      	mov	r1, r5
 800e51a:	4638      	mov	r0, r7
 800e51c:	f7ff ffc2 	bl	800e4a4 <sbrk_aligned>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	4604      	mov	r4, r0
 800e524:	d14d      	bne.n	800e5c2 <_malloc_r+0xde>
 800e526:	6834      	ldr	r4, [r6, #0]
 800e528:	4626      	mov	r6, r4
 800e52a:	2e00      	cmp	r6, #0
 800e52c:	d140      	bne.n	800e5b0 <_malloc_r+0xcc>
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	4631      	mov	r1, r6
 800e532:	4638      	mov	r0, r7
 800e534:	eb04 0803 	add.w	r8, r4, r3
 800e538:	f000 fb36 	bl	800eba8 <_sbrk_r>
 800e53c:	4580      	cmp	r8, r0
 800e53e:	d13a      	bne.n	800e5b6 <_malloc_r+0xd2>
 800e540:	6821      	ldr	r1, [r4, #0]
 800e542:	3503      	adds	r5, #3
 800e544:	1a6d      	subs	r5, r5, r1
 800e546:	f025 0503 	bic.w	r5, r5, #3
 800e54a:	3508      	adds	r5, #8
 800e54c:	2d0c      	cmp	r5, #12
 800e54e:	bf38      	it	cc
 800e550:	250c      	movcc	r5, #12
 800e552:	4629      	mov	r1, r5
 800e554:	4638      	mov	r0, r7
 800e556:	f7ff ffa5 	bl	800e4a4 <sbrk_aligned>
 800e55a:	3001      	adds	r0, #1
 800e55c:	d02b      	beq.n	800e5b6 <_malloc_r+0xd2>
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	442b      	add	r3, r5
 800e562:	6023      	str	r3, [r4, #0]
 800e564:	e00e      	b.n	800e584 <_malloc_r+0xa0>
 800e566:	6822      	ldr	r2, [r4, #0]
 800e568:	1b52      	subs	r2, r2, r5
 800e56a:	d41e      	bmi.n	800e5aa <_malloc_r+0xc6>
 800e56c:	2a0b      	cmp	r2, #11
 800e56e:	d916      	bls.n	800e59e <_malloc_r+0xba>
 800e570:	1961      	adds	r1, r4, r5
 800e572:	42a3      	cmp	r3, r4
 800e574:	6025      	str	r5, [r4, #0]
 800e576:	bf18      	it	ne
 800e578:	6059      	strne	r1, [r3, #4]
 800e57a:	6863      	ldr	r3, [r4, #4]
 800e57c:	bf08      	it	eq
 800e57e:	6031      	streq	r1, [r6, #0]
 800e580:	5162      	str	r2, [r4, r5]
 800e582:	604b      	str	r3, [r1, #4]
 800e584:	4638      	mov	r0, r7
 800e586:	f104 060b 	add.w	r6, r4, #11
 800e58a:	f000 fd8b 	bl	800f0a4 <__malloc_unlock>
 800e58e:	f026 0607 	bic.w	r6, r6, #7
 800e592:	1d23      	adds	r3, r4, #4
 800e594:	1af2      	subs	r2, r6, r3
 800e596:	d0b6      	beq.n	800e506 <_malloc_r+0x22>
 800e598:	1b9b      	subs	r3, r3, r6
 800e59a:	50a3      	str	r3, [r4, r2]
 800e59c:	e7b3      	b.n	800e506 <_malloc_r+0x22>
 800e59e:	6862      	ldr	r2, [r4, #4]
 800e5a0:	42a3      	cmp	r3, r4
 800e5a2:	bf0c      	ite	eq
 800e5a4:	6032      	streq	r2, [r6, #0]
 800e5a6:	605a      	strne	r2, [r3, #4]
 800e5a8:	e7ec      	b.n	800e584 <_malloc_r+0xa0>
 800e5aa:	4623      	mov	r3, r4
 800e5ac:	6864      	ldr	r4, [r4, #4]
 800e5ae:	e7b2      	b.n	800e516 <_malloc_r+0x32>
 800e5b0:	4634      	mov	r4, r6
 800e5b2:	6876      	ldr	r6, [r6, #4]
 800e5b4:	e7b9      	b.n	800e52a <_malloc_r+0x46>
 800e5b6:	230c      	movs	r3, #12
 800e5b8:	603b      	str	r3, [r7, #0]
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	f000 fd72 	bl	800f0a4 <__malloc_unlock>
 800e5c0:	e7a1      	b.n	800e506 <_malloc_r+0x22>
 800e5c2:	6025      	str	r5, [r4, #0]
 800e5c4:	e7de      	b.n	800e584 <_malloc_r+0xa0>
 800e5c6:	bf00      	nop
 800e5c8:	2400329c 	.word	0x2400329c

0800e5cc <__sfputc_r>:
 800e5cc:	6893      	ldr	r3, [r2, #8]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	b410      	push	{r4}
 800e5d4:	6093      	str	r3, [r2, #8]
 800e5d6:	da08      	bge.n	800e5ea <__sfputc_r+0x1e>
 800e5d8:	6994      	ldr	r4, [r2, #24]
 800e5da:	42a3      	cmp	r3, r4
 800e5dc:	db01      	blt.n	800e5e2 <__sfputc_r+0x16>
 800e5de:	290a      	cmp	r1, #10
 800e5e0:	d103      	bne.n	800e5ea <__sfputc_r+0x1e>
 800e5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e6:	f000 bb33 	b.w	800ec50 <__swbuf_r>
 800e5ea:	6813      	ldr	r3, [r2, #0]
 800e5ec:	1c58      	adds	r0, r3, #1
 800e5ee:	6010      	str	r0, [r2, #0]
 800e5f0:	7019      	strb	r1, [r3, #0]
 800e5f2:	4608      	mov	r0, r1
 800e5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <__sfputs_r>:
 800e5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5fc:	4606      	mov	r6, r0
 800e5fe:	460f      	mov	r7, r1
 800e600:	4614      	mov	r4, r2
 800e602:	18d5      	adds	r5, r2, r3
 800e604:	42ac      	cmp	r4, r5
 800e606:	d101      	bne.n	800e60c <__sfputs_r+0x12>
 800e608:	2000      	movs	r0, #0
 800e60a:	e007      	b.n	800e61c <__sfputs_r+0x22>
 800e60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e610:	463a      	mov	r2, r7
 800e612:	4630      	mov	r0, r6
 800e614:	f7ff ffda 	bl	800e5cc <__sfputc_r>
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	d1f3      	bne.n	800e604 <__sfputs_r+0xa>
 800e61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e620 <_vfiprintf_r>:
 800e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	460d      	mov	r5, r1
 800e626:	b09d      	sub	sp, #116	; 0x74
 800e628:	4614      	mov	r4, r2
 800e62a:	4698      	mov	r8, r3
 800e62c:	4606      	mov	r6, r0
 800e62e:	b118      	cbz	r0, 800e638 <_vfiprintf_r+0x18>
 800e630:	6983      	ldr	r3, [r0, #24]
 800e632:	b90b      	cbnz	r3, 800e638 <_vfiprintf_r+0x18>
 800e634:	f7ff fe30 	bl	800e298 <__sinit>
 800e638:	4b89      	ldr	r3, [pc, #548]	; (800e860 <_vfiprintf_r+0x240>)
 800e63a:	429d      	cmp	r5, r3
 800e63c:	d11b      	bne.n	800e676 <_vfiprintf_r+0x56>
 800e63e:	6875      	ldr	r5, [r6, #4]
 800e640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e642:	07d9      	lsls	r1, r3, #31
 800e644:	d405      	bmi.n	800e652 <_vfiprintf_r+0x32>
 800e646:	89ab      	ldrh	r3, [r5, #12]
 800e648:	059a      	lsls	r2, r3, #22
 800e64a:	d402      	bmi.n	800e652 <_vfiprintf_r+0x32>
 800e64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e64e:	f7ff fed3 	bl	800e3f8 <__retarget_lock_acquire_recursive>
 800e652:	89ab      	ldrh	r3, [r5, #12]
 800e654:	071b      	lsls	r3, r3, #28
 800e656:	d501      	bpl.n	800e65c <_vfiprintf_r+0x3c>
 800e658:	692b      	ldr	r3, [r5, #16]
 800e65a:	b9eb      	cbnz	r3, 800e698 <_vfiprintf_r+0x78>
 800e65c:	4629      	mov	r1, r5
 800e65e:	4630      	mov	r0, r6
 800e660:	f000 fb5a 	bl	800ed18 <__swsetup_r>
 800e664:	b1c0      	cbz	r0, 800e698 <_vfiprintf_r+0x78>
 800e666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e668:	07dc      	lsls	r4, r3, #31
 800e66a:	d50e      	bpl.n	800e68a <_vfiprintf_r+0x6a>
 800e66c:	f04f 30ff 	mov.w	r0, #4294967295
 800e670:	b01d      	add	sp, #116	; 0x74
 800e672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e676:	4b7b      	ldr	r3, [pc, #492]	; (800e864 <_vfiprintf_r+0x244>)
 800e678:	429d      	cmp	r5, r3
 800e67a:	d101      	bne.n	800e680 <_vfiprintf_r+0x60>
 800e67c:	68b5      	ldr	r5, [r6, #8]
 800e67e:	e7df      	b.n	800e640 <_vfiprintf_r+0x20>
 800e680:	4b79      	ldr	r3, [pc, #484]	; (800e868 <_vfiprintf_r+0x248>)
 800e682:	429d      	cmp	r5, r3
 800e684:	bf08      	it	eq
 800e686:	68f5      	ldreq	r5, [r6, #12]
 800e688:	e7da      	b.n	800e640 <_vfiprintf_r+0x20>
 800e68a:	89ab      	ldrh	r3, [r5, #12]
 800e68c:	0598      	lsls	r0, r3, #22
 800e68e:	d4ed      	bmi.n	800e66c <_vfiprintf_r+0x4c>
 800e690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e692:	f7ff feb2 	bl	800e3fa <__retarget_lock_release_recursive>
 800e696:	e7e9      	b.n	800e66c <_vfiprintf_r+0x4c>
 800e698:	2300      	movs	r3, #0
 800e69a:	9309      	str	r3, [sp, #36]	; 0x24
 800e69c:	2320      	movs	r3, #32
 800e69e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6a6:	2330      	movs	r3, #48	; 0x30
 800e6a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e86c <_vfiprintf_r+0x24c>
 800e6ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6b0:	f04f 0901 	mov.w	r9, #1
 800e6b4:	4623      	mov	r3, r4
 800e6b6:	469a      	mov	sl, r3
 800e6b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6bc:	b10a      	cbz	r2, 800e6c2 <_vfiprintf_r+0xa2>
 800e6be:	2a25      	cmp	r2, #37	; 0x25
 800e6c0:	d1f9      	bne.n	800e6b6 <_vfiprintf_r+0x96>
 800e6c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e6c6:	d00b      	beq.n	800e6e0 <_vfiprintf_r+0xc0>
 800e6c8:	465b      	mov	r3, fp
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff ff93 	bl	800e5fa <__sfputs_r>
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	f000 80aa 	beq.w	800e82e <_vfiprintf_r+0x20e>
 800e6da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6dc:	445a      	add	r2, fp
 800e6de:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f000 80a2 	beq.w	800e82e <_vfiprintf_r+0x20e>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6f4:	f10a 0a01 	add.w	sl, sl, #1
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e700:	931a      	str	r3, [sp, #104]	; 0x68
 800e702:	4654      	mov	r4, sl
 800e704:	2205      	movs	r2, #5
 800e706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70a:	4858      	ldr	r0, [pc, #352]	; (800e86c <_vfiprintf_r+0x24c>)
 800e70c:	f7f1 fe00 	bl	8000310 <memchr>
 800e710:	9a04      	ldr	r2, [sp, #16]
 800e712:	b9d8      	cbnz	r0, 800e74c <_vfiprintf_r+0x12c>
 800e714:	06d1      	lsls	r1, r2, #27
 800e716:	bf44      	itt	mi
 800e718:	2320      	movmi	r3, #32
 800e71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e71e:	0713      	lsls	r3, r2, #28
 800e720:	bf44      	itt	mi
 800e722:	232b      	movmi	r3, #43	; 0x2b
 800e724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e728:	f89a 3000 	ldrb.w	r3, [sl]
 800e72c:	2b2a      	cmp	r3, #42	; 0x2a
 800e72e:	d015      	beq.n	800e75c <_vfiprintf_r+0x13c>
 800e730:	9a07      	ldr	r2, [sp, #28]
 800e732:	4654      	mov	r4, sl
 800e734:	2000      	movs	r0, #0
 800e736:	f04f 0c0a 	mov.w	ip, #10
 800e73a:	4621      	mov	r1, r4
 800e73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e740:	3b30      	subs	r3, #48	; 0x30
 800e742:	2b09      	cmp	r3, #9
 800e744:	d94e      	bls.n	800e7e4 <_vfiprintf_r+0x1c4>
 800e746:	b1b0      	cbz	r0, 800e776 <_vfiprintf_r+0x156>
 800e748:	9207      	str	r2, [sp, #28]
 800e74a:	e014      	b.n	800e776 <_vfiprintf_r+0x156>
 800e74c:	eba0 0308 	sub.w	r3, r0, r8
 800e750:	fa09 f303 	lsl.w	r3, r9, r3
 800e754:	4313      	orrs	r3, r2
 800e756:	9304      	str	r3, [sp, #16]
 800e758:	46a2      	mov	sl, r4
 800e75a:	e7d2      	b.n	800e702 <_vfiprintf_r+0xe2>
 800e75c:	9b03      	ldr	r3, [sp, #12]
 800e75e:	1d19      	adds	r1, r3, #4
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	9103      	str	r1, [sp, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	bfbb      	ittet	lt
 800e768:	425b      	neglt	r3, r3
 800e76a:	f042 0202 	orrlt.w	r2, r2, #2
 800e76e:	9307      	strge	r3, [sp, #28]
 800e770:	9307      	strlt	r3, [sp, #28]
 800e772:	bfb8      	it	lt
 800e774:	9204      	strlt	r2, [sp, #16]
 800e776:	7823      	ldrb	r3, [r4, #0]
 800e778:	2b2e      	cmp	r3, #46	; 0x2e
 800e77a:	d10c      	bne.n	800e796 <_vfiprintf_r+0x176>
 800e77c:	7863      	ldrb	r3, [r4, #1]
 800e77e:	2b2a      	cmp	r3, #42	; 0x2a
 800e780:	d135      	bne.n	800e7ee <_vfiprintf_r+0x1ce>
 800e782:	9b03      	ldr	r3, [sp, #12]
 800e784:	1d1a      	adds	r2, r3, #4
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	9203      	str	r2, [sp, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bfb8      	it	lt
 800e78e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e792:	3402      	adds	r4, #2
 800e794:	9305      	str	r3, [sp, #20]
 800e796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e87c <_vfiprintf_r+0x25c>
 800e79a:	7821      	ldrb	r1, [r4, #0]
 800e79c:	2203      	movs	r2, #3
 800e79e:	4650      	mov	r0, sl
 800e7a0:	f7f1 fdb6 	bl	8000310 <memchr>
 800e7a4:	b140      	cbz	r0, 800e7b8 <_vfiprintf_r+0x198>
 800e7a6:	2340      	movs	r3, #64	; 0x40
 800e7a8:	eba0 000a 	sub.w	r0, r0, sl
 800e7ac:	fa03 f000 	lsl.w	r0, r3, r0
 800e7b0:	9b04      	ldr	r3, [sp, #16]
 800e7b2:	4303      	orrs	r3, r0
 800e7b4:	3401      	adds	r4, #1
 800e7b6:	9304      	str	r3, [sp, #16]
 800e7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7bc:	482c      	ldr	r0, [pc, #176]	; (800e870 <_vfiprintf_r+0x250>)
 800e7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7c2:	2206      	movs	r2, #6
 800e7c4:	f7f1 fda4 	bl	8000310 <memchr>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d03f      	beq.n	800e84c <_vfiprintf_r+0x22c>
 800e7cc:	4b29      	ldr	r3, [pc, #164]	; (800e874 <_vfiprintf_r+0x254>)
 800e7ce:	bb1b      	cbnz	r3, 800e818 <_vfiprintf_r+0x1f8>
 800e7d0:	9b03      	ldr	r3, [sp, #12]
 800e7d2:	3307      	adds	r3, #7
 800e7d4:	f023 0307 	bic.w	r3, r3, #7
 800e7d8:	3308      	adds	r3, #8
 800e7da:	9303      	str	r3, [sp, #12]
 800e7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7de:	443b      	add	r3, r7
 800e7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e2:	e767      	b.n	800e6b4 <_vfiprintf_r+0x94>
 800e7e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	e7a5      	b.n	800e73a <_vfiprintf_r+0x11a>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	3401      	adds	r4, #1
 800e7f2:	9305      	str	r3, [sp, #20]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	f04f 0c0a 	mov.w	ip, #10
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e800:	3a30      	subs	r2, #48	; 0x30
 800e802:	2a09      	cmp	r2, #9
 800e804:	d903      	bls.n	800e80e <_vfiprintf_r+0x1ee>
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0c5      	beq.n	800e796 <_vfiprintf_r+0x176>
 800e80a:	9105      	str	r1, [sp, #20]
 800e80c:	e7c3      	b.n	800e796 <_vfiprintf_r+0x176>
 800e80e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e812:	4604      	mov	r4, r0
 800e814:	2301      	movs	r3, #1
 800e816:	e7f0      	b.n	800e7fa <_vfiprintf_r+0x1da>
 800e818:	ab03      	add	r3, sp, #12
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	462a      	mov	r2, r5
 800e81e:	4b16      	ldr	r3, [pc, #88]	; (800e878 <_vfiprintf_r+0x258>)
 800e820:	a904      	add	r1, sp, #16
 800e822:	4630      	mov	r0, r6
 800e824:	f3af 8000 	nop.w
 800e828:	4607      	mov	r7, r0
 800e82a:	1c78      	adds	r0, r7, #1
 800e82c:	d1d6      	bne.n	800e7dc <_vfiprintf_r+0x1bc>
 800e82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e830:	07d9      	lsls	r1, r3, #31
 800e832:	d405      	bmi.n	800e840 <_vfiprintf_r+0x220>
 800e834:	89ab      	ldrh	r3, [r5, #12]
 800e836:	059a      	lsls	r2, r3, #22
 800e838:	d402      	bmi.n	800e840 <_vfiprintf_r+0x220>
 800e83a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e83c:	f7ff fddd 	bl	800e3fa <__retarget_lock_release_recursive>
 800e840:	89ab      	ldrh	r3, [r5, #12]
 800e842:	065b      	lsls	r3, r3, #25
 800e844:	f53f af12 	bmi.w	800e66c <_vfiprintf_r+0x4c>
 800e848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e84a:	e711      	b.n	800e670 <_vfiprintf_r+0x50>
 800e84c:	ab03      	add	r3, sp, #12
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	462a      	mov	r2, r5
 800e852:	4b09      	ldr	r3, [pc, #36]	; (800e878 <_vfiprintf_r+0x258>)
 800e854:	a904      	add	r1, sp, #16
 800e856:	4630      	mov	r0, r6
 800e858:	f000 f880 	bl	800e95c <_printf_i>
 800e85c:	e7e4      	b.n	800e828 <_vfiprintf_r+0x208>
 800e85e:	bf00      	nop
 800e860:	08011d6c 	.word	0x08011d6c
 800e864:	08011d8c 	.word	0x08011d8c
 800e868:	08011d4c 	.word	0x08011d4c
 800e86c:	08011dac 	.word	0x08011dac
 800e870:	08011db6 	.word	0x08011db6
 800e874:	00000000 	.word	0x00000000
 800e878:	0800e5fb 	.word	0x0800e5fb
 800e87c:	08011db2 	.word	0x08011db2

0800e880 <_printf_common>:
 800e880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e884:	4616      	mov	r6, r2
 800e886:	4699      	mov	r9, r3
 800e888:	688a      	ldr	r2, [r1, #8]
 800e88a:	690b      	ldr	r3, [r1, #16]
 800e88c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e890:	4293      	cmp	r3, r2
 800e892:	bfb8      	it	lt
 800e894:	4613      	movlt	r3, r2
 800e896:	6033      	str	r3, [r6, #0]
 800e898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e89c:	4607      	mov	r7, r0
 800e89e:	460c      	mov	r4, r1
 800e8a0:	b10a      	cbz	r2, 800e8a6 <_printf_common+0x26>
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	6033      	str	r3, [r6, #0]
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	0699      	lsls	r1, r3, #26
 800e8aa:	bf42      	ittt	mi
 800e8ac:	6833      	ldrmi	r3, [r6, #0]
 800e8ae:	3302      	addmi	r3, #2
 800e8b0:	6033      	strmi	r3, [r6, #0]
 800e8b2:	6825      	ldr	r5, [r4, #0]
 800e8b4:	f015 0506 	ands.w	r5, r5, #6
 800e8b8:	d106      	bne.n	800e8c8 <_printf_common+0x48>
 800e8ba:	f104 0a19 	add.w	sl, r4, #25
 800e8be:	68e3      	ldr	r3, [r4, #12]
 800e8c0:	6832      	ldr	r2, [r6, #0]
 800e8c2:	1a9b      	subs	r3, r3, r2
 800e8c4:	42ab      	cmp	r3, r5
 800e8c6:	dc26      	bgt.n	800e916 <_printf_common+0x96>
 800e8c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e8cc:	1e13      	subs	r3, r2, #0
 800e8ce:	6822      	ldr	r2, [r4, #0]
 800e8d0:	bf18      	it	ne
 800e8d2:	2301      	movne	r3, #1
 800e8d4:	0692      	lsls	r2, r2, #26
 800e8d6:	d42b      	bmi.n	800e930 <_printf_common+0xb0>
 800e8d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8dc:	4649      	mov	r1, r9
 800e8de:	4638      	mov	r0, r7
 800e8e0:	47c0      	blx	r8
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	d01e      	beq.n	800e924 <_printf_common+0xa4>
 800e8e6:	6823      	ldr	r3, [r4, #0]
 800e8e8:	68e5      	ldr	r5, [r4, #12]
 800e8ea:	6832      	ldr	r2, [r6, #0]
 800e8ec:	f003 0306 	and.w	r3, r3, #6
 800e8f0:	2b04      	cmp	r3, #4
 800e8f2:	bf08      	it	eq
 800e8f4:	1aad      	subeq	r5, r5, r2
 800e8f6:	68a3      	ldr	r3, [r4, #8]
 800e8f8:	6922      	ldr	r2, [r4, #16]
 800e8fa:	bf0c      	ite	eq
 800e8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e900:	2500      	movne	r5, #0
 800e902:	4293      	cmp	r3, r2
 800e904:	bfc4      	itt	gt
 800e906:	1a9b      	subgt	r3, r3, r2
 800e908:	18ed      	addgt	r5, r5, r3
 800e90a:	2600      	movs	r6, #0
 800e90c:	341a      	adds	r4, #26
 800e90e:	42b5      	cmp	r5, r6
 800e910:	d11a      	bne.n	800e948 <_printf_common+0xc8>
 800e912:	2000      	movs	r0, #0
 800e914:	e008      	b.n	800e928 <_printf_common+0xa8>
 800e916:	2301      	movs	r3, #1
 800e918:	4652      	mov	r2, sl
 800e91a:	4649      	mov	r1, r9
 800e91c:	4638      	mov	r0, r7
 800e91e:	47c0      	blx	r8
 800e920:	3001      	adds	r0, #1
 800e922:	d103      	bne.n	800e92c <_printf_common+0xac>
 800e924:	f04f 30ff 	mov.w	r0, #4294967295
 800e928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e92c:	3501      	adds	r5, #1
 800e92e:	e7c6      	b.n	800e8be <_printf_common+0x3e>
 800e930:	18e1      	adds	r1, r4, r3
 800e932:	1c5a      	adds	r2, r3, #1
 800e934:	2030      	movs	r0, #48	; 0x30
 800e936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e93a:	4422      	add	r2, r4
 800e93c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e944:	3302      	adds	r3, #2
 800e946:	e7c7      	b.n	800e8d8 <_printf_common+0x58>
 800e948:	2301      	movs	r3, #1
 800e94a:	4622      	mov	r2, r4
 800e94c:	4649      	mov	r1, r9
 800e94e:	4638      	mov	r0, r7
 800e950:	47c0      	blx	r8
 800e952:	3001      	adds	r0, #1
 800e954:	d0e6      	beq.n	800e924 <_printf_common+0xa4>
 800e956:	3601      	adds	r6, #1
 800e958:	e7d9      	b.n	800e90e <_printf_common+0x8e>
	...

0800e95c <_printf_i>:
 800e95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e960:	7e0f      	ldrb	r7, [r1, #24]
 800e962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e964:	2f78      	cmp	r7, #120	; 0x78
 800e966:	4691      	mov	r9, r2
 800e968:	4680      	mov	r8, r0
 800e96a:	460c      	mov	r4, r1
 800e96c:	469a      	mov	sl, r3
 800e96e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e972:	d807      	bhi.n	800e984 <_printf_i+0x28>
 800e974:	2f62      	cmp	r7, #98	; 0x62
 800e976:	d80a      	bhi.n	800e98e <_printf_i+0x32>
 800e978:	2f00      	cmp	r7, #0
 800e97a:	f000 80d8 	beq.w	800eb2e <_printf_i+0x1d2>
 800e97e:	2f58      	cmp	r7, #88	; 0x58
 800e980:	f000 80a3 	beq.w	800eaca <_printf_i+0x16e>
 800e984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e98c:	e03a      	b.n	800ea04 <_printf_i+0xa8>
 800e98e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e992:	2b15      	cmp	r3, #21
 800e994:	d8f6      	bhi.n	800e984 <_printf_i+0x28>
 800e996:	a101      	add	r1, pc, #4	; (adr r1, 800e99c <_printf_i+0x40>)
 800e998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e99c:	0800e9f5 	.word	0x0800e9f5
 800e9a0:	0800ea09 	.word	0x0800ea09
 800e9a4:	0800e985 	.word	0x0800e985
 800e9a8:	0800e985 	.word	0x0800e985
 800e9ac:	0800e985 	.word	0x0800e985
 800e9b0:	0800e985 	.word	0x0800e985
 800e9b4:	0800ea09 	.word	0x0800ea09
 800e9b8:	0800e985 	.word	0x0800e985
 800e9bc:	0800e985 	.word	0x0800e985
 800e9c0:	0800e985 	.word	0x0800e985
 800e9c4:	0800e985 	.word	0x0800e985
 800e9c8:	0800eb15 	.word	0x0800eb15
 800e9cc:	0800ea39 	.word	0x0800ea39
 800e9d0:	0800eaf7 	.word	0x0800eaf7
 800e9d4:	0800e985 	.word	0x0800e985
 800e9d8:	0800e985 	.word	0x0800e985
 800e9dc:	0800eb37 	.word	0x0800eb37
 800e9e0:	0800e985 	.word	0x0800e985
 800e9e4:	0800ea39 	.word	0x0800ea39
 800e9e8:	0800e985 	.word	0x0800e985
 800e9ec:	0800e985 	.word	0x0800e985
 800e9f0:	0800eaff 	.word	0x0800eaff
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	1d1a      	adds	r2, r3, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	602a      	str	r2, [r5, #0]
 800e9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea04:	2301      	movs	r3, #1
 800ea06:	e0a3      	b.n	800eb50 <_printf_i+0x1f4>
 800ea08:	6820      	ldr	r0, [r4, #0]
 800ea0a:	6829      	ldr	r1, [r5, #0]
 800ea0c:	0606      	lsls	r6, r0, #24
 800ea0e:	f101 0304 	add.w	r3, r1, #4
 800ea12:	d50a      	bpl.n	800ea2a <_printf_i+0xce>
 800ea14:	680e      	ldr	r6, [r1, #0]
 800ea16:	602b      	str	r3, [r5, #0]
 800ea18:	2e00      	cmp	r6, #0
 800ea1a:	da03      	bge.n	800ea24 <_printf_i+0xc8>
 800ea1c:	232d      	movs	r3, #45	; 0x2d
 800ea1e:	4276      	negs	r6, r6
 800ea20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea24:	485e      	ldr	r0, [pc, #376]	; (800eba0 <_printf_i+0x244>)
 800ea26:	230a      	movs	r3, #10
 800ea28:	e019      	b.n	800ea5e <_printf_i+0x102>
 800ea2a:	680e      	ldr	r6, [r1, #0]
 800ea2c:	602b      	str	r3, [r5, #0]
 800ea2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea32:	bf18      	it	ne
 800ea34:	b236      	sxthne	r6, r6
 800ea36:	e7ef      	b.n	800ea18 <_printf_i+0xbc>
 800ea38:	682b      	ldr	r3, [r5, #0]
 800ea3a:	6820      	ldr	r0, [r4, #0]
 800ea3c:	1d19      	adds	r1, r3, #4
 800ea3e:	6029      	str	r1, [r5, #0]
 800ea40:	0601      	lsls	r1, r0, #24
 800ea42:	d501      	bpl.n	800ea48 <_printf_i+0xec>
 800ea44:	681e      	ldr	r6, [r3, #0]
 800ea46:	e002      	b.n	800ea4e <_printf_i+0xf2>
 800ea48:	0646      	lsls	r6, r0, #25
 800ea4a:	d5fb      	bpl.n	800ea44 <_printf_i+0xe8>
 800ea4c:	881e      	ldrh	r6, [r3, #0]
 800ea4e:	4854      	ldr	r0, [pc, #336]	; (800eba0 <_printf_i+0x244>)
 800ea50:	2f6f      	cmp	r7, #111	; 0x6f
 800ea52:	bf0c      	ite	eq
 800ea54:	2308      	moveq	r3, #8
 800ea56:	230a      	movne	r3, #10
 800ea58:	2100      	movs	r1, #0
 800ea5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea5e:	6865      	ldr	r5, [r4, #4]
 800ea60:	60a5      	str	r5, [r4, #8]
 800ea62:	2d00      	cmp	r5, #0
 800ea64:	bfa2      	ittt	ge
 800ea66:	6821      	ldrge	r1, [r4, #0]
 800ea68:	f021 0104 	bicge.w	r1, r1, #4
 800ea6c:	6021      	strge	r1, [r4, #0]
 800ea6e:	b90e      	cbnz	r6, 800ea74 <_printf_i+0x118>
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	d04d      	beq.n	800eb10 <_printf_i+0x1b4>
 800ea74:	4615      	mov	r5, r2
 800ea76:	fbb6 f1f3 	udiv	r1, r6, r3
 800ea7a:	fb03 6711 	mls	r7, r3, r1, r6
 800ea7e:	5dc7      	ldrb	r7, [r0, r7]
 800ea80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ea84:	4637      	mov	r7, r6
 800ea86:	42bb      	cmp	r3, r7
 800ea88:	460e      	mov	r6, r1
 800ea8a:	d9f4      	bls.n	800ea76 <_printf_i+0x11a>
 800ea8c:	2b08      	cmp	r3, #8
 800ea8e:	d10b      	bne.n	800eaa8 <_printf_i+0x14c>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	07de      	lsls	r6, r3, #31
 800ea94:	d508      	bpl.n	800eaa8 <_printf_i+0x14c>
 800ea96:	6923      	ldr	r3, [r4, #16]
 800ea98:	6861      	ldr	r1, [r4, #4]
 800ea9a:	4299      	cmp	r1, r3
 800ea9c:	bfde      	ittt	le
 800ea9e:	2330      	movle	r3, #48	; 0x30
 800eaa0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eaa4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eaa8:	1b52      	subs	r2, r2, r5
 800eaaa:	6122      	str	r2, [r4, #16]
 800eaac:	f8cd a000 	str.w	sl, [sp]
 800eab0:	464b      	mov	r3, r9
 800eab2:	aa03      	add	r2, sp, #12
 800eab4:	4621      	mov	r1, r4
 800eab6:	4640      	mov	r0, r8
 800eab8:	f7ff fee2 	bl	800e880 <_printf_common>
 800eabc:	3001      	adds	r0, #1
 800eabe:	d14c      	bne.n	800eb5a <_printf_i+0x1fe>
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	b004      	add	sp, #16
 800eac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaca:	4835      	ldr	r0, [pc, #212]	; (800eba0 <_printf_i+0x244>)
 800eacc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ead0:	6829      	ldr	r1, [r5, #0]
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ead8:	6029      	str	r1, [r5, #0]
 800eada:	061d      	lsls	r5, r3, #24
 800eadc:	d514      	bpl.n	800eb08 <_printf_i+0x1ac>
 800eade:	07df      	lsls	r7, r3, #31
 800eae0:	bf44      	itt	mi
 800eae2:	f043 0320 	orrmi.w	r3, r3, #32
 800eae6:	6023      	strmi	r3, [r4, #0]
 800eae8:	b91e      	cbnz	r6, 800eaf2 <_printf_i+0x196>
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	f023 0320 	bic.w	r3, r3, #32
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	2310      	movs	r3, #16
 800eaf4:	e7b0      	b.n	800ea58 <_printf_i+0xfc>
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	f043 0320 	orr.w	r3, r3, #32
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	2378      	movs	r3, #120	; 0x78
 800eb00:	4828      	ldr	r0, [pc, #160]	; (800eba4 <_printf_i+0x248>)
 800eb02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb06:	e7e3      	b.n	800ead0 <_printf_i+0x174>
 800eb08:	0659      	lsls	r1, r3, #25
 800eb0a:	bf48      	it	mi
 800eb0c:	b2b6      	uxthmi	r6, r6
 800eb0e:	e7e6      	b.n	800eade <_printf_i+0x182>
 800eb10:	4615      	mov	r5, r2
 800eb12:	e7bb      	b.n	800ea8c <_printf_i+0x130>
 800eb14:	682b      	ldr	r3, [r5, #0]
 800eb16:	6826      	ldr	r6, [r4, #0]
 800eb18:	6961      	ldr	r1, [r4, #20]
 800eb1a:	1d18      	adds	r0, r3, #4
 800eb1c:	6028      	str	r0, [r5, #0]
 800eb1e:	0635      	lsls	r5, r6, #24
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	d501      	bpl.n	800eb28 <_printf_i+0x1cc>
 800eb24:	6019      	str	r1, [r3, #0]
 800eb26:	e002      	b.n	800eb2e <_printf_i+0x1d2>
 800eb28:	0670      	lsls	r0, r6, #25
 800eb2a:	d5fb      	bpl.n	800eb24 <_printf_i+0x1c8>
 800eb2c:	8019      	strh	r1, [r3, #0]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	4615      	mov	r5, r2
 800eb34:	e7ba      	b.n	800eaac <_printf_i+0x150>
 800eb36:	682b      	ldr	r3, [r5, #0]
 800eb38:	1d1a      	adds	r2, r3, #4
 800eb3a:	602a      	str	r2, [r5, #0]
 800eb3c:	681d      	ldr	r5, [r3, #0]
 800eb3e:	6862      	ldr	r2, [r4, #4]
 800eb40:	2100      	movs	r1, #0
 800eb42:	4628      	mov	r0, r5
 800eb44:	f7f1 fbe4 	bl	8000310 <memchr>
 800eb48:	b108      	cbz	r0, 800eb4e <_printf_i+0x1f2>
 800eb4a:	1b40      	subs	r0, r0, r5
 800eb4c:	6060      	str	r0, [r4, #4]
 800eb4e:	6863      	ldr	r3, [r4, #4]
 800eb50:	6123      	str	r3, [r4, #16]
 800eb52:	2300      	movs	r3, #0
 800eb54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb58:	e7a8      	b.n	800eaac <_printf_i+0x150>
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	462a      	mov	r2, r5
 800eb5e:	4649      	mov	r1, r9
 800eb60:	4640      	mov	r0, r8
 800eb62:	47d0      	blx	sl
 800eb64:	3001      	adds	r0, #1
 800eb66:	d0ab      	beq.n	800eac0 <_printf_i+0x164>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	079b      	lsls	r3, r3, #30
 800eb6c:	d413      	bmi.n	800eb96 <_printf_i+0x23a>
 800eb6e:	68e0      	ldr	r0, [r4, #12]
 800eb70:	9b03      	ldr	r3, [sp, #12]
 800eb72:	4298      	cmp	r0, r3
 800eb74:	bfb8      	it	lt
 800eb76:	4618      	movlt	r0, r3
 800eb78:	e7a4      	b.n	800eac4 <_printf_i+0x168>
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	4632      	mov	r2, r6
 800eb7e:	4649      	mov	r1, r9
 800eb80:	4640      	mov	r0, r8
 800eb82:	47d0      	blx	sl
 800eb84:	3001      	adds	r0, #1
 800eb86:	d09b      	beq.n	800eac0 <_printf_i+0x164>
 800eb88:	3501      	adds	r5, #1
 800eb8a:	68e3      	ldr	r3, [r4, #12]
 800eb8c:	9903      	ldr	r1, [sp, #12]
 800eb8e:	1a5b      	subs	r3, r3, r1
 800eb90:	42ab      	cmp	r3, r5
 800eb92:	dcf2      	bgt.n	800eb7a <_printf_i+0x21e>
 800eb94:	e7eb      	b.n	800eb6e <_printf_i+0x212>
 800eb96:	2500      	movs	r5, #0
 800eb98:	f104 0619 	add.w	r6, r4, #25
 800eb9c:	e7f5      	b.n	800eb8a <_printf_i+0x22e>
 800eb9e:	bf00      	nop
 800eba0:	08011dbd 	.word	0x08011dbd
 800eba4:	08011dce 	.word	0x08011dce

0800eba8 <_sbrk_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d06      	ldr	r5, [pc, #24]	; (800ebc4 <_sbrk_r+0x1c>)
 800ebac:	2300      	movs	r3, #0
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4608      	mov	r0, r1
 800ebb2:	602b      	str	r3, [r5, #0]
 800ebb4:	f7f1 fe5a 	bl	800086c <_sbrk>
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	d102      	bne.n	800ebc2 <_sbrk_r+0x1a>
 800ebbc:	682b      	ldr	r3, [r5, #0]
 800ebbe:	b103      	cbz	r3, 800ebc2 <_sbrk_r+0x1a>
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	24003294 	.word	0x24003294

0800ebc8 <__sread>:
 800ebc8:	b510      	push	{r4, lr}
 800ebca:	460c      	mov	r4, r1
 800ebcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd0:	f000 fa6e 	bl	800f0b0 <_read_r>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	bfab      	itete	ge
 800ebd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebda:	89a3      	ldrhlt	r3, [r4, #12]
 800ebdc:	181b      	addge	r3, r3, r0
 800ebde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebe2:	bfac      	ite	ge
 800ebe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebe6:	81a3      	strhlt	r3, [r4, #12]
 800ebe8:	bd10      	pop	{r4, pc}

0800ebea <__swrite>:
 800ebea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebee:	461f      	mov	r7, r3
 800ebf0:	898b      	ldrh	r3, [r1, #12]
 800ebf2:	05db      	lsls	r3, r3, #23
 800ebf4:	4605      	mov	r5, r0
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	4616      	mov	r6, r2
 800ebfa:	d505      	bpl.n	800ec08 <__swrite+0x1e>
 800ebfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec00:	2302      	movs	r3, #2
 800ec02:	2200      	movs	r2, #0
 800ec04:	f000 f9d0 	bl	800efa8 <_lseek_r>
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec12:	81a3      	strh	r3, [r4, #12]
 800ec14:	4632      	mov	r2, r6
 800ec16:	463b      	mov	r3, r7
 800ec18:	4628      	mov	r0, r5
 800ec1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1e:	f000 b869 	b.w	800ecf4 <_write_r>

0800ec22 <__sseek>:
 800ec22:	b510      	push	{r4, lr}
 800ec24:	460c      	mov	r4, r1
 800ec26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec2a:	f000 f9bd 	bl	800efa8 <_lseek_r>
 800ec2e:	1c43      	adds	r3, r0, #1
 800ec30:	89a3      	ldrh	r3, [r4, #12]
 800ec32:	bf15      	itete	ne
 800ec34:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec3e:	81a3      	strheq	r3, [r4, #12]
 800ec40:	bf18      	it	ne
 800ec42:	81a3      	strhne	r3, [r4, #12]
 800ec44:	bd10      	pop	{r4, pc}

0800ec46 <__sclose>:
 800ec46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec4a:	f000 b8db 	b.w	800ee04 <_close_r>
	...

0800ec50 <__swbuf_r>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	460e      	mov	r6, r1
 800ec54:	4614      	mov	r4, r2
 800ec56:	4605      	mov	r5, r0
 800ec58:	b118      	cbz	r0, 800ec62 <__swbuf_r+0x12>
 800ec5a:	6983      	ldr	r3, [r0, #24]
 800ec5c:	b90b      	cbnz	r3, 800ec62 <__swbuf_r+0x12>
 800ec5e:	f7ff fb1b 	bl	800e298 <__sinit>
 800ec62:	4b21      	ldr	r3, [pc, #132]	; (800ece8 <__swbuf_r+0x98>)
 800ec64:	429c      	cmp	r4, r3
 800ec66:	d12b      	bne.n	800ecc0 <__swbuf_r+0x70>
 800ec68:	686c      	ldr	r4, [r5, #4]
 800ec6a:	69a3      	ldr	r3, [r4, #24]
 800ec6c:	60a3      	str	r3, [r4, #8]
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	071a      	lsls	r2, r3, #28
 800ec72:	d52f      	bpl.n	800ecd4 <__swbuf_r+0x84>
 800ec74:	6923      	ldr	r3, [r4, #16]
 800ec76:	b36b      	cbz	r3, 800ecd4 <__swbuf_r+0x84>
 800ec78:	6923      	ldr	r3, [r4, #16]
 800ec7a:	6820      	ldr	r0, [r4, #0]
 800ec7c:	1ac0      	subs	r0, r0, r3
 800ec7e:	6963      	ldr	r3, [r4, #20]
 800ec80:	b2f6      	uxtb	r6, r6
 800ec82:	4283      	cmp	r3, r0
 800ec84:	4637      	mov	r7, r6
 800ec86:	dc04      	bgt.n	800ec92 <__swbuf_r+0x42>
 800ec88:	4621      	mov	r1, r4
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f000 f950 	bl	800ef30 <_fflush_r>
 800ec90:	bb30      	cbnz	r0, 800ece0 <__swbuf_r+0x90>
 800ec92:	68a3      	ldr	r3, [r4, #8]
 800ec94:	3b01      	subs	r3, #1
 800ec96:	60a3      	str	r3, [r4, #8]
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	6022      	str	r2, [r4, #0]
 800ec9e:	701e      	strb	r6, [r3, #0]
 800eca0:	6963      	ldr	r3, [r4, #20]
 800eca2:	3001      	adds	r0, #1
 800eca4:	4283      	cmp	r3, r0
 800eca6:	d004      	beq.n	800ecb2 <__swbuf_r+0x62>
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	07db      	lsls	r3, r3, #31
 800ecac:	d506      	bpl.n	800ecbc <__swbuf_r+0x6c>
 800ecae:	2e0a      	cmp	r6, #10
 800ecb0:	d104      	bne.n	800ecbc <__swbuf_r+0x6c>
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	f000 f93b 	bl	800ef30 <_fflush_r>
 800ecba:	b988      	cbnz	r0, 800ece0 <__swbuf_r+0x90>
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecc0:	4b0a      	ldr	r3, [pc, #40]	; (800ecec <__swbuf_r+0x9c>)
 800ecc2:	429c      	cmp	r4, r3
 800ecc4:	d101      	bne.n	800ecca <__swbuf_r+0x7a>
 800ecc6:	68ac      	ldr	r4, [r5, #8]
 800ecc8:	e7cf      	b.n	800ec6a <__swbuf_r+0x1a>
 800ecca:	4b09      	ldr	r3, [pc, #36]	; (800ecf0 <__swbuf_r+0xa0>)
 800eccc:	429c      	cmp	r4, r3
 800ecce:	bf08      	it	eq
 800ecd0:	68ec      	ldreq	r4, [r5, #12]
 800ecd2:	e7ca      	b.n	800ec6a <__swbuf_r+0x1a>
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	f000 f81e 	bl	800ed18 <__swsetup_r>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	d0cb      	beq.n	800ec78 <__swbuf_r+0x28>
 800ece0:	f04f 37ff 	mov.w	r7, #4294967295
 800ece4:	e7ea      	b.n	800ecbc <__swbuf_r+0x6c>
 800ece6:	bf00      	nop
 800ece8:	08011d6c 	.word	0x08011d6c
 800ecec:	08011d8c 	.word	0x08011d8c
 800ecf0:	08011d4c 	.word	0x08011d4c

0800ecf4 <_write_r>:
 800ecf4:	b538      	push	{r3, r4, r5, lr}
 800ecf6:	4d07      	ldr	r5, [pc, #28]	; (800ed14 <_write_r+0x20>)
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	4608      	mov	r0, r1
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	2200      	movs	r2, #0
 800ed00:	602a      	str	r2, [r5, #0]
 800ed02:	461a      	mov	r2, r3
 800ed04:	f7f1 fd61 	bl	80007ca <_write>
 800ed08:	1c43      	adds	r3, r0, #1
 800ed0a:	d102      	bne.n	800ed12 <_write_r+0x1e>
 800ed0c:	682b      	ldr	r3, [r5, #0]
 800ed0e:	b103      	cbz	r3, 800ed12 <_write_r+0x1e>
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	bd38      	pop	{r3, r4, r5, pc}
 800ed14:	24003294 	.word	0x24003294

0800ed18 <__swsetup_r>:
 800ed18:	4b32      	ldr	r3, [pc, #200]	; (800ede4 <__swsetup_r+0xcc>)
 800ed1a:	b570      	push	{r4, r5, r6, lr}
 800ed1c:	681d      	ldr	r5, [r3, #0]
 800ed1e:	4606      	mov	r6, r0
 800ed20:	460c      	mov	r4, r1
 800ed22:	b125      	cbz	r5, 800ed2e <__swsetup_r+0x16>
 800ed24:	69ab      	ldr	r3, [r5, #24]
 800ed26:	b913      	cbnz	r3, 800ed2e <__swsetup_r+0x16>
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f7ff fab5 	bl	800e298 <__sinit>
 800ed2e:	4b2e      	ldr	r3, [pc, #184]	; (800ede8 <__swsetup_r+0xd0>)
 800ed30:	429c      	cmp	r4, r3
 800ed32:	d10f      	bne.n	800ed54 <__swsetup_r+0x3c>
 800ed34:	686c      	ldr	r4, [r5, #4]
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed3c:	0719      	lsls	r1, r3, #28
 800ed3e:	d42c      	bmi.n	800ed9a <__swsetup_r+0x82>
 800ed40:	06dd      	lsls	r5, r3, #27
 800ed42:	d411      	bmi.n	800ed68 <__swsetup_r+0x50>
 800ed44:	2309      	movs	r3, #9
 800ed46:	6033      	str	r3, [r6, #0]
 800ed48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed4c:	81a3      	strh	r3, [r4, #12]
 800ed4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed52:	e03e      	b.n	800edd2 <__swsetup_r+0xba>
 800ed54:	4b25      	ldr	r3, [pc, #148]	; (800edec <__swsetup_r+0xd4>)
 800ed56:	429c      	cmp	r4, r3
 800ed58:	d101      	bne.n	800ed5e <__swsetup_r+0x46>
 800ed5a:	68ac      	ldr	r4, [r5, #8]
 800ed5c:	e7eb      	b.n	800ed36 <__swsetup_r+0x1e>
 800ed5e:	4b24      	ldr	r3, [pc, #144]	; (800edf0 <__swsetup_r+0xd8>)
 800ed60:	429c      	cmp	r4, r3
 800ed62:	bf08      	it	eq
 800ed64:	68ec      	ldreq	r4, [r5, #12]
 800ed66:	e7e6      	b.n	800ed36 <__swsetup_r+0x1e>
 800ed68:	0758      	lsls	r0, r3, #29
 800ed6a:	d512      	bpl.n	800ed92 <__swsetup_r+0x7a>
 800ed6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed6e:	b141      	cbz	r1, 800ed82 <__swsetup_r+0x6a>
 800ed70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed74:	4299      	cmp	r1, r3
 800ed76:	d002      	beq.n	800ed7e <__swsetup_r+0x66>
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f7ff fb47 	bl	800e40c <_free_r>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	6363      	str	r3, [r4, #52]	; 0x34
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed88:	81a3      	strh	r3, [r4, #12]
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	6063      	str	r3, [r4, #4]
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	f043 0308 	orr.w	r3, r3, #8
 800ed98:	81a3      	strh	r3, [r4, #12]
 800ed9a:	6923      	ldr	r3, [r4, #16]
 800ed9c:	b94b      	cbnz	r3, 800edb2 <__swsetup_r+0x9a>
 800ed9e:	89a3      	ldrh	r3, [r4, #12]
 800eda0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eda4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eda8:	d003      	beq.n	800edb2 <__swsetup_r+0x9a>
 800edaa:	4621      	mov	r1, r4
 800edac:	4630      	mov	r0, r6
 800edae:	f000 f933 	bl	800f018 <__smakebuf_r>
 800edb2:	89a0      	ldrh	r0, [r4, #12]
 800edb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edb8:	f010 0301 	ands.w	r3, r0, #1
 800edbc:	d00a      	beq.n	800edd4 <__swsetup_r+0xbc>
 800edbe:	2300      	movs	r3, #0
 800edc0:	60a3      	str	r3, [r4, #8]
 800edc2:	6963      	ldr	r3, [r4, #20]
 800edc4:	425b      	negs	r3, r3
 800edc6:	61a3      	str	r3, [r4, #24]
 800edc8:	6923      	ldr	r3, [r4, #16]
 800edca:	b943      	cbnz	r3, 800edde <__swsetup_r+0xc6>
 800edcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800edd0:	d1ba      	bne.n	800ed48 <__swsetup_r+0x30>
 800edd2:	bd70      	pop	{r4, r5, r6, pc}
 800edd4:	0781      	lsls	r1, r0, #30
 800edd6:	bf58      	it	pl
 800edd8:	6963      	ldrpl	r3, [r4, #20]
 800edda:	60a3      	str	r3, [r4, #8]
 800eddc:	e7f4      	b.n	800edc8 <__swsetup_r+0xb0>
 800edde:	2000      	movs	r0, #0
 800ede0:	e7f7      	b.n	800edd2 <__swsetup_r+0xba>
 800ede2:	bf00      	nop
 800ede4:	24000030 	.word	0x24000030
 800ede8:	08011d6c 	.word	0x08011d6c
 800edec:	08011d8c 	.word	0x08011d8c
 800edf0:	08011d4c 	.word	0x08011d4c

0800edf4 <abort>:
 800edf4:	b508      	push	{r3, lr}
 800edf6:	2006      	movs	r0, #6
 800edf8:	f000 f994 	bl	800f124 <raise>
 800edfc:	2001      	movs	r0, #1
 800edfe:	f7f1 fcbd 	bl	800077c <_exit>
	...

0800ee04 <_close_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4d06      	ldr	r5, [pc, #24]	; (800ee20 <_close_r+0x1c>)
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	4608      	mov	r0, r1
 800ee0e:	602b      	str	r3, [r5, #0]
 800ee10:	f7f1 fcf7 	bl	8000802 <_close>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d102      	bne.n	800ee1e <_close_r+0x1a>
 800ee18:	682b      	ldr	r3, [r5, #0]
 800ee1a:	b103      	cbz	r3, 800ee1e <_close_r+0x1a>
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
 800ee20:	24003294 	.word	0x24003294

0800ee24 <__sflush_r>:
 800ee24:	898a      	ldrh	r2, [r1, #12]
 800ee26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	0710      	lsls	r0, r2, #28
 800ee2e:	460c      	mov	r4, r1
 800ee30:	d458      	bmi.n	800eee4 <__sflush_r+0xc0>
 800ee32:	684b      	ldr	r3, [r1, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	dc05      	bgt.n	800ee44 <__sflush_r+0x20>
 800ee38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	dc02      	bgt.n	800ee44 <__sflush_r+0x20>
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee46:	2e00      	cmp	r6, #0
 800ee48:	d0f9      	beq.n	800ee3e <__sflush_r+0x1a>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee50:	682f      	ldr	r7, [r5, #0]
 800ee52:	602b      	str	r3, [r5, #0]
 800ee54:	d032      	beq.n	800eebc <__sflush_r+0x98>
 800ee56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee58:	89a3      	ldrh	r3, [r4, #12]
 800ee5a:	075a      	lsls	r2, r3, #29
 800ee5c:	d505      	bpl.n	800ee6a <__sflush_r+0x46>
 800ee5e:	6863      	ldr	r3, [r4, #4]
 800ee60:	1ac0      	subs	r0, r0, r3
 800ee62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee64:	b10b      	cbz	r3, 800ee6a <__sflush_r+0x46>
 800ee66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee68:	1ac0      	subs	r0, r0, r3
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee70:	6a21      	ldr	r1, [r4, #32]
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b0      	blx	r6
 800ee76:	1c43      	adds	r3, r0, #1
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	d106      	bne.n	800ee8a <__sflush_r+0x66>
 800ee7c:	6829      	ldr	r1, [r5, #0]
 800ee7e:	291d      	cmp	r1, #29
 800ee80:	d82c      	bhi.n	800eedc <__sflush_r+0xb8>
 800ee82:	4a2a      	ldr	r2, [pc, #168]	; (800ef2c <__sflush_r+0x108>)
 800ee84:	40ca      	lsrs	r2, r1
 800ee86:	07d6      	lsls	r6, r2, #31
 800ee88:	d528      	bpl.n	800eedc <__sflush_r+0xb8>
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	6062      	str	r2, [r4, #4]
 800ee8e:	04d9      	lsls	r1, r3, #19
 800ee90:	6922      	ldr	r2, [r4, #16]
 800ee92:	6022      	str	r2, [r4, #0]
 800ee94:	d504      	bpl.n	800eea0 <__sflush_r+0x7c>
 800ee96:	1c42      	adds	r2, r0, #1
 800ee98:	d101      	bne.n	800ee9e <__sflush_r+0x7a>
 800ee9a:	682b      	ldr	r3, [r5, #0]
 800ee9c:	b903      	cbnz	r3, 800eea0 <__sflush_r+0x7c>
 800ee9e:	6560      	str	r0, [r4, #84]	; 0x54
 800eea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eea2:	602f      	str	r7, [r5, #0]
 800eea4:	2900      	cmp	r1, #0
 800eea6:	d0ca      	beq.n	800ee3e <__sflush_r+0x1a>
 800eea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeac:	4299      	cmp	r1, r3
 800eeae:	d002      	beq.n	800eeb6 <__sflush_r+0x92>
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f7ff faab 	bl	800e40c <_free_r>
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	6360      	str	r0, [r4, #52]	; 0x34
 800eeba:	e7c1      	b.n	800ee40 <__sflush_r+0x1c>
 800eebc:	6a21      	ldr	r1, [r4, #32]
 800eebe:	2301      	movs	r3, #1
 800eec0:	4628      	mov	r0, r5
 800eec2:	47b0      	blx	r6
 800eec4:	1c41      	adds	r1, r0, #1
 800eec6:	d1c7      	bne.n	800ee58 <__sflush_r+0x34>
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d0c4      	beq.n	800ee58 <__sflush_r+0x34>
 800eece:	2b1d      	cmp	r3, #29
 800eed0:	d001      	beq.n	800eed6 <__sflush_r+0xb2>
 800eed2:	2b16      	cmp	r3, #22
 800eed4:	d101      	bne.n	800eeda <__sflush_r+0xb6>
 800eed6:	602f      	str	r7, [r5, #0]
 800eed8:	e7b1      	b.n	800ee3e <__sflush_r+0x1a>
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	e7ad      	b.n	800ee40 <__sflush_r+0x1c>
 800eee4:	690f      	ldr	r7, [r1, #16]
 800eee6:	2f00      	cmp	r7, #0
 800eee8:	d0a9      	beq.n	800ee3e <__sflush_r+0x1a>
 800eeea:	0793      	lsls	r3, r2, #30
 800eeec:	680e      	ldr	r6, [r1, #0]
 800eeee:	bf08      	it	eq
 800eef0:	694b      	ldreq	r3, [r1, #20]
 800eef2:	600f      	str	r7, [r1, #0]
 800eef4:	bf18      	it	ne
 800eef6:	2300      	movne	r3, #0
 800eef8:	eba6 0807 	sub.w	r8, r6, r7
 800eefc:	608b      	str	r3, [r1, #8]
 800eefe:	f1b8 0f00 	cmp.w	r8, #0
 800ef02:	dd9c      	ble.n	800ee3e <__sflush_r+0x1a>
 800ef04:	6a21      	ldr	r1, [r4, #32]
 800ef06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef08:	4643      	mov	r3, r8
 800ef0a:	463a      	mov	r2, r7
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	47b0      	blx	r6
 800ef10:	2800      	cmp	r0, #0
 800ef12:	dc06      	bgt.n	800ef22 <__sflush_r+0xfe>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	e78e      	b.n	800ee40 <__sflush_r+0x1c>
 800ef22:	4407      	add	r7, r0
 800ef24:	eba8 0800 	sub.w	r8, r8, r0
 800ef28:	e7e9      	b.n	800eefe <__sflush_r+0xda>
 800ef2a:	bf00      	nop
 800ef2c:	20400001 	.word	0x20400001

0800ef30 <_fflush_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	690b      	ldr	r3, [r1, #16]
 800ef34:	4605      	mov	r5, r0
 800ef36:	460c      	mov	r4, r1
 800ef38:	b913      	cbnz	r3, 800ef40 <_fflush_r+0x10>
 800ef3a:	2500      	movs	r5, #0
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	bd38      	pop	{r3, r4, r5, pc}
 800ef40:	b118      	cbz	r0, 800ef4a <_fflush_r+0x1a>
 800ef42:	6983      	ldr	r3, [r0, #24]
 800ef44:	b90b      	cbnz	r3, 800ef4a <_fflush_r+0x1a>
 800ef46:	f7ff f9a7 	bl	800e298 <__sinit>
 800ef4a:	4b14      	ldr	r3, [pc, #80]	; (800ef9c <_fflush_r+0x6c>)
 800ef4c:	429c      	cmp	r4, r3
 800ef4e:	d11b      	bne.n	800ef88 <_fflush_r+0x58>
 800ef50:	686c      	ldr	r4, [r5, #4]
 800ef52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d0ef      	beq.n	800ef3a <_fflush_r+0xa>
 800ef5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef5c:	07d0      	lsls	r0, r2, #31
 800ef5e:	d404      	bmi.n	800ef6a <_fflush_r+0x3a>
 800ef60:	0599      	lsls	r1, r3, #22
 800ef62:	d402      	bmi.n	800ef6a <_fflush_r+0x3a>
 800ef64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef66:	f7ff fa47 	bl	800e3f8 <__retarget_lock_acquire_recursive>
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	f7ff ff59 	bl	800ee24 <__sflush_r>
 800ef72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef74:	07da      	lsls	r2, r3, #31
 800ef76:	4605      	mov	r5, r0
 800ef78:	d4e0      	bmi.n	800ef3c <_fflush_r+0xc>
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	059b      	lsls	r3, r3, #22
 800ef7e:	d4dd      	bmi.n	800ef3c <_fflush_r+0xc>
 800ef80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef82:	f7ff fa3a 	bl	800e3fa <__retarget_lock_release_recursive>
 800ef86:	e7d9      	b.n	800ef3c <_fflush_r+0xc>
 800ef88:	4b05      	ldr	r3, [pc, #20]	; (800efa0 <_fflush_r+0x70>)
 800ef8a:	429c      	cmp	r4, r3
 800ef8c:	d101      	bne.n	800ef92 <_fflush_r+0x62>
 800ef8e:	68ac      	ldr	r4, [r5, #8]
 800ef90:	e7df      	b.n	800ef52 <_fflush_r+0x22>
 800ef92:	4b04      	ldr	r3, [pc, #16]	; (800efa4 <_fflush_r+0x74>)
 800ef94:	429c      	cmp	r4, r3
 800ef96:	bf08      	it	eq
 800ef98:	68ec      	ldreq	r4, [r5, #12]
 800ef9a:	e7da      	b.n	800ef52 <_fflush_r+0x22>
 800ef9c:	08011d6c 	.word	0x08011d6c
 800efa0:	08011d8c 	.word	0x08011d8c
 800efa4:	08011d4c 	.word	0x08011d4c

0800efa8 <_lseek_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d07      	ldr	r5, [pc, #28]	; (800efc8 <_lseek_r+0x20>)
 800efac:	4604      	mov	r4, r0
 800efae:	4608      	mov	r0, r1
 800efb0:	4611      	mov	r1, r2
 800efb2:	2200      	movs	r2, #0
 800efb4:	602a      	str	r2, [r5, #0]
 800efb6:	461a      	mov	r2, r3
 800efb8:	f7f1 fc4a 	bl	8000850 <_lseek>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d102      	bne.n	800efc6 <_lseek_r+0x1e>
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	b103      	cbz	r3, 800efc6 <_lseek_r+0x1e>
 800efc4:	6023      	str	r3, [r4, #0]
 800efc6:	bd38      	pop	{r3, r4, r5, pc}
 800efc8:	24003294 	.word	0x24003294

0800efcc <__swhatbuf_r>:
 800efcc:	b570      	push	{r4, r5, r6, lr}
 800efce:	460e      	mov	r6, r1
 800efd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd4:	2900      	cmp	r1, #0
 800efd6:	b096      	sub	sp, #88	; 0x58
 800efd8:	4614      	mov	r4, r2
 800efda:	461d      	mov	r5, r3
 800efdc:	da08      	bge.n	800eff0 <__swhatbuf_r+0x24>
 800efde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	602a      	str	r2, [r5, #0]
 800efe6:	061a      	lsls	r2, r3, #24
 800efe8:	d410      	bmi.n	800f00c <__swhatbuf_r+0x40>
 800efea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efee:	e00e      	b.n	800f00e <__swhatbuf_r+0x42>
 800eff0:	466a      	mov	r2, sp
 800eff2:	f000 f8b3 	bl	800f15c <_fstat_r>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	dbf1      	blt.n	800efde <__swhatbuf_r+0x12>
 800effa:	9a01      	ldr	r2, [sp, #4]
 800effc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f004:	425a      	negs	r2, r3
 800f006:	415a      	adcs	r2, r3
 800f008:	602a      	str	r2, [r5, #0]
 800f00a:	e7ee      	b.n	800efea <__swhatbuf_r+0x1e>
 800f00c:	2340      	movs	r3, #64	; 0x40
 800f00e:	2000      	movs	r0, #0
 800f010:	6023      	str	r3, [r4, #0]
 800f012:	b016      	add	sp, #88	; 0x58
 800f014:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f018 <__smakebuf_r>:
 800f018:	898b      	ldrh	r3, [r1, #12]
 800f01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f01c:	079d      	lsls	r5, r3, #30
 800f01e:	4606      	mov	r6, r0
 800f020:	460c      	mov	r4, r1
 800f022:	d507      	bpl.n	800f034 <__smakebuf_r+0x1c>
 800f024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f028:	6023      	str	r3, [r4, #0]
 800f02a:	6123      	str	r3, [r4, #16]
 800f02c:	2301      	movs	r3, #1
 800f02e:	6163      	str	r3, [r4, #20]
 800f030:	b002      	add	sp, #8
 800f032:	bd70      	pop	{r4, r5, r6, pc}
 800f034:	ab01      	add	r3, sp, #4
 800f036:	466a      	mov	r2, sp
 800f038:	f7ff ffc8 	bl	800efcc <__swhatbuf_r>
 800f03c:	9900      	ldr	r1, [sp, #0]
 800f03e:	4605      	mov	r5, r0
 800f040:	4630      	mov	r0, r6
 800f042:	f7ff fa4f 	bl	800e4e4 <_malloc_r>
 800f046:	b948      	cbnz	r0, 800f05c <__smakebuf_r+0x44>
 800f048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f04c:	059a      	lsls	r2, r3, #22
 800f04e:	d4ef      	bmi.n	800f030 <__smakebuf_r+0x18>
 800f050:	f023 0303 	bic.w	r3, r3, #3
 800f054:	f043 0302 	orr.w	r3, r3, #2
 800f058:	81a3      	strh	r3, [r4, #12]
 800f05a:	e7e3      	b.n	800f024 <__smakebuf_r+0xc>
 800f05c:	4b0d      	ldr	r3, [pc, #52]	; (800f094 <__smakebuf_r+0x7c>)
 800f05e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f060:	89a3      	ldrh	r3, [r4, #12]
 800f062:	6020      	str	r0, [r4, #0]
 800f064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f068:	81a3      	strh	r3, [r4, #12]
 800f06a:	9b00      	ldr	r3, [sp, #0]
 800f06c:	6163      	str	r3, [r4, #20]
 800f06e:	9b01      	ldr	r3, [sp, #4]
 800f070:	6120      	str	r0, [r4, #16]
 800f072:	b15b      	cbz	r3, 800f08c <__smakebuf_r+0x74>
 800f074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f078:	4630      	mov	r0, r6
 800f07a:	f000 f881 	bl	800f180 <_isatty_r>
 800f07e:	b128      	cbz	r0, 800f08c <__smakebuf_r+0x74>
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	f023 0303 	bic.w	r3, r3, #3
 800f086:	f043 0301 	orr.w	r3, r3, #1
 800f08a:	81a3      	strh	r3, [r4, #12]
 800f08c:	89a0      	ldrh	r0, [r4, #12]
 800f08e:	4305      	orrs	r5, r0
 800f090:	81a5      	strh	r5, [r4, #12]
 800f092:	e7cd      	b.n	800f030 <__smakebuf_r+0x18>
 800f094:	0800e231 	.word	0x0800e231

0800f098 <__malloc_lock>:
 800f098:	4801      	ldr	r0, [pc, #4]	; (800f0a0 <__malloc_lock+0x8>)
 800f09a:	f7ff b9ad 	b.w	800e3f8 <__retarget_lock_acquire_recursive>
 800f09e:	bf00      	nop
 800f0a0:	24003298 	.word	0x24003298

0800f0a4 <__malloc_unlock>:
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <__malloc_unlock+0x8>)
 800f0a6:	f7ff b9a8 	b.w	800e3fa <__retarget_lock_release_recursive>
 800f0aa:	bf00      	nop
 800f0ac:	24003298 	.word	0x24003298

0800f0b0 <_read_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d07      	ldr	r5, [pc, #28]	; (800f0d0 <_read_r+0x20>)
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	4608      	mov	r0, r1
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	602a      	str	r2, [r5, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f7f1 fb66 	bl	8000790 <_read>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d102      	bne.n	800f0ce <_read_r+0x1e>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	b103      	cbz	r3, 800f0ce <_read_r+0x1e>
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	24003294 	.word	0x24003294

0800f0d4 <_raise_r>:
 800f0d4:	291f      	cmp	r1, #31
 800f0d6:	b538      	push	{r3, r4, r5, lr}
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460d      	mov	r5, r1
 800f0dc:	d904      	bls.n	800f0e8 <_raise_r+0x14>
 800f0de:	2316      	movs	r3, #22
 800f0e0:	6003      	str	r3, [r0, #0]
 800f0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e6:	bd38      	pop	{r3, r4, r5, pc}
 800f0e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0ea:	b112      	cbz	r2, 800f0f2 <_raise_r+0x1e>
 800f0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0f0:	b94b      	cbnz	r3, 800f106 <_raise_r+0x32>
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 f830 	bl	800f158 <_getpid_r>
 800f0f8:	462a      	mov	r2, r5
 800f0fa:	4601      	mov	r1, r0
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f102:	f000 b817 	b.w	800f134 <_kill_r>
 800f106:	2b01      	cmp	r3, #1
 800f108:	d00a      	beq.n	800f120 <_raise_r+0x4c>
 800f10a:	1c59      	adds	r1, r3, #1
 800f10c:	d103      	bne.n	800f116 <_raise_r+0x42>
 800f10e:	2316      	movs	r3, #22
 800f110:	6003      	str	r3, [r0, #0]
 800f112:	2001      	movs	r0, #1
 800f114:	e7e7      	b.n	800f0e6 <_raise_r+0x12>
 800f116:	2400      	movs	r4, #0
 800f118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f11c:	4628      	mov	r0, r5
 800f11e:	4798      	blx	r3
 800f120:	2000      	movs	r0, #0
 800f122:	e7e0      	b.n	800f0e6 <_raise_r+0x12>

0800f124 <raise>:
 800f124:	4b02      	ldr	r3, [pc, #8]	; (800f130 <raise+0xc>)
 800f126:	4601      	mov	r1, r0
 800f128:	6818      	ldr	r0, [r3, #0]
 800f12a:	f7ff bfd3 	b.w	800f0d4 <_raise_r>
 800f12e:	bf00      	nop
 800f130:	24000030 	.word	0x24000030

0800f134 <_kill_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d07      	ldr	r5, [pc, #28]	; (800f154 <_kill_r+0x20>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	4611      	mov	r1, r2
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	f7f1 fb09 	bl	8000758 <_kill>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	d102      	bne.n	800f150 <_kill_r+0x1c>
 800f14a:	682b      	ldr	r3, [r5, #0]
 800f14c:	b103      	cbz	r3, 800f150 <_kill_r+0x1c>
 800f14e:	6023      	str	r3, [r4, #0]
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	bf00      	nop
 800f154:	24003294 	.word	0x24003294

0800f158 <_getpid_r>:
 800f158:	f7f1 baf6 	b.w	8000748 <_getpid>

0800f15c <_fstat_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d07      	ldr	r5, [pc, #28]	; (800f17c <_fstat_r+0x20>)
 800f160:	2300      	movs	r3, #0
 800f162:	4604      	mov	r4, r0
 800f164:	4608      	mov	r0, r1
 800f166:	4611      	mov	r1, r2
 800f168:	602b      	str	r3, [r5, #0]
 800f16a:	f7f1 fb56 	bl	800081a <_fstat>
 800f16e:	1c43      	adds	r3, r0, #1
 800f170:	d102      	bne.n	800f178 <_fstat_r+0x1c>
 800f172:	682b      	ldr	r3, [r5, #0]
 800f174:	b103      	cbz	r3, 800f178 <_fstat_r+0x1c>
 800f176:	6023      	str	r3, [r4, #0]
 800f178:	bd38      	pop	{r3, r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	24003294 	.word	0x24003294

0800f180 <_isatty_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d06      	ldr	r5, [pc, #24]	; (800f19c <_isatty_r+0x1c>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	602b      	str	r3, [r5, #0]
 800f18c:	f7f1 fb55 	bl	800083a <_isatty>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d102      	bne.n	800f19a <_isatty_r+0x1a>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	b103      	cbz	r3, 800f19a <_isatty_r+0x1a>
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	24003294 	.word	0x24003294

0800f1a0 <_init>:
 800f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a2:	bf00      	nop
 800f1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1a6:	bc08      	pop	{r3}
 800f1a8:	469e      	mov	lr, r3
 800f1aa:	4770      	bx	lr

0800f1ac <_fini>:
 800f1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ae:	bf00      	nop
 800f1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b2:	bc08      	pop	{r3}
 800f1b4:	469e      	mov	lr, r3
 800f1b6:	4770      	bx	lr
